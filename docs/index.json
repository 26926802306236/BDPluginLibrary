[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/index.js",
    "content": "import {ColorUtilities, DOMUtilities, ReactUtilities, PluginUtilities, PluginUpdateUtilities,\r\n\tPluginSettings, PluginContextMenu, PluginTooltip, DiscordPermissions, InternalUtilities,\r\n\tDiscordModules, DiscordClasses, DiscordSelectors, GeneralUtilities, Patcher, Logger} from \"modules\";\r\n\r\n\t\r\n/** \r\n * The main object housing the modules making up this library.\r\n * @version 0.5.6\r\n */\r\nwindow[\"ZeresLibrary\"] = {\r\n\tColorUtilities: ColorUtilities,\r\n\tDOMUtilities: DOMUtilities,\r\n\tReactUtilities: ReactUtilities,\r\n\tPluginUtilities: PluginUtilities,\r\n\tPluginUpdateUtilities: PluginUpdateUtilities,\r\n\tPluginSettings: PluginSettings,\r\n\tContextMenu: PluginContextMenu,\r\n\tTooltip: PluginTooltip,\r\n\tDiscordPermissions: DiscordPermissions,\r\n\tInternalUtilities: InternalUtilities,\r\n\tDiscordModules: DiscordModules,\r\n\tDiscordClasses: DiscordClasses,\r\n\tDiscordSelectors: DiscordSelectors,\r\n\tGeneralUtilities: GeneralUtilities,\r\n\tPatcher: Patcher,\r\n\tLogger: Logger,\r\n\tScreen: {\r\n\t\tget width() { return Math.max(document.documentElement.clientWidth, window.innerWidth || 0); },\r\n\t\tget height() { return Math.max(document.documentElement.clientHeight, window.innerHeight || 0); }\r\n\t},\r\n\tcreationTime: Date.now(),\r\n\tget isOutdated() { return Date.now() - this.creationTime > 600000; },\r\n\tversion: \"0.5.6\"\r\n};\r\n\r\nwindow.ZL = window.ZeresLibrary;\r\n\r\nBdApi.clearCSS(\"PluginLibraryCSS\");\r\nBdApi.injectCSS(\"PluginLibraryCSS\", PluginSettings.getCSS() + PluginUtilities.getToastCSS() + PluginUpdateUtilities.getCSS());\r\n\r\njQuery.extend(jQuery.easing, { easeInSine: function (x, t, b, c, d) { return -c * Math.cos(t / d * (Math.PI / 2)) + c + b; }});\r\n\r\nPatcher.unpatchAll(\"ZeresLibrary\");\r\nPatcher.before(\"ZeresLibrary\", jQuery.fn, \"find\", (thisObject, args) => {\r\n\tif (args.length && args[0] instanceof DOMUtilities.Selector) args[0] = args[0].toString();\r\n});\r\n\r\nPatcher.before(\"ZeresLibrary\", global, \"$\", (thisObject, args) => {\r\n\tif (args.length && args[0] instanceof DOMUtilities.Selector) args[0] = args[0].toString();\r\n});\r\n\r\njQuery.extend(true, global.$, jQuery);\r\n",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "src/modules/colorconverter.js",
    "content": "/**\r\n * Helpful utilities for dealing with colors.\r\n * @module ColorConverter\r\n * @version 0.0.2\r\n */\r\n\r\nexport default class ColorConverter {\r\n\r\n\t/**\r\n\t * Will get the red green and blue values of any color string.\r\n\t * @param {string} color - the color to obtain the red, green and blue values of. Can be in any of these formats: #fff, #ffffff, rgb, rgba\r\n\t * @returns {array} - array containing the red, green, and blue values\r\n\t */\r\n\tstatic getRGB(color) {\r\n\t\tvar result = /rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/.exec(color);\r\n\t\tif (result) return [parseInt(result[1]), parseInt(result[2]), parseInt(result[3])];\r\n\r\n\t\tresult = /rgb\\(\\s*([0-9]+(?:\\.[0-9]+)?)%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)%\\s*\\)/.exec(color);\r\n\t\tif (result) return [parseFloat(result[1]) * 2.55, parseFloat(result[2]) * 2.55, parseFloat(result[3]) * 2.55];\r\n\r\n\t\tresult = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(color);\r\n\t\tif (result) return [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)];\r\n\t\t\r\n\t\tresult = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(color);\r\n\t\tif (result) return [parseInt(result[1] + result[1], 16), parseInt(result[2] + result[2], 16), parseInt(result[3] + result[3], 16)];\r\n\t}\r\n\r\n\t/**\r\n\t * Will get the darken the color by a certain percent\r\n\t * @param {string} color - Can be in any of these formats: #fff, #ffffff, rgb, rgba\r\n\t * @param {number} percent - percent to darken the color by (0-100)\r\n\t * @returns {string} - new color in rgb format\r\n\t */\r\n\tstatic darkenColor(color, percent) {\r\n\t\tvar rgb = this.getRGB(color);\r\n\t\t\r\n\t\tfor(var i = 0; i < rgb.length; i++){\r\n\t\t\trgb[i] = Math.round(Math.max(0, rgb[i] - rgb[i] * (percent / 100)));\r\n\t\t}\r\n\t\t\r\n\t\treturn 'rgb(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ')';\r\n\t}\r\n\r\n\t/**\r\n\t * Will get the lighten the color by a certain percent\r\n\t * @param {string} color - Can be in any of these formats: #fff, #ffffff, rgb, rgba\r\n\t * @param {number} percent - percent to lighten the color by (0-100)\r\n\t * @returns {string} - new color in rgb format\r\n\t */\r\n\tstatic lightenColor(color, percent) {\r\n\t\tvar rgb = this.getRGB(color);\r\n\t\t\r\n\t\tfor(var i = 0; i < rgb.length; i++){\r\n\t\t\trgb[i] = Math.round(Math.min(255, rgb[i] + rgb[i] * (percent / 100)));\r\n\t\t}\r\n\t\t\r\n\t\treturn 'rgb(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ')';\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a color to rgba format string\r\n\t * @param {string} color - Can be in any of these formats: #fff, #ffffff, rgb, rgba\r\n\t * @param {number} alpha - alpha level for the new color\r\n\t * @returns {string} - new color in rgb format\r\n\t */\r\n\tstatic rgbToAlpha(color, alpha) {\r\n\t\tvar rgb = this.getRGB(color);\t\t\r\n\t\treturn 'rgba(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ',' + alpha + ')';\r\n\t}\r\n\r\n}",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/colorconverter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "ColorConverter",
    "memberof": "src/modules/colorconverter.js",
    "static": true,
    "longname": "src/modules/colorconverter.js~ColorConverter",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/colorconverter.js",
    "importStyle": "ColorConverter",
    "description": "Helpful utilities for dealing with colors.",
    "lineNumber": 7,
    "version": "0.0.2",
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "ColorConverter"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "getRGB",
    "memberof": "src/modules/colorconverter.js~ColorConverter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/colorconverter.js~ColorConverter.getRGB",
    "access": "public",
    "description": "Will get the red green and blue values of any color string.",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array} - array containing the red, green, and blue values"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "the color to obtain the red, green and blue values of. Can be in any of these formats: #fff, #ffffff, rgb, rgba"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "array containing the red, green, and blue values"
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "darkenColor",
    "memberof": "src/modules/colorconverter.js~ColorConverter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/colorconverter.js~ColorConverter.darkenColor",
    "access": "public",
    "description": "Will get the darken the color by a certain percent",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - new color in rgb format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "Can be in any of these formats: #fff, #ffffff, rgb, rgba"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "percent",
        "description": "percent to darken the color by (0-100)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "new color in rgb format"
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "lightenColor",
    "memberof": "src/modules/colorconverter.js~ColorConverter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/colorconverter.js~ColorConverter.lightenColor",
    "access": "public",
    "description": "Will get the lighten the color by a certain percent",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - new color in rgb format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "Can be in any of these formats: #fff, #ffffff, rgb, rgba"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "percent",
        "description": "percent to lighten the color by (0-100)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "new color in rgb format"
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "rgbToAlpha",
    "memberof": "src/modules/colorconverter.js~ColorConverter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/colorconverter.js~ColorConverter.rgbToAlpha",
    "access": "public",
    "description": "Converts a color to rgba format string",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - new color in rgb format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "Can be in any of these formats: #fff, #ffffff, rgb, rgba"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": "alpha level for the new color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "new color in rgb format"
    }
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/modules/contextmenu.js",
    "content": "/**\r\n * Self-made context menus that emulate Discord's own context menus.\r\n * @module PluginContextMenu\r\n * @version 0.0.7\r\n */\r\n\r\nimport {DiscordClasses, DiscordSelectors} from \"./DiscordClassModules\";\r\nimport {$} from \"../vendor\";\r\n\r\n\r\n/** Main menu class for creating custom context menus. */\r\nexport class Menu {\r\n    /**\r\n     * \r\n     * @param {boolean} [scroll=false] - should this menu be a scrolling menu (usually only used for submenus)\r\n     */\r\n\tconstructor(scroll = false) {\r\n\t\tthis.theme = $('.theme-dark').length ? \"theme-dark\" : \"theme-light\";\r\n\t\tthis.element = $(\"<div>\").addClass(DiscordClasses.ContextMenuClasses.contextMenu).addClass(\"plugin-context-menu\").addClass(this.theme);\r\n\t\tthis.scroll = scroll;\r\n\t\tif (scroll) {\r\n\t\t\tthis.scroller = $(\"<div>\").addClass(DiscordClasses.ScrollerClasses.scroller).addClass(DiscordClasses.ContextMenuClasses.scroller);\r\n\t\t\tthis.element.append($(\"<div>\")\r\n\t\t\t\t.addClass(DiscordClasses.ScrollerClasses.scrollerWrap)\r\n\t\t\t\t.addClass(DiscordClasses.ScrollerClasses.scrollerThemed)\r\n\t\t\t\t.addClass(DiscordClasses.ScrollerClasses.themeGhostHairline).append(\r\n\t\t\t\t\tthis.scroller\r\n\t\t\t));\r\n\t\t}\r\n\t}\r\n    \r\n    /**\r\n     * Adds an item group to the menu. The group should already be populated.\r\n     * @param {PluginContextMenu.ItemGroup} contextGroup - group to add to the menu\r\n     * @returns {PluginContextMenu.Menu} returns self for chaining\r\n     */\r\n\taddGroup(contextGroup) {\r\n\t\tif (this.scroll) this.scroller.append(contextGroup.getElement());\r\n\t\telse this.element.append(contextGroup.getElement());\r\n\t\treturn this;\r\n\t}\r\n    \r\n    /**\r\n     * Adds items to the context menu directly. It is recommended to add to a group and use \r\n     * {@link PluginContextMenu.Menu#addGroup} instead to behave as natively as possible.\r\n     * @param {PluginContextMenu.MenuItem} contextItems - list of items to add to the context menu\r\n     * @returns {PluginContextMenu.Menu} returns self for chaining\r\n     */\r\n\taddItems(...contextItems) {\r\n\t\tfor (var i = 0; i < contextItems.length; i++) {\r\n\t\t\tif (this.scroll) this.scroller.append(contextItems[i].getElement());\r\n\t\t\telse this.element.append(contextItems[i].getElement());\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n    \r\n    /**\r\n     * Shows the menu at a specific x and y position. This generally comes from the\r\n     * pointer position on a right click event.\r\n     * @param {number} x - x coordinate for the menu to show at\r\n     * @param {number} y - y coordinate for the menu to show at\r\n     */\r\n\tshow(x, y) {\r\n\t\tconst maxWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\r\n\t\tconst maxHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\r\n\t\tconst mouseX = x;\r\n\t\tconst mouseY = y;\r\n\t\t\r\n\t\tlet type = this.element.parents(\".plugin-context-menu\").length > this.element.parents(DiscordSelectors.ContextMenuClasses.contextMenu).length ? \".plugin-context-menu\" : DiscordSelectors.ContextMenuClasses.contextMenu;\r\n\t\tvar depth = this.element.parents(type).length;\r\n\t\tif (depth == 0) this.element.appendTo('#app-mount');\r\n\t\tthis.element.css(\"top\", mouseY).css(\"left\", mouseX);\r\n\t\t\r\n\t\tif (depth > 0) {\r\n\t\t\tvar top = this.element.parents(type).last();\r\n\t\t\tvar closest = this.element.parents(type).first();\r\n\t\t\tvar negate = closest.hasClass(DiscordClasses.ContextMenuClasses.invertChildX) ? -1 : 1;\r\n\t\t\tthis.element.css(\"margin-left\", negate * closest.find(`.${DiscordClasses.ContextMenuClasses.item}`).outerWidth() + closest.offset().left - top.offset().left);\r\n\t\t}\r\n\t\t\r\n\t\tif (mouseY + this.element.outerHeight() >= maxHeight) {\r\n\t\t\tthis.element.addClass(\"invertY\").addClass(DiscordClasses.ContextMenuClasses.invertY);\r\n\t\t\tthis.element.css(\"top\", mouseY - this.element.outerHeight());\r\n\t\t\tif (depth > 0) this.element.css(\"top\", (mouseY + this.element.parent().outerHeight()) - this.element.outerHeight());\r\n\t\t}\r\n\t\tif (this.element.offset().left + this.element.outerWidth() >= maxWidth) {\r\n\t\t\tthis.element.addClass(\"invertX\");\r\n\t\t\tthis.element.css(\"left\", mouseX - this.element.outerWidth());\r\n\t\t}\r\n\t\tif (this.element.offset().left + 2 * this.element.outerWidth() >= maxWidth) {\r\n\t\t\tthis.element.addClass(DiscordClasses.ContextMenuClasses.invertChildX);\r\n\t\t}\r\n\r\n\t\tif (depth == 0) {\r\n\t\t\t$(document).on(\"mousedown.zctx\", (e) => {\r\n\t\t\t\tif (!this.element.has(e.target).length && !this.element.is(e.target)) {\r\n\t\t\t\t\tthis.removeMenu();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t$(document).on(\"click.zctx\", (e) => {\r\n\t\t\t\tif (this.element.has(e.target).length) {\r\n\t\t\t\t\tif ($._data($(e.target).closest(DiscordSelectors.ContextMenuClasses.item)[0], 'events').click) {\r\n\t\t\t\t\t\tthis.removeMenu();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t$(document).on(\"keyup.zctx\", (e) => {\r\n\t\t\t\tif (e.keyCode === 27) {\r\n\t\t\t\t\tthis.removeMenu();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n    \r\n    /** Allows you to remove the menu. */\r\n\tremoveMenu() {\r\n\t\tlet type = this.element.parents(\".plugin-context-menu\").length > this.element.parents(DiscordSelectors.ContextMenuClasses.contextMenu).length ? \".plugin-context-menu\" : DiscordSelectors.ContextMenuClasses.contextMenu;\r\n\t\tthis.element.detach();\r\n\t\tthis.element.find(type).detach();\r\n\t\t$(document).off(\".zctx\");\r\n\t}\r\n    \r\n    /**\r\n     * Used to attach a menu to a menu item. This is how to create a submenu.\r\n     * If using {@link PluginContextMenu.SubMenuItem} then you do not need\r\n     * to call this function as it is done automatically. If you want to attach\r\n     * a submenu to an existing Discord context menu, then you should use this\r\n     * method.\r\n     * @param {(HTMLElement|jQuery)} menuItem - item to attach to\r\n     */\r\n\tattachTo(menuItem) {\r\n\t\tthis.menuItem = $(menuItem);\r\n\t\tmenuItem.on(\"mouseenter\", () => {\r\n\t\t\tthis.element.appendTo(menuItem);\r\n\t\t\tlet type = this.element.parents(\".plugin-context-menu\").length > this.element.parents(DiscordSelectors.ContextMenuClasses.contextMenu).length ? \".plugin-context-menu\" : DiscordSelectors.ContextMenuClasses.contextMenu;\r\n\t\t\tthis.show(this.element.parents(type).css(\"left\"), menuItem.offset().top);\r\n\t\t});\r\n\t\tmenuItem.on(\"mouseleave\", () => { this.element.detach(); });\r\n\t}\r\n}\r\n\r\n/** Class that represents a group of menu items. */\r\nexport class ItemGroup {\r\n    /** Creates an item group. */\r\n\tconstructor() {\r\n\t\tthis.element = $(\"<div>\").addClass(DiscordClasses.ContextMenuClasses.itemGroup);\r\n\t}\r\n    \r\n    /**\r\n     * This is the method of adding menu items to a menu group.\r\n     * @param {PluginContextMenu.MenuItem} contextItems - list of context menu items to add to this group\r\n     * @returns {PluginContextMenu.ItemGroup} returns self for chaining\r\n     */\r\n\taddItems(...contextItems) {\r\n\t\tfor (var i = 0; i < contextItems.length; i++) {\r\n\t\t\tthis.element.append(contextItems[i].getElement());\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n    \r\n    /** @returns {HTMLElement} returns the DOM node for the group */\r\n\tgetElement() { return this.element; }\r\n}\r\n\r\n/**\r\n * Fires when the attached menu item it clicked.\r\n * @param {MouseEvent} event - the mouse event from clicking the item\r\n * @callback PluginContextMenu~clickEvent\r\n */\r\n\r\n /**\r\n * Fires when the checkbox item changes state.\r\n * @param {boolean} isChecked - if the checkbox is now checked\r\n * @callback PluginContextMenu~onChange\r\n */\r\n\r\n/** Base class for all other menu items. */\r\nexport class MenuItem {\r\n    /**\r\n     * @param {string} label - label to show on the menu item\r\n     * @param {object} options - additional options for the item\r\n     * @param {boolean} [options.danger=false] - should the item show as danger\r\n     * @param {PluginContextMenu~clickEvent} [options.callback] - callback for when it is clicked\r\n     */\r\n\tconstructor(label, options = {}) {\r\n\t\tvar {danger = false, callback} = options;\r\n\t\tthis.element = $(\"<div>\").addClass(DiscordClasses.ContextMenuClasses.item);\r\n\t\tthis.label = label;\r\n\t\tif (danger) this.element.addClass(DiscordClasses.ContextMenuClasses.danger);\r\n\t\tif (typeof(callback) == 'function') {\r\n\t\t\tthis.element.on(\"click\", (event) => {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tcallback(event);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\tgetElement() { return this.element;}\r\n}\r\n\r\n/** \r\n * Creates a text menu item that can have a hint.\r\n * @extends MenuItem\r\n */\r\nexport class TextItem extends MenuItem {\r\n    /**\r\n     * @param {string} label - label to show on the menu item\r\n     * @param {object} options - additional options for the item\r\n     * @param {string} [options.hint=\"\"] - hint to show on the item (usually used for key combos)\r\n     * @param {boolean} [options.danger=false] - should the item show as danger\r\n     * @param {PluginContextMenu~clickEvent} [options.callback] - callback for when it is clicked\r\n     */\r\n\tconstructor(label, options = {}) {\r\n\t\tsuper(label, options);\r\n\t\tvar {hint = \"\"} = options;\r\n\t\tthis.element.append($(\"<span>\").text(label));\r\n\t\tthis.element.append($(\"<div>\").addClass(DiscordClasses.ContextMenuClasses.hint).text(hint));\r\n\t}\r\n}\r\n\r\n/** \r\n * Creates an image menu item that can have an image.\r\n * @extends MenuItem\r\n */\r\nexport class ImageItem extends MenuItem {\r\n    /**\r\n     * @param {string} label - label to show on the menu item\r\n     * @param {string} imageSrc - link to the image to embed\r\n     * @param {object} options - additional options for the item\r\n     * @param {string} [options.hint=\"\"] - hint to show on the item (usually used for key combos)\r\n     * @param {boolean} [options.danger=false] - should the item show as danger\r\n     * @param {PluginContextMenu~clickEvent} [options.callback] - callback for when it is clicked\r\n     */\r\n\tconstructor(label, imageSrc, options = {}) {\r\n\t\tsuper(label, options);\r\n\t\tthis.element.addClass(DiscordClasses.ContextMenuClasses.itemImage);\r\n\t\tthis.element.append($(\"<div>\").addClass(DiscordClasses.ContextMenuClasses.label).text(label));\r\n\t\tthis.element.append($(\"<img>\", {src: imageSrc}));\r\n\t}\r\n}\r\n\r\n/** \r\n * Creates a menu item with an attached submenu.\r\n * @extends .MenuItem\r\n */\r\nexport class SubMenuItem extends MenuItem {\r\n    /**\r\n     * @param {string} label - label to show on the menu item\r\n     * @param {PluginContextMenu.Menu} subMenu - context menu that should be attached to this item\r\n     * @param {object} options - additional options for the item\r\n     * @param {string} [options.hint=\"\"] - hint to show on the item (usually used for key combos)\r\n     * @param {boolean} [options.danger=false] - should the item show as danger\r\n     * @param {PluginContextMenu~clickEvent} [options.callback] - callback for when it is clicked\r\n     */\r\n\tconstructor(label, subMenu, options = {}) {\r\n\t\t// if (!(subMenu instanceof ContextSubMenu)) throw \"subMenu must be of ContextSubMenu type.\";\r\n\t\tsuper(label, options);\r\n\t\tthis.element.addClass(DiscordClasses.ContextMenuClasses.itemSubMenu).text(label);\r\n\t\tthis.subMenu = subMenu;\r\n\t\tthis.subMenu.attachTo(this.getElement());\r\n\t}\r\n}\r\n\r\n/** \r\n * Creates a menu item with a checkbox.\r\n * @extends MenuItem\r\n */\r\nexport class ToggleItem extends MenuItem {\r\n    /**\r\n     * @param {string} label - label to show on the menu item\r\n     * @param {boolean} checked - should the item start out checked\r\n     * @param {object} options - additional options for the item\r\n     * @param {string} [options.hint=\"\"] - hint to show on the item (usually used for key combos)\r\n     * @param {boolean} [options.danger=false] - should the item show as danger\r\n     * @param {PluginContextMenu~clickEvent} [options.callback] - callback for when it is clicked\r\n     * @param {PluginContextMenu~onChange} [options.onChange] - callback for when the checkbox changes\r\n     */\r\n\tconstructor(label, checked, options = {}) {\r\n        var {onChange} = options;\r\n\t\tsuper(label, options);\r\n\t\tthis.element.addClass(DiscordClasses.ContextMenuClasses.itemToggle);\r\n        this.element.append($(\"<div>\").addClass(DiscordClasses.ContextMenuClasses.label).text(label));\r\n        this.checkbox = $(\"<div>\", {class: \"checkbox\"});\r\n        this.checkbox.append($(\"<div>\", {class: \"checkbox-inner\"}));\r\n        this.checkbox.append(\"<span>\");\r\n        this.input = $(\"<input>\", {type: \"checkbox\", checked: checked, value: \"on\"});\r\n        this.checkbox.find('.checkbox-inner').append(this.input).append(\"<span>\");\r\n        this.element.append(this.checkbox);\r\n        this.element.on('click', (e) => {\r\n            e.stopPropagation();\r\n            this.input.prop(\"checked\", !this.input.prop(\"checked\"));\r\n            if (typeof(onChange) == 'function') onChange(this.input.prop(\"checked\"));\r\n        });\r\n\t}\r\n}",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/contextmenu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "class",
    "name": "Menu",
    "memberof": "src/modules/contextmenu.js",
    "static": true,
    "longname": "src/modules/contextmenu.js~Menu",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/contextmenu.js",
    "importStyle": "{Menu}",
    "description": "Main menu class for creating custom context menus.",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 57,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/contextmenu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/contextmenu.js~Menu#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "scroll",
        "description": "should this menu be a scrolling menu (usually only used for submenus)"
      }
    ]
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "theme",
    "memberof": "src/modules/contextmenu.js~Menu",
    "static": false,
    "longname": "src/modules/contextmenu.js~Menu#theme",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "element",
    "memberof": "src/modules/contextmenu.js~Menu",
    "static": false,
    "longname": "src/modules/contextmenu.js~Menu#element",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "scroll",
    "memberof": "src/modules/contextmenu.js~Menu",
    "static": false,
    "longname": "src/modules/contextmenu.js~Menu#scroll",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "scroller",
    "memberof": "src/modules/contextmenu.js~Menu",
    "static": false,
    "longname": "src/modules/contextmenu.js~Menu#scroller",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "addGroup",
    "memberof": "src/modules/contextmenu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/contextmenu.js~Menu#addGroup",
    "access": "public",
    "description": "Adds an item group to the menu. The group should already be populated.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PluginContextMenu.Menu} returns self for chaining"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "PluginContextMenu.ItemGroup"
        ],
        "spread": false,
        "optional": false,
        "name": "contextGroup",
        "description": "group to add to the menu"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginContextMenu.Menu"
      ],
      "spread": false,
      "description": "returns self for chaining"
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "addItems",
    "memberof": "src/modules/contextmenu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/contextmenu.js~Menu#addItems",
    "access": "public",
    "description": "Adds items to the context menu directly. It is recommended to add to a group and use \n{@link PluginContextMenu.Menu#addGroup} instead to behave as natively as possible.",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PluginContextMenu.Menu} returns self for chaining"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "PluginContextMenu.MenuItem"
        ],
        "spread": false,
        "optional": false,
        "name": "contextItems",
        "description": "list of items to add to the context menu"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginContextMenu.Menu"
      ],
      "spread": false,
      "description": "returns self for chaining"
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "show",
    "memberof": "src/modules/contextmenu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/contextmenu.js~Menu#show",
    "access": "public",
    "description": "Shows the menu at a specific x and y position. This generally comes from the\npointer position on a right click event.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "x coordinate for the menu to show at"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "y coordinate for the menu to show at"
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "removeMenu",
    "memberof": "src/modules/contextmenu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/contextmenu.js~Menu#removeMenu",
    "access": "public",
    "description": "Allows you to remove the menu.",
    "lineNumber": 116,
    "params": [],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "attachTo",
    "memberof": "src/modules/contextmenu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/contextmenu.js~Menu#attachTo",
    "access": "public",
    "description": "Used to attach a menu to a menu item. This is how to create a submenu.\nIf using {@link PluginContextMenu.SubMenuItem} then you do not need\nto call this function as it is done automatically. If you want to attach\na submenu to an existing Discord context menu, then you should use this\nmethod.",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement",
          "jQuery"
        ],
        "spread": false,
        "optional": false,
        "name": "menuItem",
        "description": "item to attach to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "menuItem",
    "memberof": "src/modules/contextmenu.js~Menu",
    "static": false,
    "longname": "src/modules/contextmenu.js~Menu#menuItem",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "class",
    "name": "ItemGroup",
    "memberof": "src/modules/contextmenu.js",
    "static": true,
    "longname": "src/modules/contextmenu.js~ItemGroup",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/contextmenu.js",
    "importStyle": "{ItemGroup}",
    "description": "Class that represents a group of menu items.",
    "lineNumber": 143,
    "interface": false
  },
  {
    "__docId__": 69,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/contextmenu.js~ItemGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/contextmenu.js~ItemGroup#constructor",
    "access": "public",
    "description": "Creates an item group.",
    "lineNumber": 145
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "element",
    "memberof": "src/modules/contextmenu.js~ItemGroup",
    "static": false,
    "longname": "src/modules/contextmenu.js~ItemGroup#element",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "addItems",
    "memberof": "src/modules/contextmenu.js~ItemGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/contextmenu.js~ItemGroup#addItems",
    "access": "public",
    "description": "This is the method of adding menu items to a menu group.",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PluginContextMenu.ItemGroup} returns self for chaining"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "PluginContextMenu.MenuItem"
        ],
        "spread": false,
        "optional": false,
        "name": "contextItems",
        "description": "list of context menu items to add to this group"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginContextMenu.ItemGroup"
      ],
      "spread": false,
      "description": "returns self for chaining"
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "getElement",
    "memberof": "src/modules/contextmenu.js~ItemGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/contextmenu.js~ItemGroup#getElement",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HTMLElement} returns the DOM node for the group"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": "returns the DOM node for the group"
    },
    "params": []
  },
  {
    "__docId__": 73,
    "kind": "class",
    "name": "MenuItem",
    "memberof": "src/modules/contextmenu.js",
    "static": true,
    "longname": "src/modules/contextmenu.js~MenuItem",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/contextmenu.js",
    "importStyle": "{MenuItem}",
    "description": "Base class for all other menu items.",
    "lineNumber": 178,
    "interface": false
  },
  {
    "__docId__": 74,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/contextmenu.js~MenuItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/contextmenu.js~MenuItem#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 185,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "label to show on the menu item"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "additional options for the item"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.danger",
        "description": "should the item show as danger"
      },
      {
        "nullable": null,
        "types": [
          "PluginContextMenu~clickEvent"
        ],
        "spread": false,
        "optional": true,
        "name": "options.callback",
        "description": "callback for when it is clicked"
      }
    ]
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "element",
    "memberof": "src/modules/contextmenu.js~MenuItem",
    "static": false,
    "longname": "src/modules/contextmenu.js~MenuItem#element",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "label",
    "memberof": "src/modules/contextmenu.js~MenuItem",
    "static": false,
    "longname": "src/modules/contextmenu.js~MenuItem#label",
    "access": "public",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "getElement",
    "memberof": "src/modules/contextmenu.js~MenuItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/contextmenu.js~MenuItem#getElement",
    "access": "public",
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "class",
    "name": "TextItem",
    "memberof": "src/modules/contextmenu.js",
    "static": true,
    "longname": "src/modules/contextmenu.js~TextItem",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/contextmenu.js",
    "importStyle": "{TextItem}",
    "description": "Creates a text menu item that can have a hint.",
    "lineNumber": 204,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 79,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/contextmenu.js~TextItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/contextmenu.js~TextItem#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 212,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "label to show on the menu item"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "additional options for the item"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\"",
        "defaultRaw": "",
        "name": "options.hint",
        "description": "hint to show on the item (usually used for key combos)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.danger",
        "description": "should the item show as danger"
      },
      {
        "nullable": null,
        "types": [
          "PluginContextMenu~clickEvent"
        ],
        "spread": false,
        "optional": true,
        "name": "options.callback",
        "description": "callback for when it is clicked"
      }
    ]
  },
  {
    "__docId__": 80,
    "kind": "class",
    "name": "ImageItem",
    "memberof": "src/modules/contextmenu.js",
    "static": true,
    "longname": "src/modules/contextmenu.js~ImageItem",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/contextmenu.js",
    "importStyle": "{ImageItem}",
    "description": "Creates an image menu item that can have an image.",
    "lineNumber": 224,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 81,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/contextmenu.js~ImageItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/contextmenu.js~ImageItem#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 233,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "label to show on the menu item"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "imageSrc",
        "description": "link to the image to embed"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "additional options for the item"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\"",
        "defaultRaw": "",
        "name": "options.hint",
        "description": "hint to show on the item (usually used for key combos)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.danger",
        "description": "should the item show as danger"
      },
      {
        "nullable": null,
        "types": [
          "PluginContextMenu~clickEvent"
        ],
        "spread": false,
        "optional": true,
        "name": "options.callback",
        "description": "callback for when it is clicked"
      }
    ]
  },
  {
    "__docId__": 82,
    "kind": "class",
    "name": "SubMenuItem",
    "memberof": "src/modules/contextmenu.js",
    "static": true,
    "longname": "src/modules/contextmenu.js~SubMenuItem",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/contextmenu.js",
    "importStyle": "{SubMenuItem}",
    "description": "Creates a menu item with an attached submenu.",
    "lineNumber": 245,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 83,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/contextmenu.js~SubMenuItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/contextmenu.js~SubMenuItem#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 254,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "label to show on the menu item"
      },
      {
        "nullable": null,
        "types": [
          "PluginContextMenu.Menu"
        ],
        "spread": false,
        "optional": false,
        "name": "subMenu",
        "description": "context menu that should be attached to this item"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "additional options for the item"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\"",
        "defaultRaw": "",
        "name": "options.hint",
        "description": "hint to show on the item (usually used for key combos)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.danger",
        "description": "should the item show as danger"
      },
      {
        "nullable": null,
        "types": [
          "PluginContextMenu~clickEvent"
        ],
        "spread": false,
        "optional": true,
        "name": "options.callback",
        "description": "callback for when it is clicked"
      }
    ]
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "subMenu",
    "memberof": "src/modules/contextmenu.js~SubMenuItem",
    "static": false,
    "longname": "src/modules/contextmenu.js~SubMenuItem#subMenu",
    "access": "public",
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "class",
    "name": "ToggleItem",
    "memberof": "src/modules/contextmenu.js",
    "static": true,
    "longname": "src/modules/contextmenu.js~ToggleItem",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/contextmenu.js",
    "importStyle": "{ToggleItem}",
    "description": "Creates a menu item with a checkbox.",
    "lineNumber": 267,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 86,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/contextmenu.js~ToggleItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/contextmenu.js~ToggleItem#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 277,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "label to show on the menu item"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "checked",
        "description": "should the item start out checked"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "additional options for the item"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\"",
        "defaultRaw": "",
        "name": "options.hint",
        "description": "hint to show on the item (usually used for key combos)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.danger",
        "description": "should the item show as danger"
      },
      {
        "nullable": null,
        "types": [
          "PluginContextMenu~clickEvent"
        ],
        "spread": false,
        "optional": true,
        "name": "options.callback",
        "description": "callback for when it is clicked"
      },
      {
        "nullable": null,
        "types": [
          "PluginContextMenu~onChange"
        ],
        "spread": false,
        "optional": true,
        "name": "options.onChange",
        "description": "callback for when the checkbox changes"
      }
    ]
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "checkbox",
    "memberof": "src/modules/contextmenu.js~ToggleItem",
    "static": false,
    "longname": "src/modules/contextmenu.js~ToggleItem#checkbox",
    "access": "public",
    "description": null,
    "lineNumber": 282,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "input",
    "memberof": "src/modules/contextmenu.js~ToggleItem",
    "static": false,
    "longname": "src/modules/contextmenu.js~ToggleItem#input",
    "access": "public",
    "description": null,
    "lineNumber": 285,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/modules/discordapi.js",
    "content": "/**\r\n * Helpful utilities for dealing with getting react information from DOM objects.\r\n * @module DiscordAPI\r\n * @version 0.0.4\r\n */\r\n\r\nimport { WebpackModules } from './webpackmodules';\r\n\r\nclass List extends Array {\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    get(...filters) {\r\n        return this.find(item => {\r\n            for (let filter of filters) {\r\n                for (let key in filter) {\r\n                    if (filter.hasOwnProperty(key)) {\r\n                        if (item[key] !== filter[key]) return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n}\r\n\r\nclass PermissionsError extends Error {\r\n    constructor(message) {\r\n        super(message);\r\n        this.name = 'PermissionsError';\r\n    }\r\n}\r\n\r\nclass InsufficientPermissions extends PermissionsError {\r\n    constructor(message) {\r\n        super(`Missing Permission — ${message}`);\r\n        this.name = 'InsufficientPermissions';\r\n    }\r\n}\r\n\r\nconst Modules = {\r\n    _getModule(name) {\r\n        const foundModule = WebpackModules.getModuleByName(name);\r\n        if (!foundModule) return null;\r\n        delete this[name];\r\n        return this[name] = foundModule;\r\n    },\r\n    get ChannelSelector() { return this._getModule('ChannelSelector'); },\r\n    get MessageActions() { return this._getModule('MessageActions'); },\r\n    get MessageParser() { return this._getModule('MessageParser'); },\r\n    get MessageStore() { return this._getModule('MessageStore'); },\r\n    get EmojiUtils() { return this._getModule('EmojiUtils'); },\r\n    get PermissionUtils() { return this._getModule('Permissions'); },\r\n    get SortedGuildStore() { return this._getModule('SortedGuildStore'); },\r\n    get PrivateChannelActions() { return this._getModule('PrivateChannelActions'); },\r\n    get GuildMemberStore() { return this._getModule('GuildMemberStore'); },\r\n    get GuildChannelsStore() { return this._getModule('GuildChannelsStore'); },\r\n    get MemberCountStore() { return this._getModule('MemberCountStore'); },\r\n    get GuildActions() { return this._getModule('GuildActions'); },\r\n    get NavigationUtils() { return this._getModule('NavigationUtils'); },\r\n    get GuildPermissions() { return this._getModule('GuildPermissions'); },\r\n    get DiscordConstants() { return this._getModule('DiscordConstants'); },\r\n    get ChannelStore() { return this._getModule('ChannelStore'); },\r\n    get GuildStore() { return this._getModule('GuildStore'); },\r\n    get SelectedGuildStore() { return this._getModule('SelectedGuildStore'); },\r\n    get SelectedChannelStore() { return this._getModule('SelectedChannelStore'); },\r\n    get UserStore() { return this._getModule('UserStore'); },\r\n    get RelationshipStore() { return this._getModule('RelationshipStore'); },\r\n    get RelationshipManager() { return this._getModule('RelationshipManager'); },\r\n\r\n    get DiscordPermissions() { return this.DiscordConstants.Permissions; }\r\n\r\n};\r\n\r\nclass User {\r\n    constructor(data) {\r\n        for (let key in data)\r\n            if (data.hasOwnProperty(key))\r\n                this[key] = data[key];\r\n        this.discordObject = data;\r\n    }\r\n\r\n    static fromId(id) {\r\n        return new User(Modules.UserStore.getUser(id));\r\n    }\r\n\r\n    async sendMessage(content, parse = true) {\r\n        const id = await Modules.PrivateChannelActions.ensurePrivateChannel(DiscordAPI.currentUser.id, this.id);\r\n        const channel = new PrivateChannel(Modules.ChannelStore.getChannel(id));\r\n        channel.sendMessage(content, parse);\r\n    }\r\n\r\n    get isFriend() {\r\n        return Modules.RelationshipStore.isFriend(this.id);\r\n    }\r\n\r\n    get isBlocked() {\r\n        return Modules.RelationshipStore.isBlocked(this.id);\r\n    }\r\n\r\n    addFriend() {\r\n        Modules.RelationshipManager.addRelationship(this.id, {location: 'Context Menu'});\r\n    }\r\n\r\n    removeFriend() {\r\n        Modules.RelationshipManager.removeRelationship(this.id, {location: 'Context Menu'});\r\n    }\r\n\r\n    block() {\r\n        Modules.RelationshipManager.addRelationship(this.id, {location: 'Context Menu'}, Modules.DiscordConstants.RelationshipTypes.BLOCKED);\r\n    }\r\n\r\n    unblock() {\r\n        Modules.RelationshipManager.removeRelationship(this.id, {location: 'Context Menu'});\r\n    }\r\n}\r\n\r\nclass Member extends User {\r\n    constructor(data, guild) {\r\n        super(data);\r\n        const userData = Modules.UserStore.getUser(data.userId);\r\n        for (let key in userData)\r\n            if (userData.hasOwnProperty(key))\r\n                this[key] = userData[key];\r\n        this.guild_id = guild;\r\n    }\r\n\r\n    checkPermissions(perms) {\r\n        return Modules.PermissionUtils.can(perms, DiscordAPI.currentUser, Modules.GuildStore.getGuild(this.guild_id));\r\n    }\r\n\r\n    kick(reason = '') {\r\n        if (!this.checkPermissions(Modules.DiscordPermissions.KICK_MEMBERS)) throw new InsufficientPermissions('KICK_MEMBERS');\r\n        Modules.GuildActions.kickUser(this.guild_id, this.id, reason);\r\n    }\r\n\r\n    ban(daysToDelete = '1', reason = '') {\r\n        if (!this.checkPermissions(Modules.DiscordPermissions.BAN_MEMBERS)) throw new InsufficientPermissions('BAN_MEMBERS');\r\n        Modules.GuildActions.banUser(this.guild_id, this.id, daysToDelete, reason);\r\n    }\r\n\r\n    unban() {\r\n        if (!this.checkPermissions(Modules.DiscordPermissions.BAN_MEMBERS)) throw new InsufficientPermissions('BAN_MEMBERS');\r\n        Modules.GuildActions.unbanUser(this.guild_id, this.id);\r\n    }\r\n\r\n    move(channel_id) {\r\n        if (!this.checkPermissions(Modules.DiscordPermissions.MOVE_MEMBERS)) throw new InsufficientPermissions('MOVE_MEMBERS');\r\n        Modules.GuildActions.setChannel(this.guild_id, this.id, channel_id);\r\n    }\r\n\r\n    mute(active = true) {\r\n        if (!this.checkPermissions(Modules.DiscordPermissions.MUTE_MEMBERS)) throw new InsufficientPermissions('MUTE_MEMBERS');\r\n        Modules.GuildActions.setServerMute(this.guild_id, this.id, active);\r\n    }\r\n\r\n    unmute() {\r\n        this.mute(false);\r\n    }\r\n\r\n    deafen(active = true) {\r\n        if (!this.checkPermissions(Modules.DiscordPermissions.DEAFEN_MEMBERS)) throw new InsufficientPermissions('DEAFEN_MEMBERS');\r\n        Modules.GuildActions.setServerDeaf(this.guild_id, this.id, active);\r\n    }\r\n\r\n    undeafen() {\r\n        this.deafen(false);\r\n    }\r\n}\r\n\r\nclass Guild {\r\n    constructor(data) {\r\n        for (let key in data)\r\n            if (data.hasOwnProperty(key))\r\n                this[key] = data[key];\r\n        this.discordObject = data;\r\n    }\r\n\r\n    get channels() {\r\n        const channels = Modules.GuildChannelsStore.getChannels(this.id);\r\n        const returnChannels = new List();\r\n        for (const category in channels) {\r\n            if (channels.hasOwnProperty(category)) {\r\n                if (!Array.isArray(channels[category])) continue;\r\n                const channelList = channels[category];\r\n                for (const channel of channelList) {\r\n                    returnChannels.push(new GuildChannel(channel.channel));\r\n                }\r\n            }\r\n        }\r\n        return returnChannels;\r\n    }\r\n\r\n    get defaultChannel() {\r\n        return new GuildChannel(Modules.GuildChannelsStore.getDefaultChannel(this.id));\r\n    }\r\n\r\n    get members() {\r\n        const members = Modules.GuildMemberStore.getMembers(this.id);\r\n        const returnMembers = new List();\r\n        for (const member of members) returnMembers.push(new Member(member, this.id));\r\n        return returnMembers;\r\n    }\r\n\r\n    get memberCount() {\r\n        return Modules.MemberCountStore.getMemberCount(this.id);\r\n    }\r\n\r\n    get emojis() {\r\n        return Modules.EmojiUtils.getGuildEmoji(this.id);\r\n    }\r\n\r\n    get permissions() {\r\n        return Modules.GuildPermissions.getGuildPermissions(this.id);\r\n    }\r\n\r\n    getMember(userId) {\r\n        return Modules.GuildMemberStore.getMember(this.id, userId);\r\n    }\r\n\r\n    isMember(userId) {\r\n        return Modules.GuildMemberStore.isMember(this.id, userId);\r\n    }\r\n\r\n    markAsRead() {\r\n        Modules.GuildActions.markGuildAsRead(this.id);\r\n    }\r\n\r\n    select() {\r\n        Modules.GuildActions.selectGuild(this.id);\r\n    }\r\n\r\n    nsfwAgree() {\r\n        Modules.GuildActions.nsfwAgree(this.id);\r\n    }\r\n\r\n    nsfwDisagree() {\r\n        Modules.GuildActions.nsfwDisagree(this.id);\r\n    }\r\n\r\n    changeSortLocation(index) {\r\n        Modules.GuildActions.move(DiscordAPI.guildPositions.indexOf(this.id), index);\r\n    }\r\n}\r\n\r\nclass Channel {\r\n    constructor(data) {\r\n        for (let key in data)\r\n            if (data.hasOwnProperty(key))\r\n                this[key] = data[key];\r\n        this.discordObject = data;\r\n    }\r\n\r\n    checkPermissions(perms) {\r\n        return Modules.PermissionUtils.can(perms, DiscordAPI.currentUser, this.discordObject) || this.isPrivate();\r\n    }\r\n\r\n    async sendMessage(content, parse = true) {\r\n        if (!this.checkPermissions(Modules.DiscordPermissions.VIEW_CHANNEL | Modules.DiscordPermissions.SEND_MESSAGES)) throw new InsufficientPermissions('SEND_MESSAGES');\r\n        let response = {};\r\n        if (parse) response = await Modules.MessageActions._sendMessage(this.id, Modules.MessageParser.parse(this.discordObject, content));\r\n        else response = await Modules.MessageActions._sendMessage(this.id, {content});\r\n        return new Message(Modules.MessageStore.getMessage(this.id, response.body.id));\r\n    }\r\n\r\n    get messages() {\r\n        const messages = Modules.MessageStore.getMessages(this.id).toArray();\r\n        for (let i in messages)\r\n            if (messages.hasOwnProperty(i))\r\n                messages[i] = new Message(messages[i]);\r\n        return new List(...messages);\r\n    }\r\n\r\n    jumpToPresent() {\r\n        if (!this.checkPermissions(Modules.DiscordPermissions.VIEW_CHANNEL)) throw new InsufficientPermissions('VIEW_CHANNEL');\r\n        if (this.hasMoreAfter) Modules.MessageActions.jumpToPresent(this.id, Modules.DiscordConstants.MAX_MESSAGES_PER_CHANNEL);\r\n        else this.messages[this.messages.length - 1].jumpTo(false);\r\n    }\r\n\r\n    get hasMoreAfter() {\r\n        return Modules.MessageStore.getMessages(this.id).hasMoreAfter;\r\n    }\r\n\r\n    sendInvite(inviteId) {\r\n        if (!this.checkPermissions(Modules.DiscordPermissions.VIEW_CHANNEL | Modules.DiscordPermissions.SEND_MESSAGES)) throw new InsufficientPermissions('SEND_MESSAGES');\r\n        Modules.MessageActions.sendInvite(this.id, inviteId);\r\n    }\r\n\r\n    select() {\r\n        if (!this.checkPermissions(Modules.DiscordPermissions.VIEW_CHANNEL)) throw new InsufficientPermissions('VIEW_CHANNEL');\r\n        Modules.NavigationUtils.transitionToGuild(this.guild_id ? this.guild_id : Modules.DiscordConstants.ME, this.id);\r\n    }\r\n}\r\n\r\nclass GuildChannel extends Channel {\r\n\r\n    constructor(data) {\r\n        super(data);\r\n    }\r\n\r\n    get permissions() {\r\n        return Modules.GuildPermissions.getChannelPermissions(this.id);\r\n    }\r\n\r\n    get guild() {\r\n        return new Guild(Modules.GuildStore.getGuild(this.guild_id));\r\n    }\r\n\r\n    isDefaultChannel() {\r\n        return Modules.GuildChannelsStore.getDefaultChannel(this.guild_id).id === this.id;\r\n    }\r\n\r\n}\r\n\r\nclass PrivateChannel extends Channel {\r\n    constructor(data) {\r\n        super(data);\r\n    }\r\n}\r\n\r\nclass Message {\r\n    constructor(data) {\r\n        for (let key in data)\r\n            if (data.hasOwnProperty(key))\r\n                this[key] = data[key];\r\n        this.discordObject = data;\r\n    }\r\n\r\n    delete() {\r\n        Modules.MessageActions.deleteMessage(this.channel_id, this.id);\r\n    }\r\n\r\n    // programmatically update the content\r\n    edit(content, parse = false) {\r\n        if (this.author.id !== DiscordAPI.currentUser.id) return;\r\n        if (parse) Modules.MessageActions.editMessage(this.channel_id, this.id, Modules.MessageParser.parse(this.discordObject, content));\r\n        else Modules.MessageActions.editMessage(this.channel_id, this.id, {content});\r\n    }\r\n\r\n    // start the editing mode of GUI\r\n    startEdit() {\r\n        if (this.author.id !== DiscordAPI.currentUser.id) return;\r\n        Modules.MessageActions.startEditMessage(this.channel_id, this.id, this.content);\r\n    }\r\n\r\n    // end editing mode of GUI\r\n    endEdit() {\r\n        Modules.MessageActions.endEditMessage();\r\n    }\r\n\r\n    jumpTo(flash = true) {\r\n        Modules.MessageActions.jumpToMessage(this.channel_id, this.id, flash);\r\n    }\r\n}\r\n\r\nexport default class DiscordAPI {\r\n\r\n    static get channels() {\r\n        const channels = Modules.ChannelStore.getChannels();\r\n        const returnChannels = new List();\r\n        for (const value of Object.values(channels)) {\r\n            returnChannels.push(value.isPrivate() ? new PrivateChannel(value) : new GuildChannel(value));\r\n        }\r\n        return returnChannels;\r\n    }\r\n\r\n    static get guilds() {\r\n        const guilds = Modules.GuildStore.getGuilds();\r\n        const returnGuilds = new List();\r\n        for (const value of Object.values(guilds)) {\r\n            returnGuilds.push(new Guild(value));\r\n        }\r\n        return returnGuilds;\r\n    }\r\n\r\n    static get users() {\r\n        const users = Modules.UserStore.getUsers();\r\n        const returnUsers = new List();\r\n        for (const value of Object.values(users)) {\r\n            returnUsers.push(new User(value));\r\n        }\r\n        return returnUsers;\r\n    }\r\n\r\n    static get memberCounts() {\r\n        return Modules.MemberCountStore.getMemberCounts();\r\n    }\r\n\r\n    static get sortedGuilds() {\r\n        const guilds = Modules.SortedGuildStore.getSortedGuilds();\r\n        const returnGuilds = new List();\r\n        for (const guild of guilds) {\r\n            returnGuilds.push(new Guild(guild));\r\n        }\r\n        return returnGuilds;\r\n    }\r\n\r\n    static get guildPositions() {\r\n        return Modules.SortedGuildStore.guildPositions;\r\n    }\r\n\r\n    static get currentGuild() {\r\n        return new Guild(Modules.GuildStore.getGuild(Modules.SelectedGuildStore.getGuildId()));\r\n    }\r\n\r\n    static get currentChannel() {\r\n        const channel = Modules.ChannelStore.getChannel(Modules.SelectedChannelStore.getChannelId());\r\n        if (channel) return channel.isPrivate() ? new PrivateChannel(channel) : new GuildChannel(channel);\r\n    }\r\n\r\n    static get currentUser() {\r\n        return Modules.UserStore.getCurrentUser();\r\n    }\r\n\r\n    static get friends() {\r\n        const friends = Modules.RelationshipStore.getFriendIDs();\r\n        const returnUsers = new List();\r\n        for (const id of friends) returnUsers.push(User.fromId(id));\r\n        return returnUsers;\r\n    }\r\n\r\n}\r\n",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/discordapi.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "class",
    "name": "List",
    "memberof": "src/modules/discordapi.js",
    "static": true,
    "longname": "src/modules/discordapi.js~List",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/discordapi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "Array"
    ],
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/discordapi.js~List",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~List#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "get",
    "memberof": "src/modules/discordapi.js~List",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~List#get",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "filters",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "class",
    "name": "PermissionsError",
    "memberof": "src/modules/discordapi.js",
    "static": true,
    "longname": "src/modules/discordapi.js~PermissionsError",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/discordapi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "interface": false,
    "extends": [
      "Error"
    ],
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/discordapi.js~PermissionsError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~PermissionsError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "name",
    "memberof": "src/modules/discordapi.js~PermissionsError",
    "static": false,
    "longname": "src/modules/discordapi.js~PermissionsError#name",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "class",
    "name": "InsufficientPermissions",
    "memberof": "src/modules/discordapi.js",
    "static": true,
    "longname": "src/modules/discordapi.js~InsufficientPermissions",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/discordapi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "interface": false,
    "extends": [
      "PermissionsError"
    ],
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/discordapi.js~InsufficientPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~InsufficientPermissions#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "name",
    "memberof": "src/modules/discordapi.js~InsufficientPermissions",
    "static": false,
    "longname": "src/modules/discordapi.js~InsufficientPermissions#name",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "Modules",
    "memberof": "src/modules/discordapi.js",
    "static": true,
    "longname": "src/modules/discordapi.js~Modules",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/discordapi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "{\"_getModule\": function, \"ChannelSelector\": function, \"MessageActions\": function, \"MessageParser\": function, \"MessageStore\": function, \"EmojiUtils\": function, \"PermissionUtils\": function, \"SortedGuildStore\": function, \"PrivateChannelActions\": function, \"GuildMemberStore\": function, \"GuildChannelsStore\": function, \"MemberCountStore\": function, \"GuildActions\": function, \"NavigationUtils\": function, \"GuildPermissions\": function, \"DiscordConstants\": function, \"ChannelStore\": function, \"GuildStore\": function, \"SelectedGuildStore\": function, \"SelectedChannelStore\": function, \"UserStore\": function, \"RelationshipStore\": function, \"RelationshipManager\": function, \"DiscordPermissions\": function}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "class",
    "name": "User",
    "memberof": "src/modules/discordapi.js",
    "static": true,
    "longname": "src/modules/discordapi.js~User",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/discordapi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/discordapi.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~User#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/modules/discordapi.js~User",
    "static": false,
    "longname": "src/modules/discordapi.js~User#[key]",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "discordObject",
    "memberof": "src/modules/discordapi.js~User",
    "static": false,
    "longname": "src/modules/discordapi.js~User#discordObject",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "fromId",
    "memberof": "src/modules/discordapi.js~User",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/discordapi.js~User.fromId",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "sendMessage",
    "memberof": "src/modules/discordapi.js~User",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/modules/discordapi.js~User#sendMessage",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "content",
        "types": [
          "*"
        ]
      },
      {
        "name": "parse",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "get",
    "name": "isFriend",
    "memberof": "src/modules/discordapi.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~User#isFriend",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "get",
    "name": "isBlocked",
    "memberof": "src/modules/discordapi.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~User#isBlocked",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "addFriend",
    "memberof": "src/modules/discordapi.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~User#addFriend",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "removeFriend",
    "memberof": "src/modules/discordapi.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~User#removeFriend",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "block",
    "memberof": "src/modules/discordapi.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~User#block",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "unblock",
    "memberof": "src/modules/discordapi.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~User#unblock",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "class",
    "name": "Member",
    "memberof": "src/modules/discordapi.js",
    "static": true,
    "longname": "src/modules/discordapi.js~Member",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/discordapi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "interface": false,
    "extends": [
      "User"
    ],
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/discordapi.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Member#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/modules/discordapi.js~Member",
    "static": false,
    "longname": "src/modules/discordapi.js~Member#[key]",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "guild_id",
    "memberof": "src/modules/discordapi.js~Member",
    "static": false,
    "longname": "src/modules/discordapi.js~Member#guild_id",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "checkPermissions",
    "memberof": "src/modules/discordapi.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Member#checkPermissions",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "perms",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "kick",
    "memberof": "src/modules/discordapi.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Member#kick",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [
      {
        "name": "reason",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "ban",
    "memberof": "src/modules/discordapi.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Member#ban",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "daysToDelete",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "1",
        "defaultValue": "1"
      },
      {
        "name": "reason",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "unban",
    "memberof": "src/modules/discordapi.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Member#unban",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "move",
    "memberof": "src/modules/discordapi.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Member#move",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [
      {
        "name": "channel_id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "mute",
    "memberof": "src/modules/discordapi.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Member#mute",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [
      {
        "name": "active",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "unmute",
    "memberof": "src/modules/discordapi.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Member#unmute",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "deafen",
    "memberof": "src/modules/discordapi.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Member#deafen",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "active",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "undeafen",
    "memberof": "src/modules/discordapi.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Member#undeafen",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "class",
    "name": "Guild",
    "memberof": "src/modules/discordapi.js",
    "static": true,
    "longname": "src/modules/discordapi.js~Guild",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/discordapi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/discordapi.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Guild#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 174,
    "undocument": true
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/modules/discordapi.js~Guild",
    "static": false,
    "longname": "src/modules/discordapi.js~Guild#[key]",
    "access": "public",
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "discordObject",
    "memberof": "src/modules/discordapi.js~Guild",
    "static": false,
    "longname": "src/modules/discordapi.js~Guild#discordObject",
    "access": "public",
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "get",
    "name": "channels",
    "memberof": "src/modules/discordapi.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Guild#channels",
    "access": "public",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "get",
    "name": "defaultChannel",
    "memberof": "src/modules/discordapi.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Guild#defaultChannel",
    "access": "public",
    "description": null,
    "lineNumber": 196,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "get",
    "name": "members",
    "memberof": "src/modules/discordapi.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Guild#members",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "get",
    "name": "memberCount",
    "memberof": "src/modules/discordapi.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Guild#memberCount",
    "access": "public",
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "get",
    "name": "emojis",
    "memberof": "src/modules/discordapi.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Guild#emojis",
    "access": "public",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "get",
    "name": "permissions",
    "memberof": "src/modules/discordapi.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Guild#permissions",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "getMember",
    "memberof": "src/modules/discordapi.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Guild#getMember",
    "access": "public",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "params": [
      {
        "name": "userId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "isMember",
    "memberof": "src/modules/discordapi.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Guild#isMember",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "params": [
      {
        "name": "userId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "markAsRead",
    "memberof": "src/modules/discordapi.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Guild#markAsRead",
    "access": "public",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "select",
    "memberof": "src/modules/discordapi.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Guild#select",
    "access": "public",
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "nsfwAgree",
    "memberof": "src/modules/discordapi.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Guild#nsfwAgree",
    "access": "public",
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "nsfwDisagree",
    "memberof": "src/modules/discordapi.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Guild#nsfwDisagree",
    "access": "public",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "changeSortLocation",
    "memberof": "src/modules/discordapi.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Guild#changeSortLocation",
    "access": "public",
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "class",
    "name": "Channel",
    "memberof": "src/modules/discordapi.js",
    "static": true,
    "longname": "src/modules/discordapi.js~Channel",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/discordapi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/discordapi.js~Channel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Channel#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 249,
    "undocument": true
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/modules/discordapi.js~Channel",
    "static": false,
    "longname": "src/modules/discordapi.js~Channel#[key]",
    "access": "public",
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "discordObject",
    "memberof": "src/modules/discordapi.js~Channel",
    "static": false,
    "longname": "src/modules/discordapi.js~Channel#discordObject",
    "access": "public",
    "description": null,
    "lineNumber": 253,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "checkPermissions",
    "memberof": "src/modules/discordapi.js~Channel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Channel#checkPermissions",
    "access": "public",
    "description": null,
    "lineNumber": 256,
    "undocument": true,
    "params": [
      {
        "name": "perms",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "sendMessage",
    "memberof": "src/modules/discordapi.js~Channel",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/modules/discordapi.js~Channel#sendMessage",
    "access": "public",
    "description": null,
    "lineNumber": 260,
    "undocument": true,
    "params": [
      {
        "name": "content",
        "types": [
          "*"
        ]
      },
      {
        "name": "parse",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "get",
    "name": "messages",
    "memberof": "src/modules/discordapi.js~Channel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Channel#messages",
    "access": "public",
    "description": null,
    "lineNumber": 268,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "jumpToPresent",
    "memberof": "src/modules/discordapi.js~Channel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Channel#jumpToPresent",
    "access": "public",
    "description": null,
    "lineNumber": 276,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 150,
    "kind": "get",
    "name": "hasMoreAfter",
    "memberof": "src/modules/discordapi.js~Channel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Channel#hasMoreAfter",
    "access": "public",
    "description": null,
    "lineNumber": 282,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "sendInvite",
    "memberof": "src/modules/discordapi.js~Channel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Channel#sendInvite",
    "access": "public",
    "description": null,
    "lineNumber": 286,
    "undocument": true,
    "params": [
      {
        "name": "inviteId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "select",
    "memberof": "src/modules/discordapi.js~Channel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Channel#select",
    "access": "public",
    "description": null,
    "lineNumber": 291,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "class",
    "name": "GuildChannel",
    "memberof": "src/modules/discordapi.js",
    "static": true,
    "longname": "src/modules/discordapi.js~GuildChannel",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/discordapi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 297,
    "undocument": true,
    "interface": false,
    "extends": [
      "Channel"
    ],
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/discordapi.js~GuildChannel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~GuildChannel#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 299,
    "undocument": true
  },
  {
    "__docId__": 155,
    "kind": "get",
    "name": "permissions",
    "memberof": "src/modules/discordapi.js~GuildChannel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~GuildChannel#permissions",
    "access": "public",
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "get",
    "name": "guild",
    "memberof": "src/modules/discordapi.js~GuildChannel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~GuildChannel#guild",
    "access": "public",
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "isDefaultChannel",
    "memberof": "src/modules/discordapi.js~GuildChannel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~GuildChannel#isDefaultChannel",
    "access": "public",
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "class",
    "name": "PrivateChannel",
    "memberof": "src/modules/discordapi.js",
    "static": true,
    "longname": "src/modules/discordapi.js~PrivateChannel",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/discordapi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 317,
    "undocument": true,
    "interface": false,
    "extends": [
      "Channel"
    ],
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/discordapi.js~PrivateChannel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~PrivateChannel#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 318,
    "undocument": true
  },
  {
    "__docId__": 160,
    "kind": "class",
    "name": "Message",
    "memberof": "src/modules/discordapi.js",
    "static": true,
    "longname": "src/modules/discordapi.js~Message",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/discordapi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 323,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 161,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/discordapi.js~Message",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Message#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 324,
    "undocument": true
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/modules/discordapi.js~Message",
    "static": false,
    "longname": "src/modules/discordapi.js~Message#[key]",
    "access": "public",
    "description": null,
    "lineNumber": 327,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "discordObject",
    "memberof": "src/modules/discordapi.js~Message",
    "static": false,
    "longname": "src/modules/discordapi.js~Message#discordObject",
    "access": "public",
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "delete",
    "memberof": "src/modules/discordapi.js~Message",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Message#delete",
    "access": "public",
    "description": null,
    "lineNumber": 331,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "edit",
    "memberof": "src/modules/discordapi.js~Message",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Message#edit",
    "access": "public",
    "description": null,
    "lineNumber": 336,
    "undocument": true,
    "params": [
      {
        "name": "content",
        "types": [
          "*"
        ]
      },
      {
        "name": "parse",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "startEdit",
    "memberof": "src/modules/discordapi.js~Message",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Message#startEdit",
    "access": "public",
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "endEdit",
    "memberof": "src/modules/discordapi.js~Message",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Message#endEdit",
    "access": "public",
    "description": null,
    "lineNumber": 349,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "jumpTo",
    "memberof": "src/modules/discordapi.js~Message",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/discordapi.js~Message#jumpTo",
    "access": "public",
    "description": null,
    "lineNumber": 353,
    "undocument": true,
    "params": [
      {
        "name": "flash",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "class",
    "name": "DiscordAPI",
    "memberof": "src/modules/discordapi.js",
    "static": true,
    "longname": "src/modules/discordapi.js~DiscordAPI",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/discordapi.js",
    "importStyle": "DiscordAPI",
    "description": null,
    "lineNumber": 358,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 170,
    "kind": "get",
    "name": "channels",
    "memberof": "src/modules/discordapi.js~DiscordAPI",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/discordapi.js~DiscordAPI.channels",
    "access": "public",
    "description": null,
    "lineNumber": 360,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "get",
    "name": "guilds",
    "memberof": "src/modules/discordapi.js~DiscordAPI",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/discordapi.js~DiscordAPI.guilds",
    "access": "public",
    "description": null,
    "lineNumber": 369,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "get",
    "name": "users",
    "memberof": "src/modules/discordapi.js~DiscordAPI",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/discordapi.js~DiscordAPI.users",
    "access": "public",
    "description": null,
    "lineNumber": 378,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "get",
    "name": "memberCounts",
    "memberof": "src/modules/discordapi.js~DiscordAPI",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/discordapi.js~DiscordAPI.memberCounts",
    "access": "public",
    "description": null,
    "lineNumber": 387,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "get",
    "name": "sortedGuilds",
    "memberof": "src/modules/discordapi.js~DiscordAPI",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/discordapi.js~DiscordAPI.sortedGuilds",
    "access": "public",
    "description": null,
    "lineNumber": 391,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "get",
    "name": "guildPositions",
    "memberof": "src/modules/discordapi.js~DiscordAPI",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/discordapi.js~DiscordAPI.guildPositions",
    "access": "public",
    "description": null,
    "lineNumber": 400,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "get",
    "name": "currentGuild",
    "memberof": "src/modules/discordapi.js~DiscordAPI",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/discordapi.js~DiscordAPI.currentGuild",
    "access": "public",
    "description": null,
    "lineNumber": 404,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "get",
    "name": "currentChannel",
    "memberof": "src/modules/discordapi.js~DiscordAPI",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/discordapi.js~DiscordAPI.currentChannel",
    "access": "public",
    "description": null,
    "lineNumber": 408,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "get",
    "name": "currentUser",
    "memberof": "src/modules/discordapi.js~DiscordAPI",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/discordapi.js~DiscordAPI.currentUser",
    "access": "public",
    "description": null,
    "lineNumber": 413,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "get",
    "name": "friends",
    "memberof": "src/modules/discordapi.js~DiscordAPI",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/discordapi.js~DiscordAPI.friends",
    "access": "public",
    "description": null,
    "lineNumber": 417,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/modules/DiscordClassModules.js",
    "content": "import Utilities from \"./utilities\";\r\nimport {ClassName, Selector} from \"./domhelpers\";\r\nimport {WebpackModules} from \"./webpackmodules\";\r\n\r\n/**\r\n * A large list of known and labelled classes in discord.\r\n * Click the filename below to see the whole list.\r\n * @module DiscordClassModules\r\n * @version 0.0.1\r\n */\r\nexport default Utilities.memoizeObject({\r\n\tget ContextMenu() {return WebpackModules.getByProps('itemToggle');},\r\n\tget Scrollers() {return WebpackModules.getByProps('scrollerWrap');},\r\n\tget AccountDetails() {return Object.assign({}, WebpackModules.getByProps('nameTag'), WebpackModules.getByProps('accountDetails'));},\r\n\tget Typing() {return WebpackModules.getByProps('typing', 'text');},\r\n\tget UserPopout() {return WebpackModules.getByProps('userPopout');},\r\n\tget PopoutRoles() {return WebpackModules.getByProps('roleCircle');},\r\n\tget UserModal() {return WebpackModules.getByProps('profileBadge');},\r\n\tget Textarea() {return WebpackModules.getByProps('channelTextArea');},\r\n\tget Popouts() {return WebpackModules.getByProps('popouts');},\r\n\tget Titles() {return WebpackModules.getByProps('defaultMarginh5');},\r\n\tget Notices() {return WebpackModules.getByProps('noticeInfo');},\r\n\tget Backdrop() {return WebpackModules.getByProps('backdrop');},\r\n\tget Modals() {return WebpackModules.getModule(m => m.modal && m.inner && !m.header);},\r\n\tget AuditLog() {return WebpackModules.getByProps('userHook');}\r\n});\r\n\r\n/**\r\n * Proxy for all the class packages, allows us to safely attempt\r\n * to retrieve nested things without error. Also wraps the class in\r\n * {@link module:DOMHelpers.ClassName} which adds features but can still\r\n * be used in native function.\r\n * \r\n * @version 0.0.1\r\n */\r\nexport const DiscordClasses = new Proxy(DiscordClassModules, {\r\n\tget: function(list, item) {\r\n\t\tif (list[item] === undefined) return new Proxy({}, {get: function() {return \"\";}});\r\n\t\treturn new Proxy(list[item], {\r\n\t\t\tget: function(obj, prop) {\r\n\t\t\t\tif (!obj.hasOwnProperty(prop)) return \"\";\r\n\t\t\t\treturn new ClassName(obj[prop]);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n});\r\n\r\n/**\r\n * Gives us a way to retrieve the internal classes as selectors without\r\n * needing to concatenate strings or use string templates. Wraps the\r\n * selector in {@link module:DOMHelpers.Selector} which adds features but can \r\n * still be used in native function.\r\n * \r\n * @version 0.0.1\r\n */\r\nexport const DiscordSelectors = new Proxy(DiscordClassModules, {\r\n\tget: function(list, item) {\r\n\t\tif (list[item] === undefined) return new Proxy({}, {get: function() {return \"\";}});\r\n\t\treturn new Proxy(list[item], {\r\n\t\t\tget: function(obj, prop) {\r\n\t\t\t\tif (!obj.hasOwnProperty(prop)) return \"\";\r\n\t\t\t\treturn new Selector(obj[prop]);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n});",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/DiscordClassModules.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "variable",
    "name": "DiscordClasses",
    "memberof": "src/modules/DiscordClassModules.js",
    "static": true,
    "longname": "src/modules/DiscordClassModules.js~DiscordClasses",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/DiscordClassModules.js",
    "importStyle": "{DiscordClasses}",
    "description": "Proxy for all the class packages, allows us to safely attempt\nto retrieve nested things without error. Also wraps the class in\n{@link module:DOMHelpers.ClassName} which adds features but can still\nbe used in native function.",
    "lineNumber": 36,
    "version": "0.0.1",
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "variable",
    "name": "DiscordSelectors",
    "memberof": "src/modules/DiscordClassModules.js",
    "static": true,
    "longname": "src/modules/DiscordClassModules.js~DiscordSelectors",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/DiscordClassModules.js",
    "importStyle": "{DiscordSelectors}",
    "description": "Gives us a way to retrieve the internal classes as selectors without\nneeding to concatenate strings or use string templates. Wraps the\nselector in {@link module:DOMHelpers.Selector} which adds features but can \nstill be used in native function.",
    "lineNumber": 56,
    "version": "0.0.1",
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "src/modules/DiscordModules.js",
    "content": "/**\r\n * A large list of known and useful webpack modules internal to Discord.\r\n * Click the filename below to see the whole list.\r\n * @module DiscordModules\r\n * @version 0.0.1\r\n */\r\nimport Utilities from \"./utilities\";\r\nimport {WebpackModules} from \"./webpackmodules\";\r\n\r\nexport default Utilities.memoizeObject({\r\n    get React() {return WebpackModules.getByProps(\"createElement\", \"cloneElement\");},\r\n    get ReactDOM() {return WebpackModules.getByProps(\"render\", \"findDOMNode\");},\r\n    get Events() {return WebpackModules.getByPrototypes(\"setMaxListeners\", \"emit\");},\r\n\r\n    /* Guild Info, Stores, and Utilities */\r\n    get GuildStore() {return WebpackModules.getByProps(\"getGuild\");},\r\n    get SortedGuildStore() {return WebpackModules.getByProps(\"getSortedGuilds\");},\r\n    get SelectedGuildStore() {return WebpackModules.getByProps(\"getLastSelectedGuildId\");},\r\n    get GuildSync() {return WebpackModules.getByProps(\"getSyncedGuilds\");},\r\n    get GuildInfo() {return WebpackModules.getByProps(\"getAcronym\");},\r\n    get GuildChannelsStore() {return WebpackModules.getByProps(\"getChannels\", \"getDefaultChannel\");},\r\n    get GuildMemberStore() {return WebpackModules.getByProps(\"getMember\");},\r\n    get MemberCountStore() {return WebpackModules.getByProps(\"getMemberCounts\");},\r\n    get GuildEmojiStore() {return WebpackModules.getByProps(\"getEmojis\");},\r\n    get GuildActions() {return WebpackModules.getByProps(\"markGuildAsRead\");},\r\n    get GuildPermissions() {return WebpackModules.getByProps(\"getGuildPermissions\");},\r\n\r\n    /* Channel Store & Actions */\r\n    get ChannelStore() {return WebpackModules.getByProps(\"getChannels\", \"getDMFromUserId\");},\r\n    get SelectedChannelStore() {return WebpackModules.getByProps(\"getLastSelectedChannelId\");},\r\n    get ChannelActions() {return WebpackModules.getByProps(\"selectChannel\");},\r\n    get PrivateChannelActions() {return WebpackModules.getByProps(\"openPrivateChannel\");},\r\n    get ChannelSelector() {return WebpackModules.getByProps(\"selectGuild\", \"selectChannel\");},\r\n\r\n    /* Current User Info, State and Settings */\r\n    get UserInfoStore() {return WebpackModules.getByProps(\"getToken\");},\r\n    get UserSettingsStore() {return WebpackModules.getByProps(\"guildPositions\");},\r\n    get AccountManager() {return WebpackModules.getByProps(\"register\", \"login\");},\r\n    get UserSettingsUpdater() {return WebpackModules.getByProps(\"updateRemoteSettings\");},\r\n    get OnlineWatcher() {return WebpackModules.getByProps(\"isOnline\");},\r\n    get CurrentUserIdle() {return WebpackModules.getByProps(\"getIdleTime\");},\r\n    get RelationshipStore() {return WebpackModules.getByProps(\"isBlocked\");},\r\n    get RelationshipManager() {return WebpackModules.getByProps(\"addRelationship\");},\r\n    get MentionStore() {return WebpackModules.getByProps(\"getMentions\");},\r\n\r\n    /* User Stores and Utils */\r\n    get UserStore() {return WebpackModules.getByProps(\"getCurrentUser\");},\r\n    get UserStatusStore() {return WebpackModules.getByProps(\"getStatuses\");},\r\n    get UserTypingStore() {return WebpackModules.getByProps(\"isTyping\");},\r\n    get UserActivityStore() {return WebpackModules.getByProps(\"getActivity\");},\r\n    get UserNameResolver() {return WebpackModules.getByProps(\"getName\");},\r\n\r\n    /* Emoji Store and Utils */\r\n    get EmojiInfo() {return WebpackModules.getByProps(\"isEmojiDisabled\");},\r\n    get EmojiUtils() {return WebpackModules.getByProps(\"getGuildEmoji\");},\r\n    get EmojiStore() {return WebpackModules.getByProps(\"getByCategory\", \"EMOJI_NAME_RE\");},\r\n\r\n    /* Invite Store and Utils */\r\n    get InviteStore() {return WebpackModules.getByProps(\"getInvites\");},\r\n    get InviteResolver() {return WebpackModules.getByProps(\"findInvite\");},\r\n    get InviteActions() {return WebpackModules.getByProps(\"acceptInvite\");},\r\n\r\n    /* Discord Objects & Utils */\r\n    get DiscordConstants() {return WebpackModules.getByProps(\"Permissions\", \"ActivityTypes\", \"StatusTypes\");},\r\n    get Permissions() {return WebpackModules.getByProps(\"getHighestRole\");},\r\n    get ColorConverter() {return WebpackModules.getByProps(\"hex2int\");},\r\n    get ColorShader() {return WebpackModules.getByProps(\"darken\");},\r\n    get ClassResolver() {return WebpackModules.getByProps(\"getClass\");},\r\n    get ButtonData() {return WebpackModules.getByProps(\"ButtonSizes\");},\r\n    get IconNames() {return WebpackModules.getByProps(\"IconNames\");},\r\n    get NavigationUtils() {return WebpackModules.getByProps(\"transitionTo\", \"replaceWith\", \"getHistory\");},\r\n\r\n    /* Discord Messages */\r\n    get MessageStore() {return WebpackModules.getByProps(\"getMessages\");},\r\n    get MessageActions() {return WebpackModules.getByProps(\"jumpToMessage\", \"_sendMessage\");},\r\n    get MessageQueue() {return WebpackModules.getByProps(\"enqueue\");},\r\n    get MessageParser() {return WebpackModules.getByProps(\"createMessage\", \"parse\", \"unparse\");},\r\n\r\n    /* In-Game Overlay */\r\n    get OverlayUserPopoutSettings() {return WebpackModules.getByProps(\"openUserPopout\");},\r\n    get OverlayUserPopoutInfo() {return WebpackModules.getByProps(\"getOpenedUserPopout\");},\r\n\r\n    /* Experiments */\r\n    get ExperimentStore() {return WebpackModules.getByProps(\"getExperimentOverrides\");},\r\n    get ExperimentsManager() {return WebpackModules.getByProps(\"isDeveloper\");},\r\n    get CurrentExperiment() {return WebpackModules.getByProps(\"getExperimentId\");},\r\n\r\n    /* Images, Avatars and Utils */\r\n    get ImageResolver() {return WebpackModules.getByProps(\"getUserAvatarURL\");},\r\n    get ImageUtils() {return WebpackModules.getByProps(\"getSizedImageSrc\");},\r\n    get AvatarDefaults() {return WebpackModules.getByProps(\"getUserAvatarURL\", \"DEFAULT_AVATARS\");},\r\n\r\n    /* Drag & Drop */\r\n    get DNDActions() {return WebpackModules.getByProps(\"beginDrag\");},\r\n    get DNDSources() {return WebpackModules.getByProps(\"addTarget\");},\r\n    get DNDObjects() {return WebpackModules.getByProps(\"DragSource\");},\r\n\r\n    /* Electron & Other Internals with Utils*/\r\n    get ElectronModule() {return WebpackModules.getByProps(\"setBadge\");},\r\n    get Dispatcher() {return WebpackModules.getByProps(\"dirtyDispatch\");},\r\n    get PathUtils() {return WebpackModules.getByProps(\"hasBasename\");},\r\n    get NotificationModule() {return WebpackModules.getByProps(\"showNotification\");},\r\n    get RouterModule() {return WebpackModules.getByProps(\"Router\");},\r\n    get APIModule() {return WebpackModules.getByProps(\"getAPIBaseURL\");},\r\n    get AnalyticEvents() {return WebpackModules.getByProps(\"AnalyticEventConfigs\");},\r\n    get KeyGenerator() {return WebpackModules.getByRegex(/\"binary\"/);},\r\n    get Buffers() {return WebpackModules.getByProps(\"Buffer\", \"kMaxLength\");},\r\n    get DeviceStore() {return WebpackModules.getByProps(\"getDevices\");},\r\n    get SoftwareInfo() {return WebpackModules.getByProps(\"os\");},\r\n    get CurrentContext() {return WebpackModules.getByProps(\"setTagsContext\");},\r\n\r\n    /* Media Stuff (Audio/Video) */\r\n    get MediaDeviceInfo() {return WebpackModules.getByProps(\"Codecs\", \"SUPPORTED_BROWSERS\");},\r\n    get MediaInfo() {return WebpackModules.getByProps(\"getOutputVolume\");},\r\n    get MediaEngineInfo() {return WebpackModules.getByProps(\"MediaEngineFeatures\");},\r\n    get VoiceInfo() {return WebpackModules.getByProps(\"EchoCancellation\");},\r\n    get VideoStream() {return WebpackModules.getByProps(\"getVideoStream\");},\r\n    get SoundModule() {return WebpackModules.getByProps(\"playSound\");},\r\n\r\n    /* Window, DOM, HTML */\r\n    get WindowInfo() {return WebpackModules.getByProps(\"isFocused\", \"windowSize\");},\r\n    get TagInfo() {return WebpackModules.getByProps(\"VALID_TAG_NAMES\");},\r\n    get DOMInfo() {return WebpackModules.getByProps(\"canUseDOM\");},\r\n    get HTMLUtils() {return WebpackModules.getByProps(\"htmlFor\", \"sanitizeUrl\");},\r\n\r\n    /* Locale/Location and Time */\r\n    get LocaleManager() {return WebpackModules.getByProps(\"setLocale\");},\r\n    get Moment() {return WebpackModules.getByProps(\"parseZone\");},\r\n    get LocationManager() {return WebpackModules.getByProps(\"createLocation\");},\r\n    get Timestamps() {return WebpackModules.getByProps(\"fromTimestamp\");},\r\n\r\n    /* Strings and Utils */\r\n    get Strings() {return WebpackModules.getByProps(\"Messages\").Messages;},\r\n    get StringFormats() {return WebpackModules.getByProps(\"a\", \"z\");},\r\n    get StringUtils() {return WebpackModules.getByProps(\"toASCII\");},\r\n\r\n    /* URLs and Utils */\r\n    get URLParser() {return WebpackModules.getByProps(\"Url\", \"parse\");},\r\n    get ExtraURLs() {return WebpackModules.getByProps(\"getArticleURL\");},\r\n\r\n    /* DOM/React Components */\r\n    /* ==================== */\r\n    get UserSettingsWindow() {return WebpackModules.getByProps(\"open\", \"updateAccount\");},\r\n    get LayerManager() {return WebpackModules.getByProps(\"popLayer\", \"pushLayer\");},\r\n    get Tooltips() {return WebpackModules.find(m => m.hide && m.show && !m.search && !m.submit && !m.search && !m.activateRagingDemon && !m.dismiss);},\r\n\r\n    /* Modals */\r\n    get ModalStack() {return WebpackModules.getByProps(\"push\", \"update\", \"pop\", \"popWithKey\");},\r\n    get UserProfileModals() {return WebpackModules.getByProps(\"fetchMutualFriends\", \"setSection\");},\r\n    get ConfirmModal() {return WebpackModules.getByPrototypes(\"handleCancel\", \"handleSubmit\", \"handleMinorConfirm\");},\r\n\r\n    /* Popouts */\r\n    get PopoutStack() {return WebpackModules.getByProps(\"open\", \"close\", \"closeAll\");},\r\n    get PopoutOpener() {return WebpackModules.getByProps(\"openPopout\");},\r\n    get EmojiPicker() {return WebpackModules.getByPrototypes(\"onHoverEmoji\", \"selectEmoji\");},\r\n\r\n    /* Context Menus */\r\n    get ContextMenuActions() {return WebpackModules.getByRegex(/CONTEXT_MENU_CLOSE/, c => c.close);},\r\n    get ContextMenuItemsGroup() {return WebpackModules.getByRegex(/itemGroup/);},\r\n    get ContextMenuItem() {return WebpackModules.getByRegex(/\\.label\\b.*\\.hint\\b.*\\.action\\b/);},\r\n\r\n    /* In-Message Links */\r\n    get ExternalLink() {return WebpackModules.getByRegex(/\\.trusted\\b/);},\r\n});\r\n\r\n",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/DiscordModules.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "src/modules/domhelpers.js",
    "content": "/**\r\n * Helpful utilities for dealing with DOM operations.\r\n * @module DOMHelpers\r\n * @version 0.0.1\r\n */\r\n \r\nexport default class DOMHelpers {\r\n\t/**\r\n\t * Find which index in children a certain node is. Similar to jQuery's `$.index()`\r\n\t * @param {HTMLElement} node - the node to find its index in parent\r\n\t * @returns {number} index of the node\r\n\t */\r\n\tstatic indexInParent(node) {\r\n\t\tvar children = node.parentNode.childNodes;\r\n\t\tvar num = 0;\r\n\t\tfor (var i = 0; i < children.length; i++) {\r\n\t\t\tif (children[i] == node) return num;\r\n\t\t\tif (children[i].nodeType == 1) num++;\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Insert after a specific element, similar to jQuery's `element.after(newElement)`\r\n\t * @param {HTMLElement} newNode - the node to insert\r\n\t * @param {HTMLElement} referenceNode - node to insert after in the tree\r\n\t */\r\n\tstatic insertAfter(newNode, referenceNode) {\r\n\t\treferenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\r\n\t}\r\n}\r\n\r\n/** Representation of a Selector **/\r\nexport class Selector {\r\n\t/**\r\n\t * \r\n\t * @param {string} classname - class to create selector for\r\n\t */\r\n\tconstructor(className) {\r\n\t\tthis.value = \" .\" + className.split(\" \").join(\".\");\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the raw selector, this is how native function get the value.\r\n\t * @returns {string} raw selector.\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.value;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the raw selector, this is how native function get the value.\r\n\t * @returns {string} raw selector.\r\n\t */\r\n\tvalueOf() {\r\n\t\treturn this.value;\r\n\t}\r\n\t\r\n\tselector(symbol, other) {\r\n\t\tthis.value = `${this.toString()} ${symbol} ${other.toString()}`;\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Adds another selector as a direct child `>` to this one.\r\n\t * @param {string|DOMHelpers.Selector} other - Selector to add as child\r\n\t * @returns {DOMHelpers.Selector} returns self to allow chaining\r\n\t */\r\n\tchild(other) {\r\n\t\treturn this.selector(\">\", other);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Adds another selector as a adjacent sibling `+` to this one.\r\n\t * @param {string|DOMHelpers.Selector} other - Selector to add as adjacent sibling\r\n\t * @returns {DOMHelpers.Selector} returns self to allow chaining\r\n\t */\r\n\tadjacent(other) {\r\n\t\treturn this.selector(\"+\", other);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Adds another selector as a general sibling `~` to this one.\r\n\t * @param {string|DOMHelpers.Selector} other - Selector to add as sibling\r\n\t * @returns {DOMHelpers.Selector} returns self to allow chaining\r\n\t */\r\n\tsibling(other) {\r\n\t\treturn this.selector(\"~\", other);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Adds another selector as a descendent `(space)` to this one.\r\n\t * @param {string|DOMHelpers.Selector} other - Selector to add as descendent\r\n\t * @returns {DOMHelpers.Selector} returns self to allow chaining\r\n\t */\r\n\tdescend(other) {\r\n\t\treturn this.selector(\" \", other);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds another selector to this one via `,`.\r\n\t * @param {string|DOMHelpers.Selector} other - Selector to add\r\n\t * @returns {DOMHelpers.Selector} returns self to allow chaining\r\n\t */\r\n\tand(other) {\r\n\t\treturn this.selector(\",\", other);\r\n\t}\r\n}\r\n\r\n/** Representation of a Class Name **/\r\nexport class ClassName {\r\n\t/**\r\n\t * \r\n\t * @param {string} name - name of the class to represent\r\n\t */\r\n\tconstructor(name) {\r\n\t\tthis.value = name;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Concatenates new class names to the current one using spaces.\r\n\t * @param {string} classNames - list of class names to add to this class name\r\n\t * @returns {DOMHelpers.ClassName} returns self to allow chaining\r\n\t */\r\n\tadd(...classNames) {\r\n\t\tfor (var i = 0; i < classNames.length; i++) {\r\n\t\t\tthis.value += \" \" + classNames[i];\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the raw class name, this is how native function get the value.\r\n\t * @returns {string} raw class name.\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.value;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the raw class name, this is how native function get the value.\r\n\t * @returns {string} raw class name.\r\n\t */\r\n\tvalueOf() {\r\n\t\treturn this.value;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the classname represented as {@link DOMHelpers.Selector}.\r\n\t * @returns {DOMHelpers.Selector} selector representation of this class name.\r\n\t */\r\n\tget selector() {\r\n\t\treturn new DOMHelpers.Selector(this.value);\r\n\t}\r\n}",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/domhelpers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "class",
    "name": "DOMHelpers",
    "memberof": "src/modules/domhelpers.js",
    "static": true,
    "longname": "src/modules/domhelpers.js~DOMHelpers",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/domhelpers.js",
    "importStyle": "DOMHelpers",
    "description": "Helpful utilities for dealing with DOM operations.",
    "lineNumber": 7,
    "version": "0.0.1",
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "DOMHelpers"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "indexInParent",
    "memberof": "src/modules/domhelpers.js~DOMHelpers",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/domhelpers.js~DOMHelpers.indexInParent",
    "access": "public",
    "description": "Find which index in children a certain node is. Similar to jQuery's `$.index()`",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} index of the node"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "the node to find its index in parent"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "index of the node"
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "insertAfter",
    "memberof": "src/modules/domhelpers.js~DOMHelpers",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/domhelpers.js~DOMHelpers.insertAfter",
    "access": "public",
    "description": "Insert after a specific element, similar to jQuery's `element.after(newElement)`",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "newNode",
        "description": "the node to insert"
      },
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "referenceNode",
        "description": "node to insert after in the tree"
      }
    ],
    "return": null
  },
  {
    "__docId__": 188,
    "kind": "class",
    "name": "Selector",
    "memberof": "src/modules/domhelpers.js",
    "static": true,
    "longname": "src/modules/domhelpers.js~Selector",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/domhelpers.js",
    "importStyle": "{Selector}",
    "description": "Representation of a Selector *",
    "lineNumber": 34,
    "interface": false
  },
  {
    "__docId__": 189,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/domhelpers.js~Selector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/domhelpers.js~Selector#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "classname",
        "description": "class to create selector for"
      }
    ]
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "value",
    "memberof": "src/modules/domhelpers.js~Selector",
    "static": false,
    "longname": "src/modules/domhelpers.js~Selector#value",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "toString",
    "memberof": "src/modules/domhelpers.js~Selector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/domhelpers.js~Selector#toString",
    "access": "public",
    "description": "Returns the raw selector, this is how native function get the value.",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} raw selector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "raw selector."
    },
    "params": []
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/modules/domhelpers.js~Selector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/domhelpers.js~Selector#valueOf",
    "access": "public",
    "description": "Returns the raw selector, this is how native function get the value.",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} raw selector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "raw selector."
    },
    "params": []
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "selector",
    "memberof": "src/modules/domhelpers.js~Selector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/domhelpers.js~Selector#selector",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "symbol",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "child",
    "memberof": "src/modules/domhelpers.js~Selector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/domhelpers.js~Selector#child",
    "access": "public",
    "description": "Adds another selector as a direct child `>` to this one.",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DOMHelpers.Selector} returns self to allow chaining"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "DOMHelpers.Selector"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "Selector to add as child"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DOMHelpers.Selector"
      ],
      "spread": false,
      "description": "returns self to allow chaining"
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "adjacent",
    "memberof": "src/modules/domhelpers.js~Selector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/domhelpers.js~Selector#adjacent",
    "access": "public",
    "description": "Adds another selector as a adjacent sibling `+` to this one.",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DOMHelpers.Selector} returns self to allow chaining"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "DOMHelpers.Selector"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "Selector to add as adjacent sibling"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DOMHelpers.Selector"
      ],
      "spread": false,
      "description": "returns self to allow chaining"
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "sibling",
    "memberof": "src/modules/domhelpers.js~Selector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/domhelpers.js~Selector#sibling",
    "access": "public",
    "description": "Adds another selector as a general sibling `~` to this one.",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DOMHelpers.Selector} returns self to allow chaining"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "DOMHelpers.Selector"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "Selector to add as sibling"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DOMHelpers.Selector"
      ],
      "spread": false,
      "description": "returns self to allow chaining"
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "descend",
    "memberof": "src/modules/domhelpers.js~Selector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/domhelpers.js~Selector#descend",
    "access": "public",
    "description": "Adds another selector as a descendent `(space)` to this one.",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DOMHelpers.Selector} returns self to allow chaining"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "DOMHelpers.Selector"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "Selector to add as descendent"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DOMHelpers.Selector"
      ],
      "spread": false,
      "description": "returns self to allow chaining"
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "and",
    "memberof": "src/modules/domhelpers.js~Selector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/domhelpers.js~Selector#and",
    "access": "public",
    "description": "Adds another selector to this one via `,`.",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DOMHelpers.Selector} returns self to allow chaining"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "DOMHelpers.Selector"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "Selector to add"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DOMHelpers.Selector"
      ],
      "spread": false,
      "description": "returns self to allow chaining"
    }
  },
  {
    "__docId__": 200,
    "kind": "class",
    "name": "ClassName",
    "memberof": "src/modules/domhelpers.js",
    "static": true,
    "longname": "src/modules/domhelpers.js~ClassName",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/domhelpers.js",
    "importStyle": "{ClassName}",
    "description": "Representation of a Class Name *",
    "lineNumber": 111,
    "interface": false
  },
  {
    "__docId__": 201,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/domhelpers.js~ClassName",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/domhelpers.js~ClassName#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the class to represent"
      }
    ]
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "value",
    "memberof": "src/modules/domhelpers.js~ClassName",
    "static": false,
    "longname": "src/modules/domhelpers.js~ClassName#value",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "add",
    "memberof": "src/modules/domhelpers.js~ClassName",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/domhelpers.js~ClassName#add",
    "access": "public",
    "description": "Concatenates new class names to the current one using spaces.",
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DOMHelpers.ClassName} returns self to allow chaining"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "classNames",
        "description": "list of class names to add to this class name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DOMHelpers.ClassName"
      ],
      "spread": false,
      "description": "returns self to allow chaining"
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "toString",
    "memberof": "src/modules/domhelpers.js~ClassName",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/domhelpers.js~ClassName#toString",
    "access": "public",
    "description": "Returns the raw class name, this is how native function get the value.",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} raw class name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "raw class name."
    },
    "params": []
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/modules/domhelpers.js~ClassName",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/domhelpers.js~ClassName#valueOf",
    "access": "public",
    "description": "Returns the raw class name, this is how native function get the value.",
    "lineNumber": 144,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} raw class name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "raw class name."
    },
    "params": []
  },
  {
    "__docId__": 207,
    "kind": "get",
    "name": "selector",
    "memberof": "src/modules/domhelpers.js~ClassName",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/domhelpers.js~ClassName#selector",
    "access": "public",
    "description": "Returns the classname represented as {@link DOMHelpers.Selector}.",
    "lineNumber": 152,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DOMHelpers.Selector} selector representation of this class name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DOMHelpers.Selector"
      ],
      "spread": false,
      "description": "selector representation of this class name."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "file",
    "name": "src/modules/InternalUtilities.js",
    "content": "\r\n/** Discord's Electron web contents. */\r\nInternalUtilities.webContents = require('electron').remote.getCurrentWebContents();\r\n\r\n/**\r\n * Similar to {@link PluginUtilities.onSwitchObserver} but this uses electron\r\n * web contents and not observers. This can be more efficient on worse systems\r\n * than the observer based method.\r\n * @param {callable} callback - basic callback to happen on channel switch\r\n */\r\nInternalUtilities.addOnSwitchListener = function(callback) {\r\n\tInternalUtilities.webContents.on(\"did-navigate-in-page\", callback);\r\n};\r\n\r\n/**\r\n * Removes the listener added by {@link InternalUtilities.addOnSwitchListener}.\r\n * @param {callable} callback - callback to remove from the listener list\r\n */\r\nInternalUtilities.removeOnSwitchListener = function(callback) {\r\n\tInternalUtilities.webContents.removeListener(\"did-navigate-in-page\", callback);\r\n};\r\n\r\nexport default InternalUtilities;",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/InternalUtilities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "addOnSwitchListener",
    "memberof": "src/modules/InternalUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/InternalUtilities.js~addOnSwitchListener",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/InternalUtilities.js",
    "importStyle": null,
    "description": "Similar to {@link PluginUtilities.onSwitchObserver} but this uses electron\nweb contents and not observers. This can be more efficient on worse systems\nthan the observer based method.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "callable"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "basic callback to happen on channel switch"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "removeOnSwitchListener",
    "memberof": "src/modules/InternalUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/InternalUtilities.js~removeOnSwitchListener",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/InternalUtilities.js",
    "importStyle": null,
    "description": "Removes the listener added by {@link InternalUtilities.addOnSwitchListener}.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "callable"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback to remove from the listener list"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "src/modules/logger.js",
    "content": "/** \r\n * Simple logger for the lib and plugins.\r\n * \r\n * @module Logger\r\n * @version 0.0.2\r\n */\r\n\r\n/* eslint-disable no-console */\r\n\r\nexport const LogTypes = {\r\n    /** Alias for error */\r\n    err: \"error\",\r\n    error: \"error\",\r\n    /** Alias for debug */\r\n    dbg: \"debug\",\r\n    debug: \"debug\",\r\n    log: \"log\",\r\n    warn: \"warn\",\r\n    info: \"info\"\r\n};\r\n\r\nexport default class Logger {\r\n\r\n    /**\r\n     * Logs an error using a collapsed error group with stacktrace.\r\n     * \r\n     * @param {string} module - Name of the calling module.\r\n     * @param {string} message - Message or error to have logged.\r\n\t * @param {Error} error - Optional error to log with the message.\r\n     */\r\n    static err(module, message, error) {\r\n\t\tif (error) return console.error(`%c[${module}]%c ${message}\\n\\n%c`, 'color: #3a71c1; font-weight: 700;', 'color: red; font-weight: 700;', 'color: red;', error);\r\n\t\telse Logger.log(module, message, \"error\");\r\n    }\r\n\r\n    /**\r\n     * Logs a warning message/\r\n     * \r\n     * @param {string} module - Name of the calling module.\r\n     * @param {string} message - Message to have logged.\r\n     */\r\n    static warn(module, message) { Logger.log(module, message, \"warn\"); }\r\n\r\n    /**\r\n     * Logs an informational message.\r\n     * \r\n     * @param {string} module - Name of the calling module.\r\n     * @param {string} message - Message to have logged.\r\n     */\r\n    static info(module, message) { Logger.log(module, message, \"info\"); }\r\n\r\n    /**\r\n     * Logs used for debugging purposes.\r\n     * \r\n     * @param {string} module - Name of the calling module.\r\n     * @param {string} message - Message to have logged.\r\n     */\r\n    static debug(module, message) { Logger.log(module, message, \"debug\"); }\r\n    \r\n    /**\r\n     * Logs strings using different console levels and a module label.\r\n     * \r\n     * @param {string} module - Name of the calling module.\r\n     * @param {string} message - Message to have logged.\r\n     * @param {Logger.LogTypes} type - Type of log to use in console.\r\n     */\r\n    static log(module, message, type = \"log\") {\r\n        type = Logger.parseType(type);\r\n        console[type](`%c[${module}]%c`, 'color: #3a71c1; font-weight: 700;', '', message);\r\n    }\r\n\r\n    static parseType(type) {\r\n        return LogTypes.hasOwnProperty(type) ? LogTypes[type] : \"log\";\r\n    }\r\n\r\n}",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/logger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "variable",
    "name": "LogTypes",
    "memberof": "src/modules/logger.js",
    "static": true,
    "longname": "src/modules/logger.js~LogTypes",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/logger.js",
    "importStyle": "{LogTypes}",
    "description": "Simple logger for the lib and plugins.",
    "lineNumber": 10,
    "version": "0.0.2",
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "Logger"
      }
    ],
    "type": {
      "types": [
        "{\"err\": string, \"error\": string, \"dbg\": string, \"debug\": string, \"log\": string, \"warn\": string, \"info\": string}"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "class",
    "name": "Logger",
    "memberof": "src/modules/logger.js",
    "static": true,
    "longname": "src/modules/logger.js~Logger",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/logger.js",
    "importStyle": "Logger",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "err",
    "memberof": "src/modules/logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/logger.js~Logger.err",
    "access": "public",
    "description": "Logs an error using a collapsed error group with stacktrace.",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "module",
        "description": "Name of the calling module."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message or error to have logged."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Optional error to log with the message."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "warn",
    "memberof": "src/modules/logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/logger.js~Logger.warn",
    "access": "public",
    "description": "Logs a warning message/",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "module",
        "description": "Name of the calling module."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message to have logged."
      }
    ],
    "return": null
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "info",
    "memberof": "src/modules/logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/logger.js~Logger.info",
    "access": "public",
    "description": "Logs an informational message.",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "module",
        "description": "Name of the calling module."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message to have logged."
      }
    ],
    "return": null
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "debug",
    "memberof": "src/modules/logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/logger.js~Logger.debug",
    "access": "public",
    "description": "Logs used for debugging purposes.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "module",
        "description": "Name of the calling module."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message to have logged."
      }
    ],
    "return": null
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "log",
    "memberof": "src/modules/logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/logger.js~Logger.log",
    "access": "public",
    "description": "Logs strings using different console levels and a module label.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "module",
        "description": "Name of the calling module."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message to have logged."
      },
      {
        "nullable": null,
        "types": [
          "Logger.LogTypes"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Type of log to use in console."
      }
    ],
    "return": null
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "parseType",
    "memberof": "src/modules/logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/logger.js~Logger.parseType",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "file",
    "name": "src/modules/modules.js",
    "content": "export { default as ColorUtilities } from './ColorUtilities';\r\nexport { DiscordClasses, DiscordSelectors } from './DiscordClassModules';\r\nexport { default as DiscordModules } from './DiscordModules';\r\nexport { default as DiscordPermissions } from './DiscordPermissions';\r\nexport { default as DOMUtilities } from './DOMUtilities';\r\nexport { Utilities as GeneralUtilities } from './GeneralUtilities';\r\n\r\nexport { default as InternalUtilities } from './InternalUtilities';\r\nexport { default as Logger } from './Logger';\r\nexport { default as Patcher } from './Patcher';\r\nexport { default as PluginContextMenu } from './PluginContextMenu';\r\nexport { default as PluginSettings } from './PluginSettings';\r\n\r\nexport { default as PluginTooltip } from './PluginTooltip';\r\nexport { default as PluginUpdateUtilities } from './PluginUpdateUtilities';\r\n\r\nexport { default as PluginUtilities } from './PluginUtilities';\r\nexport { default as ReactUtilities } from './ReactUtilities';",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/modules.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "file",
    "name": "src/modules/patcher.js",
    "content": "/** \r\n * Patcher that can patch other functions allowing you to run code before, after or\r\n * instead of the original function. Can also alter arguments and return values.\r\n * \r\n * This is a modified version of what we have been working on in BDv2. {@link https://github.com/JsSucks/BetterDiscordApp/blob/master/client/src/modules/patcher.js}\r\n * \r\n * @module Patcher\r\n * @version 0.0.2\r\n */\r\nexport default class Patcher {\r\n\r\n    static get patches() { return global._patches || (global._patches = []); }\r\n\r\n    /**\r\n     * Returns all the patches done by a specific caller\r\n     * @param {string} name - Name of the patch caller\r\n     * @method\r\n     */\r\n    static getPatchesByCaller(name) {\r\n\t\tif (!name) return [];\r\n        const patches = [];\r\n        for (const patch of this.patches) {\r\n\t\t\tfor (const childPatch of patch.children) {\r\n\t\t\t\tif (childPatch.caller === name) patches.push(childPatch);\r\n\t\t\t}\r\n        }\r\n        return patches;\r\n    }\r\n\r\n    /**\r\n     * Unpatches all patches passed, or when a string is passed unpatches all\r\n     * patches done by that specific caller.\r\n     * @param {Array|string} patches - Either an array of patches to unpatch or a caller name\r\n     */\r\n    static unpatchAll(patches) {\r\n        if (typeof patches === 'string') patches = this.getPatchesByCaller(patches);\r\n\r\n        for (const patch of patches) {\r\n\t\t\tpatch.unpatch();\r\n        }\r\n\t}\r\n\t\r\n\tstatic resolveModule(module) {\r\n        if (module instanceof Function || (module instanceof Object && !(module instanceof Array))) return module;\r\n        if (typeof module === 'string') return DiscordModules[module];\r\n        if (module instanceof Array) return InternalUtilities.WebpackModules.findByUniqueProperties(module);\r\n        return null;\r\n\t}\r\n\r\n    static makeOverride(patch) {\r\n        return function () {\r\n            let returnValue = undefined;\r\n            if (!patch.children) return patch.originalFunction.apply(this, arguments);\r\n            for (const superPatch of patch.children.filter(c => c.type === 'before')) {\r\n                try {\r\n                    superPatch.callback(this, arguments);\r\n                }\r\n                catch (err) {\r\n                    Logger.err(\"Patcher\", `Could not fire before callback of ${patch.functionName} for ${superPatch.caller}`, err);\r\n                }\r\n            }\r\n\r\n            const insteads = patch.children.filter(c => c.type === 'instead');\r\n            if (!insteads.length) returnValue = patch.originalFunction.apply(this, arguments, patch.originalFunction);\r\n            else {\r\n                for (const insteadPatch of insteads) {\r\n                    try {\r\n\t\t\t\t\t\tconst tempReturn = insteadPatch.callback(this, arguments);\r\n                        if (typeof(tempReturn) !== \"undefined\") returnValue = tempReturn;\r\n                    }\r\n                    catch (err) {\r\n                        Logger.err(\"Patcher\", `Could not fire instead callback of ${patch.functionName} for ${insteadPatch.caller}`, err);\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (const slavePatch of patch.children.filter(c => c.type === 'after')) {\r\n                try {\r\n\t\t\t\t\tconst tempReturn = slavePatch.callback(this, arguments, returnValue);\r\n                    if (typeof(tempReturn) !== \"undefined\") returnValue = tempReturn;\r\n                }\r\n                catch (err) {\r\n                    Logger.err(\"Patcher\", `Could not fire after callback of ${patch.functionName} for ${slavePatch.caller}`, err);\r\n                }\r\n            }\r\n            return returnValue;\r\n        };\r\n    }\r\n\r\n    static rePatch(patch) {\r\n        patch.proxyFunction = patch.module[patch.functionName] = this.makeOverride(patch);\r\n    }\r\n\r\n    static makePatch(module, functionName, name) {\r\n        const patch = {\r\n\t\t\tname,\r\n            module,\r\n            functionName,\r\n            originalFunction: module[functionName],\r\n            proxyFunction: null,\r\n            revert: () => { // Calling revert will destroy any patches added to the same module after this\r\n                patch.module[patch.functionName] = patch.originalFunction;\r\n                patch.proxyFunction = null;\r\n                patch.children = [];\r\n            },\r\n            counter: 0,\r\n            children: []\r\n        };\r\n        patch.proxyFunction = module[functionName] = this.makeOverride(patch);\r\n        return this.patches.push(patch), patch;\r\n    }\r\n\r\n    /**\r\n     * Function with no arguments and no return value that may be called to revert changes made by {@link Patcher}, restoring (unpatching) original method.\r\n     * @callback Patcher~unpatch\r\n     */\r\n\r\n    /**\r\n     * A callback that modifies method logic. This callback is called on each call of the original method and is provided all data about original call. Any of the data can be modified if necessary, but do so wisely.\r\n     * \r\n     * The third argument for the callback will be `undefined` for `before` patches. `originalFunction` for `instead` patches and `returnValue` for `after` patches.\r\n     * \r\n     * @callback Patcher~patchCallback\r\n     * @param {object} thisObject - `this` in the context of the original function.\r\n     * @param {arguments} arguments - The original arguments of the original function.\r\n     * @param {function} originalFunction - The original function from the module. This the third argument for `instead` patches.\r\n     * @param {*} returnValue - The return value of the original function. This the third argument for `after` patches.\r\n     * @return {*} Makes sense only when using an `instead` or `after` patch. If something other than `undefined` is returned, the returned value replaces the value of `returnValue`. If used for `before` the return value is ignored.\r\n     */\r\n\r\n    /**\r\n     * This method patches onto another function, allowing your code to run beforehand.\r\n     * Using this, you are also able to modify the incoming arguments before the original method is run.\r\n     * \r\n     * @param {string} caller - Name of the caller of the patch function. Using this you can undo all patches with the same name using {@link Patcher#unpatchAll}. Use `\"\"` if you don't care.\r\n     * @param {object} moduleToPatch - Object with the function to be patched. Can also patch an object's prototype.\r\n     * @param {string} functionName - Name of the method to be patched\r\n     * @param {Patcher~patchCallback} callback - Function to run before the original method\r\n     * @param {object} options - Object used to pass additional options.\r\n     * @param {string} [options.displayName] You can provide meaningful name for class/object provided in `what` param for logging purposes. By default, this function will try to determine name automatically.\r\n     * @param {boolean} [options.forcePatch=true] Set to `true` to patch even if the function doesnt exist. (Adds noop function in place).\r\n     * @return {Patcher~unpatch} Function with no arguments and no return value that should be called to cancel (unpatch) this patch. You should save and run it when your plugin is stopped.\r\n     */\r\n    static before(caller, moduleToPatch, functionName, callback, options = {}) { return this.pushChildPatch(caller, moduleToPatch, functionName, callback, Object.assign(options, {type: \"before\"})); }\r\n    \r\n    /**\r\n     * This method patches onto another function, allowing your code to run instead.\r\n     * Using this, you are also able to modify the return value, using the return of your code instead.\r\n     * \r\n     * @param {string} caller - Name of the caller of the patch function. Using this you can undo all patches with the same name using {@link Patcher#unpatchAll}. Use `\"\"` if you don't care.\r\n     * @param {object} moduleToPatch - Object with the function to be patched. Can also patch an object's prototype.\r\n     * @param {string} functionName - Name of the method to be patched\r\n     * @param {Patcher~patchCallback} callback - Function to run instead of the original method\r\n     * @param {object} options - Object used to pass additional options.\r\n     * @param {string} [options.displayName] You can provide meaningful name for class/object provided in `what` param for logging purposes. By default, this function will try to determine name automatically.\r\n     * @param {boolean} [options.forcePatch=true] Set to `true` to patch even if the function doesnt exist. (Adds noop function in place).\r\n     * @return {Patcher~unpatch} Function with no arguments and no return value that should be called to cancel (unpatch) this patch. You should save and run it when your plugin is stopped.\r\n     */\r\n    static after(caller, moduleToPatch, functionName, callback, options = {}) { return this.pushChildPatch(caller, moduleToPatch, functionName, callback, Object.assign(options, {type: \"after\"})); }\r\n    \r\n    /**\r\n     * This method patches onto another function, allowing your code to run afterwards.\r\n     * Using this, you are also able to modify the return value, using the return of your code instead.\r\n     * \r\n     * @param {string} caller - Name of the caller of the patch function. Using this you can undo all patches with the same name using {@link Patcher#unpatchAll}. Use `\"\"` if you don't care.\r\n     * @param {object} moduleToPatch - Object with the function to be patched. Can also patch an object's prototype.\r\n     * @param {string} functionName - Name of the method to be patched\r\n     * @param {Patcher~patchCallback} callback - Function to run after the original method\r\n     * @param {object} options - Object used to pass additional options.\r\n     * @param {string} [options.displayName] You can provide meaningful name for class/object provided in `what` param for logging purposes. By default, this function will try to determine name automatically.\r\n     * @param {boolean} [options.forcePatch=true] Set to `true` to patch even if the function doesnt exist. (Adds noop function in place).\r\n     * @return {Patcher~unpatch} Function with no arguments and no return value that should be called to cancel (unpatch) this patch. You should save and run it when your plugin is stopped.\r\n     */\r\n    static instead(caller, moduleToPatch, functionName, callback, options = {}) { return this.pushChildPatch(caller, moduleToPatch, functionName, callback, Object.assign(options, {type: \"instead\"})); }\r\n\r\n    /**\r\n     * This method patches onto another function, allowing your code to run before, instead or after the original function.\r\n     * Using this you are able to modify the incoming arguments before the original function is run as well as the return\r\n     * value before the original function actually returns.\r\n     * \r\n     * @param {string} caller - Name of the caller of the patch function. Using this you can undo all patches with the same name using {@link Patcher#unpatchAll}. Use `\"\"` if you don't care.\r\n     * @param {object} moduleToPatch - Object with the function to be patched. Can also patch an object's prototype.\r\n     * @param {string} functionName - Name of the method to be patched\r\n     * @param {Patcher~patchCallback} callback - Function to run after the original method\r\n     * @param {object} options - Object used to pass additional options.\r\n     * @param {string} [options.type=after] - Determines whether to run the function `before`, `instead`, or `after` the original.\r\n     * @param {string} [options.displayName] You can provide meaningful name for class/object provided in `what` param for logging purposes. By default, this function will try to determine name automatically.\r\n     * @param {boolean} [options.forcePatch=true] Set to `true` to patch even if the function doesnt exist. (Adds noop function in place).\r\n     * @return {Patcher~unpatch} Function with no arguments and no return value that should be called to cancel (unpatch) this patch. You should save and run it when your plugin is stopped.\r\n     */\r\n    static pushChildPatch(caller, moduleToPatch, functionName, callback, options = {}) {\r\n\t\tconst {type = \"after\", forcePatch = true} = options;\r\n\t\tconst module = this.resolveModule(moduleToPatch);\r\n\t\tif (!module) return null;\r\n\t\tif (!module[functionName] && forcePatch) module[functionName] = function() {};\r\n\t\tif (!(module[functionName] instanceof Function)) return null;\r\n\t\t\r\n\t\tif (typeof moduleToPatch === 'string') options.displayName = moduleToPatch;\r\n        const displayName = options.displayName || module.displayName || module.name || module.constructor.displayName || module.constructor.name;\r\n\r\n\t\tconst patchId = `${displayName}.${functionName}`;\r\n        const patch = this.patches.find(p => p.module == module && p.functionName == functionName) || this.makePatch(module, functionName, patchId);\r\n        if (!patch.proxyFunction) this.rePatch(patch);\r\n        const child = {\r\n            caller,\r\n            type,\r\n            id: patch.counter,\r\n            callback,\r\n            unpatch: () => {\r\n                patch.children.splice(patch.children.findIndex(cpatch => cpatch.id === child.id && cpatch.type === type), 1);\r\n                if (patch.children.length <= 0) {\r\n\t\t\t\t\tlet patchNum = this.patches.findIndex(p => p.module == module && p.functionName == functionName);\r\n\t\t\t\t\tthis.patches[patchNum].revert();\r\n\t\t\t\t\tthis.patches.splice(patchNum, 1);\r\n\t\t\t\t}\r\n            }\r\n        };\r\n        patch.children.push(child);\r\n        patch.counter++;\r\n        return child.unpatch;\r\n    }\r\n\r\n}",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/patcher.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 222,
    "kind": "class",
    "name": "Patcher",
    "memberof": "src/modules/patcher.js",
    "static": true,
    "longname": "src/modules/patcher.js~Patcher",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/patcher.js",
    "importStyle": "Patcher",
    "description": "Patcher that can patch other functions allowing you to run code before, after or\ninstead of the original function. Can also alter arguments and return values.\n\nThis is a modified version of what we have been working on in BDv2. {@link https://github.com/JsSucks/BetterDiscordApp/blob/master/client/src/modules/patcher.js}",
    "lineNumber": 10,
    "version": "0.0.2",
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "Patcher"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 223,
    "kind": "get",
    "name": "patches",
    "memberof": "src/modules/patcher.js~Patcher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/patcher.js~Patcher.patches",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "getPatchesByCaller",
    "memberof": "src/modules/patcher.js~Patcher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/patcher.js~Patcher.getPatchesByCaller",
    "access": "public",
    "description": "Returns all the patches done by a specific caller",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of the patch caller"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "unpatchAll",
    "memberof": "src/modules/patcher.js~Patcher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/patcher.js~Patcher.unpatchAll",
    "access": "public",
    "description": "Unpatches all patches passed, or when a string is passed unpatches all\npatches done by that specific caller.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "patches",
        "description": "Either an array of patches to unpatch or a caller name"
      }
    ],
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "resolveModule",
    "memberof": "src/modules/patcher.js~Patcher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/patcher.js~Patcher.resolveModule",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "module",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "makeOverride",
    "memberof": "src/modules/patcher.js~Patcher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/patcher.js~Patcher.makeOverride",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "patch",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "rePatch",
    "memberof": "src/modules/patcher.js~Patcher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/patcher.js~Patcher.rePatch",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "patch",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "makePatch",
    "memberof": "src/modules/patcher.js~Patcher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/patcher.js~Patcher.makePatch",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "module",
        "types": [
          "*"
        ]
      },
      {
        "name": "functionName",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "before",
    "memberof": "src/modules/patcher.js~Patcher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/patcher.js~Patcher.before",
    "access": "public",
    "description": "This method patches onto another function, allowing your code to run beforehand.\nUsing this, you are also able to modify the incoming arguments before the original method is run.",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "caller",
        "description": "Name of the caller of the patch function. Using this you can undo all patches with the same name using {@link Patcher#unpatchAll}. Use `\"\"` if you don't care."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "moduleToPatch",
        "description": "Object with the function to be patched. Can also patch an object's prototype."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "functionName",
        "description": "Name of the method to be patched"
      },
      {
        "nullable": null,
        "types": [
          "Patcher~patchCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to run before the original method"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Object used to pass additional options."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.displayName",
        "description": "You can provide meaningful name for class/object provided in `what` param for logging purposes. By default, this function will try to determine name automatically."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.forcePatch",
        "description": "Set to `true` to patch even if the function doesnt exist. (Adds noop function in place)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Patcher~unpatch"
      ],
      "spread": false,
      "description": "Function with no arguments and no return value that should be called to cancel (unpatch) this patch. You should save and run it when your plugin is stopped."
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "after",
    "memberof": "src/modules/patcher.js~Patcher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/patcher.js~Patcher.after",
    "access": "public",
    "description": "This method patches onto another function, allowing your code to run instead.\nUsing this, you are also able to modify the return value, using the return of your code instead.",
    "lineNumber": 159,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "caller",
        "description": "Name of the caller of the patch function. Using this you can undo all patches with the same name using {@link Patcher#unpatchAll}. Use `\"\"` if you don't care."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "moduleToPatch",
        "description": "Object with the function to be patched. Can also patch an object's prototype."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "functionName",
        "description": "Name of the method to be patched"
      },
      {
        "nullable": null,
        "types": [
          "Patcher~patchCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to run instead of the original method"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Object used to pass additional options."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.displayName",
        "description": "You can provide meaningful name for class/object provided in `what` param for logging purposes. By default, this function will try to determine name automatically."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.forcePatch",
        "description": "Set to `true` to patch even if the function doesnt exist. (Adds noop function in place)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Patcher~unpatch"
      ],
      "spread": false,
      "description": "Function with no arguments and no return value that should be called to cancel (unpatch) this patch. You should save and run it when your plugin is stopped."
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "instead",
    "memberof": "src/modules/patcher.js~Patcher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/patcher.js~Patcher.instead",
    "access": "public",
    "description": "This method patches onto another function, allowing your code to run afterwards.\nUsing this, you are also able to modify the return value, using the return of your code instead.",
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "caller",
        "description": "Name of the caller of the patch function. Using this you can undo all patches with the same name using {@link Patcher#unpatchAll}. Use `\"\"` if you don't care."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "moduleToPatch",
        "description": "Object with the function to be patched. Can also patch an object's prototype."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "functionName",
        "description": "Name of the method to be patched"
      },
      {
        "nullable": null,
        "types": [
          "Patcher~patchCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to run after the original method"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Object used to pass additional options."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.displayName",
        "description": "You can provide meaningful name for class/object provided in `what` param for logging purposes. By default, this function will try to determine name automatically."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.forcePatch",
        "description": "Set to `true` to patch even if the function doesnt exist. (Adds noop function in place)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Patcher~unpatch"
      ],
      "spread": false,
      "description": "Function with no arguments and no return value that should be called to cancel (unpatch) this patch. You should save and run it when your plugin is stopped."
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "pushChildPatch",
    "memberof": "src/modules/patcher.js~Patcher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/patcher.js~Patcher.pushChildPatch",
    "access": "public",
    "description": "This method patches onto another function, allowing your code to run before, instead or after the original function.\nUsing this you are able to modify the incoming arguments before the original function is run as well as the return\nvalue before the original function actually returns.",
    "lineNumber": 191,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "caller",
        "description": "Name of the caller of the patch function. Using this you can undo all patches with the same name using {@link Patcher#unpatchAll}. Use `\"\"` if you don't care."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "moduleToPatch",
        "description": "Object with the function to be patched. Can also patch an object's prototype."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "functionName",
        "description": "Name of the method to be patched"
      },
      {
        "nullable": null,
        "types": [
          "Patcher~patchCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to run after the original method"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Object used to pass additional options."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "after",
        "defaultRaw": "after",
        "name": "options.type",
        "description": "Determines whether to run the function `before`, `instead`, or `after` the original."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.displayName",
        "description": "You can provide meaningful name for class/object provided in `what` param for logging purposes. By default, this function will try to determine name automatically."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.forcePatch",
        "description": "Set to `true` to patch even if the function doesnt exist. (Adds noop function in place)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Patcher~unpatch"
      ],
      "spread": false,
      "description": "Function with no arguments and no return value that should be called to cancel (unpatch) this patch. You should save and run it when your plugin is stopped."
    }
  },
  {
    "__docId__": 234,
    "kind": "file",
    "name": "src/modules/permissions.js",
    "content": "/**\r\n * Class representing Discord's permissions system.\r\n * \r\n * This will soon be rewritten in a much simpler manner using internals.\r\n * @deprecated\r\n * @module DiscordPermissions\r\n */\r\nexport default class DiscordPermissions {\r\n\tconstructor(perms) {\r\n\t\tthis.perms = perms;\r\n\t}\r\n\r\n\tstatic get version() {return \"0.0.1\";}\r\n\r\n\tstatic hasPermission(perms, perm) {\r\n\t\treturn (perms & perm) == perm;\r\n\t}\r\n\r\n\tstatic get FullPermissions() { return 2146958591; }\r\n\tstatic get DefaultPermissions() { return 104324161; }\r\n\r\n\tstatic generateFullPermissions() { return new DiscordPermissions(DiscordPermissions.FullPermissions); }\r\n\tstatic generateDefaultPermissions() { return new DiscordPermissions(DiscordPermissions.DefaultPermissions); }\r\n\r\n\t/* General Permissions */\r\n\tstatic get Administrator() { return 0x8; }\r\n\tstatic get ViewAuditLog() { return 0x80; }\r\n\tstatic get ManageServer() { return 0x20; }\r\n\tstatic get ManageRoles() { return 0x10000000; }\r\n\tstatic get ManageChannels() { return 0x10; }\r\n\tstatic get KickMembers() { return 0x2; }\r\n\tstatic get BanMembers() { return 0x4; }\r\n\tstatic get CreateInvite() { return 0x1; }\r\n\tstatic get ChangeNickname() { return 0x4000000; }\r\n\tstatic get ManageNicknames() { return 0x8000000; }\r\n\tstatic get ManageEmojis() { return 0x40000000; }\r\n\tstatic get ManageWebhooks() { return 0x20000000; }\r\n\r\n\t/* Text Permissions */\r\n\tstatic get ReadMessages() { return 0x400; }\r\n\tstatic get SendTTSMessages() { return 0x1000; }\r\n\tstatic get EmbedLinks() { return 0x4000; }\r\n\tstatic get ReadMessageHistory() { return 0x10000; }\r\n\tstatic get UseExternalEmojis() { return 0x40000; }\r\n\tstatic get SendMessages() { return 0x800; }\r\n\tstatic get ManageMessages() { return 0x2000; }\r\n\tstatic get AttachFiles() { return 0x8000; }\r\n\tstatic get MentionEveryone() { return 0x20000; }\r\n\tstatic get AddReactions() { return 0x40; }\r\n\r\n\t/* Voice Permissions */\r\n\tstatic get ViewChannel() { return 0x400; }\r\n\tstatic get Connect() { return 0x100000; }\r\n\tstatic get MuteMembers() { return 0x400000; }\r\n\tstatic get MoveMembers() { return 0x1000000; }\r\n\tstatic get Speak() { return 0x200000; }\r\n\tstatic get DeafenMembers() { return 0x800000; }\r\n\tstatic get UseVoiceActivity() { return 0x2000000; }\r\n\r\n\tstatic get PermissionList() {\r\n\t\treturn [\"administrator\", \"viewAuditLog\", \"manageServer\", \"manageRoles\", \"manageChannels\", \"kickMembers\", \"banMembers\", \"createInvite\",\r\n\t\t\t\t\"changeNickname\", \"manageNicknames\", \"manageEmojis\", \"manageWebhooks\",\r\n\t\t\t\t\"readMessages\", \"sendTTSMessages\", \"embedLinks\", \"readMessageHistory\", \"useExternalEmojis\", \"sendMessages\", \"manageMessages\",\r\n\t\t\t\t\"attachFiles\", \"mentionEveryone\", \"addReactions\",\r\n\t\t\t\t\"viewChannel\", \"connect\", \"muteMembers\", \"moveMembers\", \"speak\", \"deafenMembers\", \"useVoiceActivity\"];\r\n\t}\r\n\r\n    // eslint-disable-next-line no-undef\r\n\t[Symbol.iterator]() { return DiscordPermissions.PermissionList.values(); }\r\n\r\n\thasPermission(perm) { return (this.perms & perm) == perm; }\r\n\tsetPermission(perm, value) {\r\n\t\tif (value) this.allowPermission(perm);\r\n\t\telse this.denyPermission(perm);\r\n\t}\r\n\r\n\tallowPermission(perm) { this.perms = this.perms | perm; }\r\n\tdenyPermission(perm) { this.perms = this.perms & ~perm; }\r\n\r\n\t/* General Permissions */\r\n\tget administrator() { return this.hasPermission(DiscordPermissions.Administrator); }\r\n\tget viewAuditLog() { return this.hasPermission(DiscordPermissions.ViewAuditLog); }\r\n\tget manageServer() { return this.hasPermission(DiscordPermissions.ManageServer); }\r\n\tget manageRoles() { return this.hasPermission(DiscordPermissions.ManageRoles); }\r\n\tget manageChannels() { return this.hasPermission(DiscordPermissions.ManageChannels); }\r\n\tget kickMembers() { return this.hasPermission(DiscordPermissions.KickMembers); }\r\n\tget banMembers() { return this.hasPermission(DiscordPermissions.BanMembers); }\r\n\tget createInvite() { return this.hasPermission(DiscordPermissions.CreateInvite); }\r\n\tget changeNickname() { return this.hasPermission(DiscordPermissions.ChangeNickname); }\r\n\tget manageNicknames() { return this.hasPermission(DiscordPermissions.ManageNicknames); }\r\n\tget manageEmojis() { return this.hasPermission(DiscordPermissions.ManageEmojis); }\r\n\tget manageWebhooks() { return this.hasPermission(DiscordPermissions.ManageWebhooks); }\r\n\r\n\t/* Text Permissions */\r\n\tget readMessages() { return this.hasPermission(DiscordPermissions.ReadMessages); }\r\n\tget sendTTSMessages() { return this.hasPermission(DiscordPermissions.SendTTSMessages); }\r\n\tget embedLinks() { return this.hasPermission(DiscordPermissions.EmbedLinks); }\r\n\tget readMessageHistory() { return this.hasPermission(DiscordPermissions.ReadMessageHistory); }\r\n\tget useExternalEmojis() { return this.hasPermission(DiscordPermissions.UseExternalEmojis); }\r\n\tget sendMessages() { return this.hasPermission(DiscordPermissions.SendMessages); }\r\n\tget manageMessages() { return this.hasPermission(DiscordPermissions.ManageMessages); }\r\n\tget attachFiles() { return this.hasPermission(DiscordPermissions.AttachFiles); }\r\n\tget mentionEveryone() { return this.hasPermission(DiscordPermissions.MentionEveryone); }\r\n\tget addReactions() { return this.hasPermission(DiscordPermissions.AddReactions); }\r\n\r\n\t/* Voice Permissions */\r\n\tget viewChannel() { return this.hasPermission(DiscordPermissions.ViewChannel); }\r\n\tget connect() { return this.hasPermission(DiscordPermissions.Connect); }\r\n\tget muteMembers() { return this.hasPermission(DiscordPermissions.MuteMembers); }\r\n\tget moveMembers() { return this.hasPermission(DiscordPermissions.MoveMembers); }\r\n\tget speak() { return this.hasPermission(DiscordPermissions.Speak); }\r\n\tget deafenMembers() { return this.hasPermission(DiscordPermissions.DeafenMembers); }\r\n\tget useVoiceActivity() { return this.hasPermission(DiscordPermissions.UseVoiceActivity); }\r\n\r\n\r\n\r\n\t/* General Permissions */\r\n\tset administrator(allowed) { return this.setPermission(DiscordPermissions.Administrator, allowed); }\r\n\tset viewAuditLog(allowed) { return this.setPermission(DiscordPermissions.ViewAuditLog, allowed); }\r\n\tset manageServer(allowed) { return this.setPermission(DiscordPermissions.ManageServer, allowed); }\r\n\tset manageRoles(allowed) { return this.setPermission(DiscordPermissions.ManageRoles, allowed); }\r\n\tset manageChannels(allowed) { return this.setPermission(DiscordPermissions.ManageChannels, allowed); }\r\n\tset kickMembers(allowed) { return this.setPermission(DiscordPermissions.KickMembers, allowed); }\r\n\tset banMembers(allowed) { return this.setPermission(DiscordPermissions.BanMembers, allowed); }\r\n\tset createInvite(allowed) { return this.setPermission(DiscordPermissions.CreateInvite, allowed); }\r\n\tset changeNickname(allowed) { return this.setPermission(DiscordPermissions.ChangeNickname, allowed); }\r\n\tset manageNicknames(allowed) { return this.setPermission(DiscordPermissions.ManageNicknames, allowed); }\r\n\tset manageEmojis(allowed) { return this.setPermission(DiscordPermissions.ManageEmojis, allowed); }\r\n\tset manageWebhooks(allowed) { return this.setPermission(DiscordPermissions.ManageWebhooks, allowed); }\r\n\r\n\t/* Text Permissions */\r\n\tset readMessages(allowed) { return this.setPermission(DiscordPermissions.ReadMessages, allowed); }\r\n\tset sendTTSMessages(allowed) { return this.setPermission(DiscordPermissions.SendTTSMessages, allowed); }\r\n\tset embedLinks(allowed) { return this.setPermission(DiscordPermissions.EmbedLinks, allowed); }\r\n\tset readMessageHistory(allowed) { return this.setPermission(DiscordPermissions.ReadMessageHistory, allowed); }\r\n\tset useExternalEmojis(allowed) { return this.setPermission(DiscordPermissions.UseExternalEmojis, allowed); }\r\n\tset sendMessages(allowed) { return this.setPermission(DiscordPermissions.SendMessages, allowed); }\r\n\tset manageMessages(allowed) { return this.setPermission(DiscordPermissions.ManageMessages, allowed); }\r\n\tset attachFiles(allowed) { return this.setPermission(DiscordPermissions.AttachFiles, allowed); }\r\n\tset mentionEveryone(allowed) { return this.setPermission(DiscordPermissions.MentionEveryone, allowed); }\r\n\tset addReactions(allowed) { return this.setPermission(DiscordPermissions.AddReactions, allowed); }\r\n\r\n\t/* Voice Permissions */\r\n\tset viewChannel(allowed) { return this.setPermission(DiscordPermissions.ViewChannel, allowed); }\r\n\tset connect(allowed) { return this.setPermission(DiscordPermissions.Connect, allowed); }\r\n\tset muteMembers(allowed) { return this.setPermission(DiscordPermissions.MuteMembers, allowed); }\r\n\tset moveMembers(allowed) { return this.setPermission(DiscordPermissions.MoveMembers, allowed); }\r\n\tset speak(allowed) { return this.setPermission(DiscordPermissions.Speak, allowed); }\r\n\tset deafenMembers(allowed) { return this.setPermission(DiscordPermissions.DeafenMembers, allowed); }\r\n\tset useVoiceActivity(allowed) { return this.setPermission(DiscordPermissions.UseVoiceActivity, allowed); }\r\n}",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/permissions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 235,
    "kind": "class",
    "name": "DiscordPermissions",
    "memberof": "src/modules/permissions.js",
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/permissions.js",
    "importStyle": "DiscordPermissions",
    "description": "Class representing Discord's permissions system.\n\nThis will soon be rewritten in a much simpler manner using internals.",
    "lineNumber": 8,
    "deprecated": true,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "DiscordPermissions"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 236,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "perms",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#perms",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "get",
    "name": "version",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.version",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "hasPermission",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.hasPermission",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "perms",
        "types": [
          "*"
        ]
      },
      {
        "name": "perm",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "get",
    "name": "FullPermissions",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.FullPermissions",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "get",
    "name": "DefaultPermissions",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.DefaultPermissions",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "generateFullPermissions",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.generateFullPermissions",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "generateDefaultPermissions",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.generateDefaultPermissions",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "get",
    "name": "Administrator",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.Administrator",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "get",
    "name": "ViewAuditLog",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.ViewAuditLog",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "get",
    "name": "ManageServer",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.ManageServer",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "get",
    "name": "ManageRoles",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.ManageRoles",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "get",
    "name": "ManageChannels",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.ManageChannels",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "get",
    "name": "KickMembers",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.KickMembers",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "get",
    "name": "BanMembers",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.BanMembers",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "get",
    "name": "CreateInvite",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.CreateInvite",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "get",
    "name": "ChangeNickname",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.ChangeNickname",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "get",
    "name": "ManageNicknames",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.ManageNicknames",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "get",
    "name": "ManageEmojis",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.ManageEmojis",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "get",
    "name": "ManageWebhooks",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.ManageWebhooks",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "get",
    "name": "ReadMessages",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.ReadMessages",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "get",
    "name": "SendTTSMessages",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.SendTTSMessages",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "get",
    "name": "EmbedLinks",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.EmbedLinks",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "get",
    "name": "ReadMessageHistory",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.ReadMessageHistory",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "get",
    "name": "UseExternalEmojis",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.UseExternalEmojis",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "get",
    "name": "SendMessages",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.SendMessages",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "get",
    "name": "ManageMessages",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.ManageMessages",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "get",
    "name": "AttachFiles",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.AttachFiles",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "get",
    "name": "MentionEveryone",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.MentionEveryone",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "get",
    "name": "AddReactions",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.AddReactions",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "get",
    "name": "ViewChannel",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.ViewChannel",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "get",
    "name": "Connect",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.Connect",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "get",
    "name": "MuteMembers",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.MuteMembers",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "get",
    "name": "MoveMembers",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.MoveMembers",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "get",
    "name": "Speak",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.Speak",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "get",
    "name": "DeafenMembers",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.DeafenMembers",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "get",
    "name": "UseVoiceActivity",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.UseVoiceActivity",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "get",
    "name": "PermissionList",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/permissions.js~DiscordPermissions.PermissionList",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "[Symbol.iterator]",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#[Symbol.iterator]",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "hasPermission",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#hasPermission",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "perm",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "setPermission",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#setPermission",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "perm",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "allowPermission",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#allowPermission",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "perm",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "denyPermission",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#denyPermission",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "perm",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 281,
    "kind": "get",
    "name": "administrator",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#administrator",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "get",
    "name": "viewAuditLog",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#viewAuditLog",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "get",
    "name": "manageServer",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#manageServer",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "get",
    "name": "manageRoles",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#manageRoles",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "get",
    "name": "manageChannels",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#manageChannels",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "get",
    "name": "kickMembers",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#kickMembers",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "get",
    "name": "banMembers",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#banMembers",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "get",
    "name": "createInvite",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#createInvite",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "get",
    "name": "changeNickname",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#changeNickname",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "get",
    "name": "manageNicknames",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#manageNicknames",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "get",
    "name": "manageEmojis",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#manageEmojis",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "get",
    "name": "manageWebhooks",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#manageWebhooks",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "get",
    "name": "readMessages",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#readMessages",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "get",
    "name": "sendTTSMessages",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#sendTTSMessages",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "get",
    "name": "embedLinks",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#embedLinks",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "get",
    "name": "readMessageHistory",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#readMessageHistory",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "get",
    "name": "useExternalEmojis",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#useExternalEmojis",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "get",
    "name": "sendMessages",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#sendMessages",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "get",
    "name": "manageMessages",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#manageMessages",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "get",
    "name": "attachFiles",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#attachFiles",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "get",
    "name": "mentionEveryone",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#mentionEveryone",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "get",
    "name": "addReactions",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#addReactions",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "get",
    "name": "viewChannel",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#viewChannel",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "get",
    "name": "connect",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#connect",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "get",
    "name": "muteMembers",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#muteMembers",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "get",
    "name": "moveMembers",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#moveMembers",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "get",
    "name": "speak",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#speak",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "get",
    "name": "deafenMembers",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#deafenMembers",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "get",
    "name": "useVoiceActivity",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#useVoiceActivity",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "set",
    "name": "administrator",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#administrator",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true
  },
  {
    "__docId__": 311,
    "kind": "set",
    "name": "viewAuditLog",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#viewAuditLog",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true
  },
  {
    "__docId__": 312,
    "kind": "set",
    "name": "manageServer",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#manageServer",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true
  },
  {
    "__docId__": 313,
    "kind": "set",
    "name": "manageRoles",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#manageRoles",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true
  },
  {
    "__docId__": 314,
    "kind": "set",
    "name": "manageChannels",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#manageChannels",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true
  },
  {
    "__docId__": 315,
    "kind": "set",
    "name": "kickMembers",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#kickMembers",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true
  },
  {
    "__docId__": 316,
    "kind": "set",
    "name": "banMembers",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#banMembers",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true
  },
  {
    "__docId__": 317,
    "kind": "set",
    "name": "createInvite",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#createInvite",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true
  },
  {
    "__docId__": 318,
    "kind": "set",
    "name": "changeNickname",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#changeNickname",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true
  },
  {
    "__docId__": 319,
    "kind": "set",
    "name": "manageNicknames",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#manageNicknames",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true
  },
  {
    "__docId__": 320,
    "kind": "set",
    "name": "manageEmojis",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#manageEmojis",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true
  },
  {
    "__docId__": 321,
    "kind": "set",
    "name": "manageWebhooks",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#manageWebhooks",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true
  },
  {
    "__docId__": 322,
    "kind": "set",
    "name": "readMessages",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#readMessages",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true
  },
  {
    "__docId__": 323,
    "kind": "set",
    "name": "sendTTSMessages",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#sendTTSMessages",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true
  },
  {
    "__docId__": 324,
    "kind": "set",
    "name": "embedLinks",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#embedLinks",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true
  },
  {
    "__docId__": 325,
    "kind": "set",
    "name": "readMessageHistory",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#readMessageHistory",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "undocument": true
  },
  {
    "__docId__": 326,
    "kind": "set",
    "name": "useExternalEmojis",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#useExternalEmojis",
    "access": "public",
    "description": null,
    "lineNumber": 136,
    "undocument": true
  },
  {
    "__docId__": 327,
    "kind": "set",
    "name": "sendMessages",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#sendMessages",
    "access": "public",
    "description": null,
    "lineNumber": 137,
    "undocument": true
  },
  {
    "__docId__": 328,
    "kind": "set",
    "name": "manageMessages",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#manageMessages",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true
  },
  {
    "__docId__": 329,
    "kind": "set",
    "name": "attachFiles",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#attachFiles",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true
  },
  {
    "__docId__": 330,
    "kind": "set",
    "name": "mentionEveryone",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#mentionEveryone",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true
  },
  {
    "__docId__": 331,
    "kind": "set",
    "name": "addReactions",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#addReactions",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true
  },
  {
    "__docId__": 332,
    "kind": "set",
    "name": "viewChannel",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#viewChannel",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true
  },
  {
    "__docId__": 333,
    "kind": "set",
    "name": "connect",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#connect",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true
  },
  {
    "__docId__": 334,
    "kind": "set",
    "name": "muteMembers",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#muteMembers",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true
  },
  {
    "__docId__": 335,
    "kind": "set",
    "name": "moveMembers",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#moveMembers",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true
  },
  {
    "__docId__": 336,
    "kind": "set",
    "name": "speak",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#speak",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true
  },
  {
    "__docId__": 337,
    "kind": "set",
    "name": "deafenMembers",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#deafenMembers",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true
  },
  {
    "__docId__": 338,
    "kind": "set",
    "name": "useVoiceActivity",
    "memberof": "src/modules/permissions.js~DiscordPermissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/permissions.js~DiscordPermissions#useVoiceActivity",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true
  },
  {
    "__docId__": 339,
    "kind": "file",
    "name": "src/modules/pluginsettings.js",
    "content": "/**\r\n * An object that makes generating settings panel 10x easier.\r\n * @module PluginSettings\r\n * @version 1.0.5\r\n */\r\n\r\nimport {DiscordClasses} from \"./DiscordClassModules\";\r\nimport {$, jQuery} from \"../vendor\";\r\nimport {SettingField} from \"../structs/settings/settingfield\";\r\n\r\nexport const css = require(\"../styles/settings.css\");\r\n\r\n/**\r\n * The setting field.\r\n */\r\nexport {SettingField};\r\n\r\n/** Attempts to retreive the accent color of native settings items in rgba format. */\r\nconst getAccentColor = function() {\r\n\tvar bg = $('<div class=\"ui-switch-item\"><div class=\"ui-switch-wrapper\"><input type=\"checkbox\" checked=\"checked\" class=\"ui-switch-checkbox\"><div class=\"ui-switch checked\">');\r\n\tbg.appendTo($(\"#bd-settingspane-container\"));\r\n\tvar bgColor = $(\".ui-switch.checked\").first().css(\"background-color\");\r\n\tvar afterColor = window.getComputedStyle(bg.find(\".ui-switch.checked\")[0], ':after').getPropertyValue('background-color'); // For beardy's theme\r\n\tbgColor = afterColor == \"rgba(0, 0, 0, 0)\" ? bgColor : afterColor;\r\n\tbg.remove();\r\n\treturn bgColor;\r\n};\r\n\r\nconst createInputContainer = function(...children) {\r\n\treturn $('<div class=\"plugin-setting-input-container\">').append(...children);\r\n};\r\n\r\n\r\n/** \r\n * Grouping of controls for easier management in settings panels.\r\n * @version 1.0.1\r\n */\r\nexport class ControlGroup {\r\n    /**\r\n     * \r\n     * @constructor\r\n     * @param {string} groupName - title for the group of settings\r\n     * @param {callback} callback - callback called on settings changed\r\n     * @param {object} options - additional options for the group\r\n     * @param {boolean} [options.collapsible=true] - determines if the group should be collapsible\r\n     * @param {boolean} [options.shown=false] - determines if the group should be expanded by default\r\n     */\r\n\tconstructor(groupName, callback, options = {}) {\r\n\t\tconst {collapsible = true, shown = false} = options;\r\n\t\tthis.group = $(\"<div>\").addClass(\"plugin-control-group\").css(\"margin-top\", \"15px\");\r\n\t\tvar collapsed = shown || !collapsible ? '' : ' collapsed';\r\n\t\tvar label = $('<h2>').html('<span class=\"button-collapse' + collapsed + '\" style=\"\"></span> ' + groupName);\r\n\t\tlabel.attr(\"class\", `${DiscordClasses.SettingsMetaClasses.h5} ${DiscordClasses.SettingsMetaClasses.defaultMarginh5}`);\r\n\t\tthis.group.append(label);\r\n\t\tthis.controls = $('<div class=\"plugin-controls collapsible' + collapsed + '\">');\r\n\t\tthis.group.append(this.controls);\r\n\t\tif (collapsible) {\r\n\t\t\tlabel.on('click', (e) => {\r\n\t\t\t\tlet button = $(e.target).find('.button-collapse');\r\n\t\t\t\tlet wasCollapsed = button.hasClass('collapsed');\r\n\t\t\t\tthis.group.parent().find('.collapsible:not(.collapsed)').slideUp({duration: 300, easing: \"easeInSine\", complete: function() { $(this).addClass('collapsed'); }}); // .slideUp({duration: 300, easing: \"easeInSine\"})\r\n\t\t\t\tthis.group.parent().find('.button-collapse').addClass('collapsed');\r\n\t\t\t\tif (wasCollapsed) {\r\n\t\t\t\t\tthis.controls.slideDown({duration: 300, easing: \"easeInSine\"});\r\n\t\t\t\t\tthis.controls.removeClass('collapsed');\r\n\t\t\t\t\tbutton.removeClass('collapsed');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif (typeof callback != 'undefined') {\r\n\t\t\tthis.controls.on(\"change\", \"input\", callback);\r\n\t\t}\r\n\t}\r\n    \r\n    /** @returns {jQuery} jQuery node for the group. */\r\n\tgetElement() {return this.group;}\r\n    \r\n    /**\r\n     * \r\n     * @param {(...HTMLElement|...jQuery)} nodes - list of nodes to add to the group container \r\n     * @returns {ControlGroup} returns self for chaining\r\n     */\r\n\tappend(...nodes) {\r\n\t\tfor (var i = 0; i < nodes.length; i++) {\r\n\t\t\tif (nodes[i] instanceof jQuery || nodes[i] instanceof Element) this.controls.append(nodes[i]);\r\n\t\t\telse if (nodes[i] instanceof PluginSettings.SettingField) this.controls.append(nodes[i].getElement());\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n    \r\n    /**\r\n     * \r\n     * @param {(HTMLElement|jQuery)} node - node to attach the group to.\r\n     * @returns {ControlGroup} returns self for chaining\r\n     */\r\n\tappendTo(node) {\r\n\t\tthis.group.appendTo(node);\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\n/**\r\n * Callback for SettingField for change in input field.\r\n * @callback PluginSettings~settingsChanged\r\n * @param {*} value - new value of the input field\r\n */\r\n\r\n\r\n\r\n/** \r\n * Creates a simple textbox settings.\r\n * @version 1.0.0\r\n * @extends SettingField\r\n */\r\nexport class Textbox extends SettingField {\r\n    /**\r\n     * @constructor\r\n     * @param {string} label - title for the setting\r\n     * @param {string} help - description of the setting\r\n     * @param {string} value - default value of the setting\r\n     * @param {string} placeholder - placeholder text for when the textbox is empty\r\n     * @param {PluginSettings~settingsChanged} callback - callback fired on textbox change\r\n     * @param {object} options - additional options for the input field itself\r\n     */\r\n\tconstructor(label, help, value, placeholder, callback, options = {}) {\r\n\t\toptions.type = \"text\";\r\n\t\toptions.placeholder = placeholder;\r\n\t\toptions.value = value;\r\n\t\tsuper(label, help, options, callback);\r\n\t\tthis.input.addClass('plugin-input-text');\r\n\t}\r\n}\r\n\r\n/** \r\n * Creates a color picker using chromium's built in color picker\r\n * as a base. Input and output using hex strings.\r\n * @version 1.0.0\r\n * @extends SettingField\r\n */\r\nexport class ColorPicker extends SettingField {\r\n    /**\r\n     * @constructor\r\n     * @param {string} label - title for the setting\r\n     * @param {string} help - description of the setting\r\n     * @param {string} value - default value of the setting in hex format\r\n     * @param {PluginSettings~settingsChanged} callback - callback fired on color change\r\n     * @param {object} options - additional options for the input field itself\r\n     */\r\n\tconstructor(label, help, value, callback, options = {}) {\r\n\t\toptions.type = \"color\";\r\n\t\toptions.value = value;\r\n\t\tsuper(label, help, options, callback);\r\n\t\tthis.input.css(\"margin-left\", \"10px\");\r\n\t\tthis.input.addClass('plugin-input-color');\r\n\t\t\r\n\t\tvar settingLabel = $('<span class=\"plugin-setting-label\">').text(value);\r\n\t\t\r\n\t\tthis.input.on(\"input\", function() {\r\n\t\t\tsettingLabel.text($(this).val());\r\n\t\t});\r\n\t\t\r\n\t\tthis.setInputElement(createInputContainer(settingLabel, this.input));\r\n\t}\r\n}\r\n\r\n/** \r\n * Creates a slider where the user can select a single number from a predefined range.\r\n * @version 1.0.0\r\n * @extends SettingField\r\n */\r\nexport class Slider extends SettingField {\r\n    /**\r\n     * @constructor\r\n     * @param {string} settingLabel - title for the setting\r\n     * @param {string} help - description of the setting\r\n     * @param {number} min - minimum value allowed\r\n     * @param {number} max - maximum value allowed\r\n     * @param {number} step - granularity between values\r\n     * @param {number} value - default value of the setting\r\n     * @param {PluginSettings~settingsChanged} callback - callback fired on slider release\r\n     * @param {object} options - additional options for the input field itself\r\n     */\r\n\tconstructor(settingLabel, help, min, max, step, value, callback, options = {}) {\r\n\t\toptions.type = \"range\";\r\n\t\toptions.min = min;\r\n\t\toptions.max = max;\r\n\t\toptions.step = step;\r\n\t\toptions.value = parseFloat(value);\r\n\t\tsuper(settingLabel, help, options, callback);\r\n\t\tthis.value = parseFloat(value); this.min = min; this.max = max;\r\n\t\t\r\n\t\tthis.getValue = () => { return parseFloat(this.input.val()); };\r\n\t\t\r\n\t\tthis.accentColor = getAccentColor();\r\n\t\tthis.setBackground();\r\n\t\tthis.input.css(\"margin-left\", \"10px\").css(\"float\", \"right\");\r\n\t\tthis.input.addClass('plugin-input-range');\r\n\t\t\r\n\t\tthis.labelUnit = \"\";\r\n\t\tthis.label = $('<span class=\"plugin-setting-label\">').text(this.value + this.labelUnit);\r\n\t\t\r\n\t\tthis.input.on(\"input\", () => {\r\n\t\t\tthis.value = parseFloat(this.input.val());\r\n\t\t\tthis.label.text(this.value + this.labelUnit);\r\n\t\t\tthis.setBackground();\r\n\t\t});\r\n\t\t\r\n\t\tthis.setInputElement(createInputContainer(this.label, this.input));\r\n\t}\r\n\t\r\n\tgetPercent() { return ((this.value - this.min) / this.max) * 100; }\r\n\r\n\tsetBackground() {\r\n\t\tvar percent = this.getPercent();\r\n\t\tthis.input.css('background', 'linear-gradient(to right, ' + this.accentColor + ', ' + this.accentColor + ' ' + percent + '%, #72767d ' + percent + '%)');\r\n\t}\r\n\r\n    /**\r\n     * Adds a unit to the value label\r\n     * @param {string} unit - unit to add to the label (e.g. \"%\")\r\n     */\r\n\tsetLabelUnit(unit) {this.labelUnit = unit; this.label.text(this.value + this.labelUnit); return this;}\r\n}\r\n\r\n/** \r\n * Creates a checkbox in the style of a standard Discord switch.\r\n * @version 1.0.0\r\n * @extends SettingField\r\n */\r\nexport class Switch extends SettingField {\r\n    /**\r\n     * @constructor\r\n     * @param {string} label - title for the setting\r\n     * @param {string} help - description of the setting\r\n     * @param {boolean} isChecked - determines if the checkbox is checked by default\r\n     * @param {PluginSettings~settingsChanged} callback - callback fired on change\r\n     * @param {object} options - additional options for the input field itself\r\n     */\r\n\tconstructor(label, help, isChecked, callback, options = {}) {\r\n\t\toptions.type = \"checkbox\";\r\n\t\toptions.checked = isChecked;\r\n\t\tsuper(label, help, options, callback);\r\n\t\tthis.getValue = () => { return this.input.prop(\"checked\"); };\r\n\t\tthis.input.addClass(\"ui-switch-checkbox\");\r\n\t\tthis.input.addClass('plugin-input-checkbox');\r\n\r\n\t\tthis.input.on(\"change\", function() {\r\n\t\t\tif ($(this).prop(\"checked\")) switchDiv.addClass(\"checked\");\r\n\t\t\telse switchDiv.removeClass(\"checked\");\r\n\t\t});\r\n\t\t\r\n\t\tthis.checkboxWrap = $('<label class=\"ui-switch-wrapper ui-flex-child\" style=\"flex:0 0 auto;\">');\r\n\t\tthis.checkboxWrap.append(this.input);\r\n\t\tvar switchDiv = $('<div class=\"ui-switch\">');\r\n\t\tif (isChecked) switchDiv.addClass(\"checked\");\r\n\t\tthis.checkboxWrap.append(switchDiv);\r\n\t\tthis.checkboxWrap.css(\"right\", \"0px\");\r\n\r\n\t\tthis.setInputElement(this.checkboxWrap);\r\n\t}\r\n}\r\n\r\n/** \r\n * Creates a PillButton where the left and right side have their own label.\r\n * It is important to note that the checked property here follows the same\r\n * standard as a normal Discord switch. That is to say if the value is true\r\n * then right side was selected, if the value is false then the left side \r\n * was selected.\r\n * @version 1.0.1\r\n * @extends Switch\r\n */\r\nexport class PillButton extends Switch {\r\n    /**\r\n     * @constructor\r\n     * @param {string} label - title for the setting\r\n     * @param {string} help - description of the setting\r\n     * @param {string} leftLabel - label for the option on the left\r\n     * @param {string} rightLabel - label for the option on the right\r\n     * @param {boolean} isRightSelected - determines if the right side is selected. (true = right side, false = left side)\r\n     * @param {PluginSettings~settingsChanged} callback - callback fired on switch change (true = right side, false = left side)\r\n     * @param {object} options - additional options for the input field itself\r\n     */\r\n\tconstructor(label, help, leftLabel, rightLabel, isRightSelected, callback, options = {}) {\r\n\t\tsuper(label, help, isRightSelected, callback, options);\r\n\t\t\r\n\t\tthis.checkboxWrap.css(\"margin\",\"0 9px\");\r\n\t\tthis.input.addClass('plugin-input-pill');\r\n\t\t\r\n\t\tvar labelLeft = $('<span class=\"plugin-setting-label left\">');\r\n\t\tlabelLeft.text(leftLabel);\r\n\t\tvar labelRight = $('<span class=\"plugin-setting-label right\">');\r\n\t\tlabelRight.text(rightLabel);\r\n\t\t\r\n\t\tvar accent = getAccentColor();\r\n\t\t\r\n\t\tif (isRightSelected) labelRight.css(\"color\", accent);\r\n\t\telse labelLeft.css(\"color\", accent);\r\n\t\t\r\n\t\tthis.checkboxWrap.find('input').on(\"click\", function() {\r\n\t\t\tvar checked = $(this).prop(\"checked\");\r\n\t\t\tif (checked) {\r\n\t\t\t\tlabelRight.css(\"color\", accent);\r\n\t\t\t\tlabelLeft.css(\"color\", \"\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelLeft.css(\"color\", accent);\r\n\t\t\t\tlabelRight.css(\"color\", \"\");\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tthis.setInputElement(createInputContainer(labelLeft, this.checkboxWrap.detach(), labelRight));\r\n\t}\r\n}",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/pluginsettings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 340,
    "kind": "variable",
    "name": "css",
    "memberof": "src/modules/pluginsettings.js",
    "static": true,
    "longname": "src/modules/pluginsettings.js~css",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/pluginsettings.js",
    "importStyle": "{css}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "function",
    "name": "getAccentColor",
    "memberof": "src/modules/pluginsettings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/pluginsettings.js~getAccentColor",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/pluginsettings.js",
    "importStyle": null,
    "description": "Attempts to retreive the accent color of native settings items in rgba format.",
    "lineNumber": 19,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 342,
    "kind": "function",
    "name": "createInputContainer",
    "memberof": "src/modules/pluginsettings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/pluginsettings.js~createInputContainer",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/pluginsettings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "children",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 343,
    "kind": "class",
    "name": "ControlGroup",
    "memberof": "src/modules/pluginsettings.js",
    "static": true,
    "longname": "src/modules/pluginsettings.js~ControlGroup",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/pluginsettings.js",
    "importStyle": "{ControlGroup}",
    "description": "Grouping of controls for easier management in settings panels.",
    "lineNumber": 38,
    "version": "1.0.1",
    "interface": false
  },
  {
    "__docId__": 344,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/pluginsettings.js~ControlGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/pluginsettings.js~ControlGroup#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "groupName",
        "description": "title for the group of settings"
      },
      {
        "nullable": null,
        "types": [
          "callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback called on settings changed"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "additional options for the group"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.collapsible",
        "description": "determines if the group should be collapsible"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.shown",
        "description": "determines if the group should be expanded by default"
      }
    ]
  },
  {
    "__docId__": 345,
    "kind": "member",
    "name": "group",
    "memberof": "src/modules/pluginsettings.js~ControlGroup",
    "static": false,
    "longname": "src/modules/pluginsettings.js~ControlGroup#group",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "member",
    "name": "controls",
    "memberof": "src/modules/pluginsettings.js~ControlGroup",
    "static": false,
    "longname": "src/modules/pluginsettings.js~ControlGroup#controls",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "getElement",
    "memberof": "src/modules/pluginsettings.js~ControlGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/pluginsettings.js~ControlGroup#getElement",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jQuery} jQuery node for the group."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jQuery"
      ],
      "spread": false,
      "description": "jQuery node for the group."
    },
    "params": []
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "append",
    "memberof": "src/modules/pluginsettings.js~ControlGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/pluginsettings.js~ControlGroup#append",
    "access": "public",
    "description": "",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ControlGroup} returns self for chaining"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...HTMLElement",
          "...jQuery"
        ],
        "spread": true,
        "optional": false,
        "name": "nodes",
        "description": "list of nodes to add to the group container"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ControlGroup"
      ],
      "spread": false,
      "description": "returns self for chaining"
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "appendTo",
    "memberof": "src/modules/pluginsettings.js~ControlGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/pluginsettings.js~ControlGroup#appendTo",
    "access": "public",
    "description": "",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ControlGroup} returns self for chaining"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement",
          "jQuery"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "node to attach the group to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ControlGroup"
      ],
      "spread": false,
      "description": "returns self for chaining"
    }
  },
  {
    "__docId__": 350,
    "kind": "class",
    "name": "Textbox",
    "memberof": "src/modules/pluginsettings.js",
    "static": true,
    "longname": "src/modules/pluginsettings.js~Textbox",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/pluginsettings.js",
    "importStyle": "{Textbox}",
    "description": "Creates a simple textbox settings.",
    "lineNumber": 116,
    "version": "1.0.0",
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 351,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/pluginsettings.js~Textbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/pluginsettings.js~Textbox#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 126,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "title for the setting"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "help",
        "description": "description of the setting"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "default value of the setting"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "placeholder",
        "description": "placeholder text for when the textbox is empty"
      },
      {
        "nullable": null,
        "types": [
          "PluginSettings~settingsChanged"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback fired on textbox change"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "additional options for the input field itself"
      }
    ]
  },
  {
    "__docId__": 352,
    "kind": "class",
    "name": "ColorPicker",
    "memberof": "src/modules/pluginsettings.js",
    "static": true,
    "longname": "src/modules/pluginsettings.js~ColorPicker",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/pluginsettings.js",
    "importStyle": "{ColorPicker}",
    "description": "Creates a color picker using chromium's built in color picker\nas a base. Input and output using hex strings.",
    "lineNumber": 141,
    "version": "1.0.0",
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 353,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/pluginsettings.js~ColorPicker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/pluginsettings.js~ColorPicker#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 150,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "title for the setting"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "help",
        "description": "description of the setting"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "default value of the setting in hex format"
      },
      {
        "nullable": null,
        "types": [
          "PluginSettings~settingsChanged"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback fired on color change"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "additional options for the input field itself"
      }
    ]
  },
  {
    "__docId__": 354,
    "kind": "class",
    "name": "Slider",
    "memberof": "src/modules/pluginsettings.js",
    "static": true,
    "longname": "src/modules/pluginsettings.js~Slider",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/pluginsettings.js",
    "importStyle": "{Slider}",
    "description": "Creates a slider where the user can select a single number from a predefined range.",
    "lineNumber": 172,
    "version": "1.0.0",
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 355,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/pluginsettings.js~Slider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/pluginsettings.js~Slider#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "settingLabel",
        "description": "title for the setting"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "help",
        "description": "description of the setting"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "minimum value allowed"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "maximum value allowed"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "step",
        "description": "granularity between values"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "default value of the setting"
      },
      {
        "nullable": null,
        "types": [
          "PluginSettings~settingsChanged"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback fired on slider release"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "additional options for the input field itself"
      }
    ]
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "value",
    "memberof": "src/modules/pluginsettings.js~Slider",
    "static": false,
    "longname": "src/modules/pluginsettings.js~Slider#value",
    "access": "public",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "member",
    "name": "min",
    "memberof": "src/modules/pluginsettings.js~Slider",
    "static": false,
    "longname": "src/modules/pluginsettings.js~Slider#min",
    "access": "public",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "member",
    "name": "max",
    "memberof": "src/modules/pluginsettings.js~Slider",
    "static": false,
    "longname": "src/modules/pluginsettings.js~Slider#max",
    "access": "public",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 359,
    "kind": "member",
    "name": "getValue",
    "memberof": "src/modules/pluginsettings.js~Slider",
    "static": false,
    "longname": "src/modules/pluginsettings.js~Slider#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 360,
    "kind": "member",
    "name": "accentColor",
    "memberof": "src/modules/pluginsettings.js~Slider",
    "static": false,
    "longname": "src/modules/pluginsettings.js~Slider#accentColor",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "labelUnit",
    "memberof": "src/modules/pluginsettings.js~Slider",
    "static": false,
    "longname": "src/modules/pluginsettings.js~Slider#labelUnit",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "label",
    "memberof": "src/modules/pluginsettings.js~Slider",
    "static": false,
    "longname": "src/modules/pluginsettings.js~Slider#label",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "getPercent",
    "memberof": "src/modules/pluginsettings.js~Slider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/pluginsettings.js~Slider#getPercent",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "setBackground",
    "memberof": "src/modules/pluginsettings.js~Slider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/pluginsettings.js~Slider#setBackground",
    "access": "public",
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "setLabelUnit",
    "memberof": "src/modules/pluginsettings.js~Slider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/pluginsettings.js~Slider#setLabelUnit",
    "access": "public",
    "description": "Adds a unit to the value label",
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "unit to add to the label (e.g. \"%\")"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "class",
    "name": "Switch",
    "memberof": "src/modules/pluginsettings.js",
    "static": true,
    "longname": "src/modules/pluginsettings.js~Switch",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/pluginsettings.js",
    "importStyle": "{Switch}",
    "description": "Creates a checkbox in the style of a standard Discord switch.",
    "lineNumber": 231,
    "version": "1.0.0",
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 369,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/pluginsettings.js~Switch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/pluginsettings.js~Switch#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 240,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "title for the setting"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "help",
        "description": "description of the setting"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isChecked",
        "description": "determines if the checkbox is checked by default"
      },
      {
        "nullable": null,
        "types": [
          "PluginSettings~settingsChanged"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback fired on change"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "additional options for the input field itself"
      }
    ]
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "getValue",
    "memberof": "src/modules/pluginsettings.js~Switch",
    "static": false,
    "longname": "src/modules/pluginsettings.js~Switch#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "member",
    "name": "checkboxWrap",
    "memberof": "src/modules/pluginsettings.js~Switch",
    "static": false,
    "longname": "src/modules/pluginsettings.js~Switch#checkboxWrap",
    "access": "public",
    "description": null,
    "lineNumber": 253,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 372,
    "kind": "class",
    "name": "PillButton",
    "memberof": "src/modules/pluginsettings.js",
    "static": true,
    "longname": "src/modules/pluginsettings.js~PillButton",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/pluginsettings.js",
    "importStyle": "{PillButton}",
    "description": "Creates a PillButton where the left and right side have their own label.\nIt is important to note that the checked property here follows the same\nstandard as a normal Discord switch. That is to say if the value is true\nthen right side was selected, if the value is false then the left side \nwas selected.",
    "lineNumber": 273,
    "version": "1.0.1",
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 373,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/pluginsettings.js~PillButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/pluginsettings.js~PillButton#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 284,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "title for the setting"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "help",
        "description": "description of the setting"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "leftLabel",
        "description": "label for the option on the left"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "rightLabel",
        "description": "label for the option on the right"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isRightSelected",
        "description": "determines if the right side is selected. (true = right side, false = left side)"
      },
      {
        "nullable": null,
        "types": [
          "PluginSettings~settingsChanged"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback fired on switch change (true = right side, false = left side)"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "additional options for the input field itself"
      }
    ]
  },
  {
    "__docId__": 374,
    "kind": "file",
    "name": "src/modules/PluginUpdateUtilities.js",
    "content": "import PluginUtilities from \"./PluginUtilities\";\r\nimport DiscordModules from \"./DiscordModules\";\r\nimport Logger from \"./logger\";\r\nimport {$} from \"../vendor\";\r\n\r\n/**\r\n * Functions that check for and update existing plugins.\r\n * @module PluginUpdateUtilities\r\n * @version 0.0.3\r\n */\r\nvar PluginUpdateUtilities = {};\r\n\r\n/**\r\n * Creates the update button found in the plugins page of BetterDiscord\r\n * settings. Returned button will already have listeners to create the tooltip.\r\n * @returns {HTMLElement} check for update button\r\n */\r\nPluginUpdateUtilities.createUpdateButton = function() {\r\n\tvar updateButton = document.createElement(\"button\");\r\n\tupdateButton.className = \"bd-pfbtn bd-updatebtn\";\r\n\tupdateButton.innerText = \"Check for Updates\";\r\n\tupdateButton.style.left = \"220px\";\r\n\tupdateButton.onclick = function () {\r\n\t\twindow.PluginUpdates.checkAll();\r\n\t};\r\n\tlet tooltip = new PluginTooltip.Tooltip($(updateButton), \"Checks for updates of plugins that support this feature. Right-click for a list.\");\r\n\tupdateButton.oncontextmenu = function () {\r\n\t\tif (window.PluginUpdates && window.PluginUpdates.plugins) {\r\n\t\t\tvar list = [];\r\n\t\t\tfor (var plugin in window.PluginUpdates.plugins) {\r\n\t\t\t\tlist.push(window.PluginUpdates.plugins[plugin].name);\r\n\t\t\t}\r\n\t\t\ttooltip.tooltip.detach();\r\n\t\t\ttooltip.tooltip.text(list.join(\", \"));\r\n\t\t\ttooltip.show();\r\n\t\t\tupdateButton.onmouseout = function() { tooltip.tooltip.text(tooltip.tip); };\r\n\t\t}\r\n\t};\r\n\treturn updateButton;\r\n};\r\n\r\nPluginUpdateUtilities.getCSS = function () {\r\n\treturn require(\"../styles/updates.css\");\r\n};\r\n\r\n/**\r\n * Will check for updates and automatically show or remove the update notice\r\n * bar based on the internal result. Better not to call this directly and to\r\n * instead use {@link PluginUtilities.checkForUpdate}.\r\n * @param {string} pluginName - name of the plugin to check\r\n * @param {string} updateLink - link to the raw text version of the plugin\r\n */\r\nPluginUpdateUtilities.checkUpdate = function(pluginName, updateLink) {\r\n\tlet request = require(\"request\");\r\n\trequest(updateLink, (error, response, result) => {\r\n\t\tif (error) return;\r\n\t\tvar remoteVersion = result.match(/['\"][0-9]+\\.[0-9]+\\.[0-9]+['\"]/i);\r\n\t\tif (!remoteVersion) return;\r\n\t\tremoteVersion = remoteVersion.toString().replace(/['\"]/g, \"\");\r\n\t\tvar ver = remoteVersion.split(\".\").map((e) => {return parseInt(e);});\r\n\t\tvar lver = window.PluginUpdates.plugins[updateLink].version.split(\".\").map((e) => {return parseInt(e);});\r\n\t\tvar hasUpdate = false;\r\n\t\tif (ver[0] > lver[0]) hasUpdate = true;\r\n\t\telse if (ver[0] == lver[0] && ver[1] > lver[1]) hasUpdate = true;\r\n\t\telse if (ver[0] == lver[0] && ver[1] == lver[1] && ver[2] > lver[2]) hasUpdate = true;\r\n\t\telse hasUpdate = false;\r\n\t\tif (hasUpdate) PluginUpdateUtilities.showUpdateNotice(pluginName, updateLink);\r\n\t\telse PluginUpdateUtilities.removeUpdateNotice(pluginName);\r\n\t});\r\n};\r\n\r\n/**\r\n * Will show the update notice top bar seen in Discord. Better not to call\r\n * this directly and to instead use {@link PluginUtilities.checkForUpdate}.\r\n * @param {string} pluginName - name of the plugin\r\n * @param {string} updateLink - link to the raw text version of the plugin\r\n */\r\nPluginUpdateUtilities.showUpdateNotice = function(pluginName, updateLink) {\r\n\tif (!$('#pluginNotice').length)  {\r\n\t\tlet noticeElement = `<div class=\"${DiscordModules.NoticeBarClasses.notice} ${DiscordModules.NoticeBarClasses.noticeInfo}\" id=\"pluginNotice\"><div class=\"${DiscordModules.NoticeBarClasses.dismiss}\" id=\"pluginNoticeDismiss\"></div><span class=\"notice-message\">The following plugins have updates:</span>&nbsp;&nbsp;<strong id=\"outdatedPlugins\"></strong></div>`;\r\n\t\t// $('.app .guilds-wrapper + div > div:first > div:first').append(noticeElement);\r\n\t\t$('.app.flex-vertical').children().first().before(noticeElement);\r\n        $('.win-buttons').addClass(\"win-buttons-notice\");\r\n\t\t$('#pluginNoticeDismiss').on('click', () => {\r\n\t\t\t$('.win-buttons').animate({top: 0}, 400, \"swing\", () => { $('.win-buttons').css(\"top\",\"\").removeClass(\"win-buttons-notice\"); });\r\n\t\t\t$('#pluginNotice').slideUp({complete: () => { $('#pluginNotice').remove(); }});\r\n\t\t});\r\n\t}\r\n\tlet pluginNoticeID = pluginName + '-notice';\r\n\tif (!$('#' + pluginNoticeID).length) {\r\n\t\tlet pluginNoticeElement = $('<span id=\"' + pluginNoticeID + '\">');\r\n        pluginNoticeElement.text(pluginName);\r\n        pluginNoticeElement.on('click', () => {\r\n            PluginUpdateUtilities.downloadPlugin(pluginName, updateLink);\r\n        });\r\n\t\tif ($('#outdatedPlugins').children('span').length) $('#outdatedPlugins').append(\"<span class='separator'>, </span>\");\r\n\t\t$('#outdatedPlugins').append(pluginNoticeElement);\r\n\t}\r\n};\r\n\r\n/**\r\n * Will download the latest version and replace the the old plugin version.\r\n * Will also update the button in the update bar depending on if the user\r\n * is using RestartNoMore plugin by square {@link https://github.com/Inve1951/BetterDiscordStuff/blob/master/plugins/restartNoMore.plugin.js}\r\n * @param {string} pluginName - name of the plugin to download\r\n * @param {string} updateLink - link to the raw text version of the plugin\r\n */\r\nPluginUpdateUtilities.downloadPlugin = function(pluginName, updateLink) {\r\n    let request = require(\"request\");\r\n    let fileSystem = require(\"fs\");\r\n    let path = require(\"path\");\r\n    request(updateLink, (error, response, body) => {\r\n        if (error) return Logger.warn(\"PluginUpdates\", \"Unable to get update for \" + pluginName);\r\n        let remoteVersion = body.match(/['\"][0-9]+\\.[0-9]+\\.[0-9]+['\"]/i);\r\n        remoteVersion = remoteVersion.toString().replace(/['\"]/g, \"\");\r\n        let filename = updateLink.split('/');\r\n        filename = filename[filename.length - 1];\r\n        var file = path.join(PluginUtilities.getPluginsFolder(), filename);\r\n        fileSystem.writeFileSync(file, body);\r\n\t\tPluginUtilities.showToast(`${pluginName} ${window.PluginUpdates.plugins[updateLink].version} has been replaced by ${pluginName} ${remoteVersion}`);\r\n\t\tlet oldRNM = window.bdplugins[\"Restart-No-More\"] && window.pluginCookie[\"Restart-No-More\"];\r\n\t\tlet newRNM = window.bdplugins[\"Restart No More\"] && window.pluginCookie[\"Restart No More\"];\r\n        if (!(oldRNM || newRNM)) {\r\n            if (!window.PluginUpdates.downloaded) {\r\n                window.PluginUpdates.downloaded = [];\r\n                let button = $(`<button class=\"btn btn-reload ${DiscordModules.NoticeBarClasses.btn} ${DiscordModules.NoticeBarClasses.button}\">Reload</button>`);\r\n                button.on('click', (e) => {\r\n                    e.preventDefault();\r\n                    window.location.reload(false);\r\n                });\r\n                var tooltip = document.createElement(\"div\");\r\n                tooltip.className = \"tooltip tooltip-bottom tooltip-black\";\r\n                tooltip.style.maxWidth = \"400px\";\r\n                button.on('mouseenter', () => {\r\n                    document.querySelector(\".tooltips\").appendChild(tooltip);\r\n                    tooltip.innerText = window.PluginUpdates.downloaded.join(\", \");\r\n                    tooltip.style.left = button.offset().left + (button.outerWidth() / 2) - ($(tooltip).outerWidth() / 2) + \"px\";\r\n                    tooltip.style.top = button.offset().top + button.outerHeight() + \"px\";\r\n                });\r\n    \r\n                button.on('mouseleave', () => {\r\n                    tooltip.remove();\r\n                });\r\n    \r\n                button.appendTo($('#pluginNotice'));\r\n            }\r\n            window.PluginUpdates.plugins[updateLink].version = remoteVersion;\r\n            window.PluginUpdates.downloaded.push(pluginName);\r\n            PluginUpdateUtilities.removeUpdateNotice(pluginName);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Will remove the plugin from the update notice top bar seen in Discord.\r\n * Better not to call this directly and to instead use {@link PluginUtilities.checkForUpdate}.\r\n * @param {string} pluginName - name of the plugin\r\n */\r\nPluginUpdateUtilities.removeUpdateNotice = function(pluginName) {\r\n\tlet notice = $('#' + pluginName + '-notice');\r\n\tif (notice.length) {\r\n\t\tif (notice.next('.separator').length) notice.next().remove();\r\n\t\telse if (notice.prev('.separator').length) notice.prev().remove();\r\n\t\tnotice.remove();\r\n    }\r\n\r\n\tif (!$('#outdatedPlugins').children('span').length && !$('#pluginNotice .btn-reload').length) {\r\n        $('#pluginNoticeDismiss').click();\r\n    } \r\n    else if (!$('#outdatedPlugins').children('span').length && $('#pluginNotice .btn-reload').length) {\r\n        $('#pluginNotice .notice-message').text(\"To finish updating you need to reload.\");\r\n    }\r\n};\r\n\r\nexport default PluginUpdateUtilities;",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/PluginUpdateUtilities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 375,
    "kind": "function",
    "name": "createUpdateButton",
    "memberof": "src/modules/PluginUpdateUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUpdateUtilities.js~createUpdateButton",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUpdateUtilities.js",
    "importStyle": null,
    "description": "Creates the update button found in the plugins page of BetterDiscord\nsettings. Returned button will already have listeners to create the tooltip.",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HTMLElement} check for update button"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": "check for update button"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 376,
    "kind": "function",
    "name": "getCSS",
    "memberof": "src/modules/PluginUpdateUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUpdateUtilities.js~getCSS",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUpdateUtilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 377,
    "kind": "function",
    "name": "checkUpdate",
    "memberof": "src/modules/PluginUpdateUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUpdateUtilities.js~checkUpdate",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUpdateUtilities.js",
    "importStyle": null,
    "description": "Will check for updates and automatically show or remove the update notice\nbar based on the internal result. Better not to call this directly and to\ninstead use {@link PluginUtilities.checkForUpdate}.",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pluginName",
        "description": "name of the plugin to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "updateLink",
        "description": "link to the raw text version of the plugin"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 378,
    "kind": "function",
    "name": "showUpdateNotice",
    "memberof": "src/modules/PluginUpdateUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUpdateUtilities.js~showUpdateNotice",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUpdateUtilities.js",
    "importStyle": null,
    "description": "Will show the update notice top bar seen in Discord. Better not to call\nthis directly and to instead use {@link PluginUtilities.checkForUpdate}.",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pluginName",
        "description": "name of the plugin"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "updateLink",
        "description": "link to the raw text version of the plugin"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 379,
    "kind": "function",
    "name": "downloadPlugin",
    "memberof": "src/modules/PluginUpdateUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUpdateUtilities.js~downloadPlugin",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUpdateUtilities.js",
    "importStyle": null,
    "description": "Will download the latest version and replace the the old plugin version.\nWill also update the button in the update bar depending on if the user\nis using RestartNoMore plugin by square {@link https://github.com/Inve1951/BetterDiscordStuff/blob/master/plugins/restartNoMore.plugin.js}",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pluginName",
        "description": "name of the plugin to download"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "updateLink",
        "description": "link to the raw text version of the plugin"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 380,
    "kind": "function",
    "name": "removeUpdateNotice",
    "memberof": "src/modules/PluginUpdateUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUpdateUtilities.js~removeUpdateNotice",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUpdateUtilities.js",
    "importStyle": null,
    "description": "Will remove the plugin from the update notice top bar seen in Discord.\nBetter not to call this directly and to instead use {@link PluginUtilities.checkForUpdate}.",
    "lineNumber": 159,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pluginName",
        "description": "name of the plugin"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 381,
    "kind": "variable",
    "name": "PluginUpdateUtilities",
    "memberof": "src/modules/PluginUpdateUtilities.js",
    "static": true,
    "longname": "src/modules/PluginUpdateUtilities.js~PluginUpdateUtilities",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/PluginUpdateUtilities.js",
    "importStyle": "PluginUpdateUtilities",
    "description": "Functions that check for and update existing plugins.",
    "lineNumber": 11,
    "version": "0.0.3",
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "PluginUpdateUtilities"
      }
    ],
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "file",
    "name": "src/modules/PluginUtilities.js",
    "content": "import Logger from \"./Logger\";\r\nimport PluginUpdateUtilities from \"./PluginUpdateUtilities\";\r\nimport DiscordModules from \"./DiscordModules\";\r\nimport {$} from \"../vendor\";\r\n\r\n/**\r\n * A series of useful functions for BetterDiscord plugins.\r\n * @module PluginUtilities\r\n * @version 0.2.3\r\n */\r\nvar PluginUtilities = {};\r\n\r\n/**\r\n * Wraps the method in a `try..catch` block.\r\n * @param {callable} method - method to wrap\r\n * @param {string} description - description of method\r\n * @returns {callable} wrapped version of method\r\n * @deprecated This has been moved to {@link module:GeneralUtilities}.\r\n */\r\nPluginUtilities.suppressErrors = (method, description) => (...params) => {\r\n\ttry { return method(...params);\t}\r\n\tcatch (e) { Logger.err(\"Suppression\", \"Error occurred in \" + description, e); }\r\n};\r\n\r\nPluginUtilities.parseOnSwitchURL = function(url) {\r\n\tlet urlSplit = url.split(\"/\");\r\n\tlet type = urlSplit[3];\r\n\tlet server = urlSplit[4];\r\n\tlet channel = urlSplit[5];\r\n\treturn {type, server, channel};\r\n};\r\n\r\n/** \r\n * Gets the server the user is currently in.\r\n * @returns {object} returns Discord's internal object representing the server\r\n*/\r\nPluginUtilities.getCurrentServer = function() {\r\n\treturn DiscordModules.GuildStore.getGuild(DiscordModules.SelectedGuildStore.getGuildId());\r\n};\r\n\r\n/** @returns if the user is in a server */\r\nPluginUtilities.isServer = function() { return PluginUtilities.getCurrentServer() !== null; };\r\n\r\n/** \r\n * Gets the current user.\r\n * @returns {object} returns Discord's internal object representing the user\r\n*/\r\nPluginUtilities.getCurrentUser = function() {\r\n\treturn DiscordModules.UserStore.getCurrentUser();\r\n};\r\n\r\n/** \r\n * Gets the list of members in the current server.\r\n * @returns {array} returns an array of Discord's internal object representing the members.\r\n*/\r\nPluginUtilities.getAllUsers = function() {\r\n\treturn DiscordModules.GuildMemberStore.getMembers(this.getCurrentServer().id);\r\n};\r\n\r\n/** \r\n * Loads data through BetterDiscord's API.\r\n * @param {string} name - name for the file (usually plugin name)\r\n * @param {string} key - which key the data is saved under\r\n * @param {object} defaultData - default data to populate the object with\r\n * @returns {object} the combined saved and default data\r\n*/\r\nPluginUtilities.loadData = function(name, key, defaultData) {\r\n\ttry { return $.extend(true, defaultData ? defaultData : {}, bdPluginStorage.get(name, key)); }\r\n\tcatch (err) { Logger.err(name, \"Unable to load data: \", err); }\r\n};\r\n\r\n/** \r\n * Saves data through BetterDiscord's API.\r\n * @param {string} name - name for the file (usually plugin name)\r\n * @param {string} key - which key the data should be saved under\r\n * @param {object} data - data to save\r\n*/\r\nPluginUtilities.saveData = function(name, key, data) {\r\n\ttry { bdPluginStorage.set(name, key, data); }\r\n\tcatch (err) { Logger.err(name, \"Unable to save data: \", err); }\r\n};\r\n\r\n/** \r\n * Loads settings through BetterDiscord's API.\r\n * @param {string} name - name for the file (usually plugin name)\r\n * @param {object} defaultData - default data to populate the object with\r\n * @returns {object} the combined saved and default settings\r\n*/\r\nPluginUtilities.loadSettings = function(name, defaultSettings) {\r\n\treturn PluginUtilities.loadData(name, \"settings\", defaultSettings);\r\n};\r\n\r\n/** \r\n * Saves settings through BetterDiscord's API.\r\n * @param {string} name - name for the file (usually plugin name)\r\n * @param {object} data - settings to save\r\n*/\r\nPluginUtilities.saveSettings = function(name, data) {\r\n\tPluginUtilities.saveData(name, \"settings\", data);\r\n};\r\n\r\n/**\r\n * Checks for updates for the specified plugin at the specified link. The final\r\n * parameter should link to the raw text of the plugin and will compare semantic\r\n * versions.\r\n * @param {string} pluginName - name of the plugin\r\n * @param {string} currentVersion - current version (semantic versioning only)\r\n * @param {string} updateURL - url to check for update\r\n */\r\nPluginUtilities.checkForUpdate = function(pluginName, currentVersion, updateURL) {\r\n\tlet updateLink = \"https://raw.githubusercontent.com/rauenzi/BetterDiscordAddons/master/Plugins/\" + pluginName + \"/\" + pluginName + \".plugin.js\";\r\n\tif (updateURL) updateLink = updateURL;\r\n\t\r\n\tif (typeof window.PluginUpdates === \"undefined\") window.PluginUpdates = {plugins:{}};\r\n\twindow.PluginUpdates.plugins[updateLink] = {name: pluginName, raw: updateLink, version: currentVersion};\r\n\r\n\tPluginUpdateUtilities.checkUpdate(pluginName, updateLink);\r\n\t\r\n\tif (typeof window.PluginUpdates.interval === \"undefined\") {\r\n\t\twindow.PluginUpdates.interval = setInterval(() => {\r\n\t\t\twindow.PluginUpdates.checkAll();\r\n\t\t}, 7200000);\r\n\t}\r\n\r\n\tif (typeof window.PluginUpdates.checkAll === \"undefined\") {\r\n\t\twindow.PluginUpdates.checkAll = function() {\r\n\t\t\tfor (let key in this.plugins) {\r\n\t\t\t\tlet plugin = this.plugins[key];\r\n\t\t\t\tPluginUpdateUtilities.checkUpdate(plugin.name, plugin.raw);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tif (typeof window.PluginUpdates.observer === \"undefined\") {\t\t\r\n\t\twindow.PluginUpdates.observer = new MutationObserver((changes) => {\r\n\t\t\tchanges.forEach(\r\n\t\t\t\t(change) => {\r\n\t\t\t\t\tif (change.addedNodes) {\r\n\t\t\t\t\t\tchange.addedNodes.forEach((node) => {\r\n\t\t\t\t\t\t\tif (node && node.tagName && node.getAttribute(\"layer-id\") == \"user-settings\") {\r\n\t\t\t\t\t\t\t\tvar settingsObserver = new MutationObserver((changes2) => {\r\n\t\t\t\t\t\t\t\t\tchanges2.forEach(\r\n\t\t\t\t\t\t\t\t\t\t(change2) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif (change2.addedNodes) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tchange2.addedNodes.forEach((node2) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (!document.querySelector(\".bd-updatebtn\")) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (node2 && node2.tagName && node2.querySelector(\".bd-pfbtn\") && node2.querySelector(\"h2\") && node2.querySelector(\"h2\").innerText.toLowerCase() === \"plugins\") {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnode2.querySelector(\".bd-pfbtn\").parentElement.insertBefore(PluginUpdateUtilities.createUpdateButton(), node2.querySelector(\".bd-pfbtn\").nextSibling);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tsettingsObserver.observe(node, {childList:true, subtree:true});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t});\r\n\t\twindow.PluginUpdates.observer.observe(document.querySelector(\".layers-3iHuyZ, .layers-20RVFW\"), {childList:true});\r\n\t}\r\n\t\r\n\tvar bdbutton = document.querySelector(\".bd-pfbtn\");\r\n\tif (bdbutton && bdbutton.parentElement.querySelector(\"h2\") && bdbutton.parentElement.querySelector(\"h2\").innerText.toLowerCase() === \"plugins\" && !bdbutton.parentElement.querySelector(\".bd-pfbtn.bd-updatebtn\")) {\r\n\t\tbdbutton.parentElement.insertBefore(PluginUpdateUtilities.createUpdateButton(), bdbutton.nextSibling);\r\n\t}\r\n};\r\n\r\nPluginUtilities.getToastCSS = function() {\r\n\treturn require(\"../styles/toasts.css\");\r\n};\r\n\r\n/**\r\n * This shows a toast similar to android towards the bottom of the screen.\r\n * \r\n * @param {string} content The string to show in the toast.\r\n * @param {object} options Options object. Optional parameter.\r\n * @param {string} options.type Changes the type of the toast stylistically and semantically. Choices: \"\", \"info\", \"success\", \"danger\"/\"error\", \"warning\"/\"warn\". Default: \"\"\r\n * @param {boolean} options.icon Determines whether the icon should show corresponding to the type. A toast without type will always have no icon. Default: true\r\n * @param {number} options.timeout Adjusts the time (in ms) the toast should be shown for before disappearing automatically. Default: 3000\r\n */\r\n\r\n/**\r\n * Shows a simple toast, similar to Android, centered over \r\n * the textarea if it exists, and center screen otherwise.\r\n * Vertically it shows towards the bottom like in Android.\r\n * @param {string} content - The string to show in the toast.\r\n * @param {object} options - additional options for the toast\r\n * @param {string} [options.type=\"\"] - Changes the type of the toast stylistically and semantically. Choices: \"\", \"info\", \"success\", \"danger\"/\"error\", \"warning\"/\"warn\".\r\n * @param {boolean} [options.icon=true] - Determines whether the icon should show corresponding to the type. A toast without type will always have no icon.\r\n * @param {number} [options.timeout=3000] - Adjusts the time (in ms) the toast should be shown for before disappearing automatically.\r\n */\r\nPluginUtilities.showToast = function(content, options = {}) {\r\n    if (!document.querySelector('.toasts')) {\r\n\t\tlet container = document.querySelector('.channels-3g2vYe + div, .channels-Ie2l6A + div');\r\n\t\tlet memberlist = container.querySelector('.membersWrap-2h-GB4');\r\n\t\tlet form = container ? container.querySelector('form') : null;\r\n\t\tlet left = container ? container.getBoundingClientRect().left : 310;\r\n\t\tlet right = memberlist ? memberlist.getBoundingClientRect().left : 0;\r\n\t\tlet width = right ? right - container.getBoundingClientRect().left : container.offsetWidth;\r\n\t\tlet bottom = form ? form.offsetHeight : 80;\r\n        let toastWrapper = document.createElement(\"div\");\r\n        toastWrapper.classList.add(\"toasts\");\r\n        toastWrapper.style.setProperty(\"left\", left + \"px\");\r\n        toastWrapper.style.setProperty(\"width\", width + \"px\");\r\n        toastWrapper.style.setProperty(\"bottom\", bottom + \"px\");\r\n        document.querySelector('.app').appendChild(toastWrapper);\r\n    }\r\n    const {type = \"\", icon = true, timeout = 3000} = options;\r\n    let toastElem = document.createElement(\"div\");\r\n    toastElem.classList.add(\"toast\");\r\n\tif (type) toastElem.classList.add(\"toast-\" + type);\r\n\tif (type && icon) toastElem.classList.add(\"icon\");\r\n    toastElem.innerText = content;\r\n    document.querySelector('.toasts').appendChild(toastElem);\r\n    setTimeout(() => {\r\n        toastElem.classList.add('closing');\r\n        setTimeout(() => {\r\n            toastElem.remove();\r\n            if (!document.querySelectorAll('.toasts .toast').length) document.querySelector('.toasts').remove();\r\n        }, 300);\r\n    }, timeout);\r\n};\r\n\r\n\r\n/**\r\n * Get the full path to the plugins folder.\r\n * @returns {string} full path to the plugins folder\r\n */\r\nPluginUtilities.getPluginsFolder = function() {\r\n    let process = require(\"process\");\r\n    let path = require(\"path\");\r\n    switch (process.platform) {\r\n        case \"win32\":\r\n        return path.resolve(process.env.appdata, \"BetterDiscord/plugins/\");\r\n        case \"darwin\":\r\n        return path.resolve(process.env.HOME, \"Library/Preferences/\", \"BetterDiscord/plugins/\");\r\n        default:\r\n        return path.resolve(process.env.HOME, \".config/\", \"BetterDiscord/plugins/\");\r\n    }\r\n};\r\n\r\n/**\r\n * Get the full path to the themes folder.\r\n * @returns {string} full path to the themes folder\r\n */\r\nPluginUtilities.getThemesFolder = function() {\r\n    let process = require(\"process\");\r\n    let path = require(\"path\");\r\n    switch (process.platform) {\r\n        case \"win32\":\r\n        return path.resolve(process.env.appdata, \"BetterDiscord/themes/\");\r\n        case \"darwin\":\r\n        return path.resolve(process.env.HOME, \"Library/Preferences/\", \"BetterDiscord/themes/\");\r\n        default:\r\n        return path.resolve(process.env.HOME, \".config/\", \"BetterDiscord/themes/\");\r\n    }\r\n};\r\n\r\n/**\r\n * Format strings with placeholders (`${placeholder}`) into full strings.\r\n * Quick example: `PluginUtilities.formatString(\"Hello, ${user}\", {user: \"Zerebos\"})`\r\n * would return \"Hello, Zerebos\".\r\n * @param {string} string - string to format\r\n * @param {object} values - object literal of placeholders to replacements\r\n * @returns {string} the properly formatted string\r\n */\r\nPluginUtilities.formatString = function(string, values) {\r\n\tfor (let val in values) {\r\n\t\tstring = string.replace(new RegExp(`\\\\$\\\\{${val}\\\\}`, 'g'), values[val]);\r\n\t}\r\n\treturn string;\r\n};\r\n\r\n/**\r\n * Creates a MutationObserver observing for the Discord channel switch.\r\n * @param {object} plugin - the plugin with a `onChannelSwitch()` function\r\n * @returns {MutationObserver} the observer observing for channel switch\r\n */\r\nPluginUtilities.createSwitchObserver = function(plugin) {\r\n\tlet switchObserver = new MutationObserver((changes) => {\r\n\t\tchanges.forEach((change) => {\r\n\t\t\tif (change.addedNodes.length && change.addedNodes[0] instanceof Element && (change.addedNodes[0].classList.contains(\"messages-wrapper\") || change.addedNodes[0].classList.contains(\"activityFeed-HeiGwL\") || change.addedNodes[0].id === \"friends\")) plugin.onChannelSwitch();\r\n\t\t\tif (change.removedNodes.length && change.removedNodes[0] instanceof Element && (change.removedNodes[0].classList.contains(\"activityFeed-HeiGwL\") || change.removedNodes[0].id === \"friends\")) plugin.onChannelSwitch();\r\n\t\t});\r\n\t});\r\n\tswitchObserver.observe(document.querySelector('.app'), {childList: true, subtree:true});\r\n\treturn switchObserver;\r\n};\r\n\r\n/**\r\n * Creates a MutationObserver observing for the Discord channel switch.\r\n * @param {callable} onSwitch - function to call on channel switch\r\n * @returns {MutationObserver} the observer observing for channel switch\r\n */\r\nPluginUtilities.onSwitchObserver = function(onSwitch) {\r\n\tif (typeof onSwitch === \"undefined\") return null;\r\n\tlet switchObserver = new MutationObserver((changes) => {\r\n\t\tchanges.forEach((change) => {\r\n\t\t\tif (change.addedNodes.length && change.addedNodes[0] instanceof Element && (change.addedNodes[0].classList.contains(\"messages-wrapper\") || change.addedNodes[0].classList.contains(\"activityFeed-HeiGwL\") || change.addedNodes[0].id === \"friends\")) onSwitch();\r\n\t\t\tif (change.removedNodes.length && change.removedNodes[0] instanceof Element && (change.removedNodes[0].classList.contains(\"activityFeed-HeiGwL\") || change.removedNodes[0].id === \"friends\")) onSwitch();\r\n\t\t});\r\n\t});\r\n\tswitchObserver.observe(document.querySelector('.app'), {childList: true, subtree:true});\r\n\treturn switchObserver;\r\n};\r\n\r\nexport default PluginUtilities;",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/PluginUtilities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 383,
    "kind": "function",
    "name": "parseOnSwitchURL",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~parseOnSwitchURL",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"server\": *, \"channel\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 384,
    "kind": "function",
    "name": "getCurrentServer",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~getCurrentServer",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": "Gets the server the user is currently in.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} returns Discord's internal object representing the server"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "returns Discord's internal object representing the server"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 385,
    "kind": "function",
    "name": "isServer",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~isServer",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "if the user is in a server"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "if the user is in a server"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 386,
    "kind": "function",
    "name": "getCurrentUser",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~getCurrentUser",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": "Gets the current user.",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} returns Discord's internal object representing the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "returns Discord's internal object representing the user"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 387,
    "kind": "function",
    "name": "getAllUsers",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~getAllUsers",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": "Gets the list of members in the current server.",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array} returns an array of Discord's internal object representing the members."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "returns an array of Discord's internal object representing the members."
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 388,
    "kind": "function",
    "name": "loadData",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~loadData",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": "Loads data through BetterDiscord's API.",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} the combined saved and default data"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name for the file (usually plugin name)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "which key the data is saved under"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultData",
        "description": "default data to populate the object with"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the combined saved and default data"
    },
    "ignore": true
  },
  {
    "__docId__": 389,
    "kind": "function",
    "name": "saveData",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~saveData",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": "Saves data through BetterDiscord's API.",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name for the file (usually plugin name)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "which key the data should be saved under"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data to save"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 390,
    "kind": "function",
    "name": "loadSettings",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~loadSettings",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": "Loads settings through BetterDiscord's API.",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} the combined saved and default settings"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name for the file (usually plugin name)"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultData",
        "description": "default data to populate the object with"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the combined saved and default settings"
    },
    "ignore": true
  },
  {
    "__docId__": 391,
    "kind": "function",
    "name": "saveSettings",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~saveSettings",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": "Saves settings through BetterDiscord's API.",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name for the file (usually plugin name)"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "settings to save"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 392,
    "kind": "function",
    "name": "checkForUpdate",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~checkForUpdate",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": "Checks for updates for the specified plugin at the specified link. The final\nparameter should link to the raw text of the plugin and will compare semantic\nversions.",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pluginName",
        "description": "name of the plugin"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "currentVersion",
        "description": "current version (semantic versioning only)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "updateURL",
        "description": "url to check for update"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 393,
    "kind": "function",
    "name": "getToastCSS",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~getToastCSS",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 394,
    "kind": "function",
    "name": "showToast",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~showToast",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": "Shows a simple toast, similar to Android, centered over \nthe textarea if it exists, and center screen otherwise.\nVertically it shows towards the bottom like in Android.",
    "lineNumber": 197,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The string to show in the toast."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "additional options for the toast"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\"",
        "defaultRaw": "",
        "name": "options.type",
        "description": "Changes the type of the toast stylistically and semantically. Choices: \"\", \"info\", \"success\", \"danger\"/\"error\", \"warning\"/\"warn\"."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.icon",
        "description": "Determines whether the icon should show corresponding to the type. A toast without type will always have no icon."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "3000",
        "defaultRaw": 3000,
        "name": "options.timeout",
        "description": "Adjusts the time (in ms) the toast should be shown for before disappearing automatically."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 395,
    "kind": "function",
    "name": "getPluginsFolder",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~getPluginsFolder",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": "Get the full path to the plugins folder.",
    "lineNumber": 234,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} full path to the plugins folder"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "full path to the plugins folder"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 396,
    "kind": "function",
    "name": "getThemesFolder",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~getThemesFolder",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": "Get the full path to the themes folder.",
    "lineNumber": 251,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} full path to the themes folder"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "full path to the themes folder"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 397,
    "kind": "function",
    "name": "formatString",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~formatString",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": "Format strings with placeholders (`${placeholder}`) into full strings.\nQuick example: `PluginUtilities.formatString(\"Hello, ${user}\", {user: \"Zerebos\"})`\nwould return \"Hello, Zerebos\".",
    "lineNumber": 272,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} the properly formatted string"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": "string to format"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "object literal of placeholders to replacements"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the properly formatted string"
    },
    "ignore": true
  },
  {
    "__docId__": 398,
    "kind": "function",
    "name": "createSwitchObserver",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~createSwitchObserver",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": "Creates a MutationObserver observing for the Discord channel switch.",
    "lineNumber": 284,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MutationObserver} the observer observing for channel switch"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "plugin",
        "description": "the plugin with a `onChannelSwitch()` function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MutationObserver"
      ],
      "spread": false,
      "description": "the observer observing for channel switch"
    },
    "ignore": true
  },
  {
    "__docId__": 399,
    "kind": "function",
    "name": "onSwitchObserver",
    "memberof": "src/modules/PluginUtilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/PluginUtilities.js~onSwitchObserver",
    "access": "public",
    "export": false,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": null,
    "description": "Creates a MutationObserver observing for the Discord channel switch.",
    "lineNumber": 300,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MutationObserver} the observer observing for channel switch"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "callable"
        ],
        "spread": false,
        "optional": false,
        "name": "onSwitch",
        "description": "function to call on channel switch"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MutationObserver"
      ],
      "spread": false,
      "description": "the observer observing for channel switch"
    },
    "ignore": true
  },
  {
    "__docId__": 400,
    "kind": "variable",
    "name": "PluginUtilities",
    "memberof": "src/modules/PluginUtilities.js",
    "static": true,
    "longname": "src/modules/PluginUtilities.js~PluginUtilities",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/PluginUtilities.js",
    "importStyle": "PluginUtilities",
    "description": "A series of useful functions for BetterDiscord plugins.",
    "lineNumber": 11,
    "version": "0.2.3",
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "PluginUtilities"
      }
    ],
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "file",
    "name": "src/modules/reacttools.js",
    "content": "/**\r\n * Helpful utilities for dealing with getting react information from DOM objects.\r\n * @module ReactTools\r\n * @version 0.0.4\r\n */\r\n\r\nimport Utilities from \"./GeneralUtilities\";\r\nimport {jQuery} from \"../vendor\";\r\n\r\nexport default class ReactTools {\r\n\r\n\t/**\r\n\t * Grabs the react internal instance of a specific node.\r\n\t * @param {(HTMLElement|jQuery)} node - node to obtain react instance of\r\n\t * @return {object} the internal react instance\r\n\t */\r\n\tstatic getReactInstance(node) {\r\n\t\tif (!(node instanceof jQuery) && !(node instanceof Element)) return undefined;\r\n\t\tvar domNode = node instanceof jQuery ? node[0] : node;\r\n\t\treturn domNode[Object.keys(domNode).find((key) => key.startsWith(\"__reactInternalInstance\"))];\r\n\t}\r\n\r\n\t/**\r\n\t * Grabs a value from the react internal instance. Allows you to grab\r\n\t * long depth values safely without accessing no longer valid properties.\r\n\t * @param {(HTMLElement|jQuery)} node - node to obtain react instance of\r\n\t * @param {string} path - path to the requested value\r\n\t * @return {(*|undefined)} the value requested or undefined if not found.\r\n\t */\r\n\tstatic getReactProperty(node, path) {\r\n\t\tvar value = path.split(/\\s?\\.\\s?/).reduce(function(obj, prop) {\r\n\t\t\treturn obj && obj[prop];\r\n\t\t}, this.getReactInstance(node));\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Grabs a value from the react internal instance. Allows you to grab\r\n\t * long depth values safely without accessing no longer valid properties.\r\n\t * @param {(HTMLElement|jQuery)} node - node to obtain react instance of\r\n\t * @param {object} options - options for the search\r\n\t * @param {array} [options.include] - list of items to include from the search\r\n\t * @param {array} [options.exclude=[\"Popout\", \"Tooltip\", \"Scroller\", \"BackgroundFlash\"]] - list of items to exclude from the search\r\n\t * @return {(*|null)} the owner instance or undefined if not found.\r\n\t */\r\n\tstatic getOwnerInstance(node, {include, exclude = [\"Popout\", \"Tooltip\", \"Scroller\", \"BackgroundFlash\"]} = {}) {\r\n\t\tif (node === undefined)\r\n\t\t\treturn undefined;\r\n\t\tconst excluding = include === undefined;\r\n\t\tconst filter = excluding ? exclude : include;\r\n\t\tfunction getDisplayName(owner) {\r\n\t\t\tconst type = owner.type;\r\n\t\t\treturn type.displayName || type.name || null;\r\n\t\t}\r\n\t\tfunction classFilter(owner) {\r\n\t\t\tconst name = getDisplayName(owner);\r\n\t\t\treturn (name !== null && !!(filter.includes(name) ^ excluding));\r\n\t\t}\r\n\t\t\r\n\t\tfor (let curr = this.getReactInstance(node).return; !Utilities.isNil(curr); curr = curr.return) {\r\n\t\t\tif (Utilities.isNil(curr))\r\n\t\t\t\tcontinue;\r\n\t\t\tlet owner = curr.stateNode;\r\n\t\t\tif (!Utilities.isNil(owner) && !(owner instanceof HTMLElement) && classFilter(curr))\r\n\t\t\t\treturn owner;\r\n\t\t}\r\n\t\t\r\n\t\treturn null;\r\n\t}\r\n\r\n}",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/reacttools.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 402,
    "kind": "class",
    "name": "ReactTools",
    "memberof": "src/modules/reacttools.js",
    "static": true,
    "longname": "src/modules/reacttools.js~ReactTools",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/reacttools.js",
    "importStyle": "ReactTools",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "getReactInstance",
    "memberof": "src/modules/reacttools.js~ReactTools",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/reacttools.js~ReactTools.getReactInstance",
    "access": "public",
    "description": "Grabs the react internal instance of a specific node.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement",
          "jQuery"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "node to obtain react instance of"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the internal react instance"
    }
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "getReactProperty",
    "memberof": "src/modules/reacttools.js~ReactTools",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/reacttools.js~ReactTools.getReactProperty",
    "access": "public",
    "description": "Grabs a value from the react internal instance. Allows you to grab\nlong depth values safely without accessing no longer valid properties.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement",
          "jQuery"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "node to obtain react instance of"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "path to the requested value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*",
        "undefined"
      ],
      "spread": false,
      "description": "the value requested or undefined if not found."
    }
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "getOwnerInstance",
    "memberof": "src/modules/reacttools.js~ReactTools",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/reacttools.js~ReactTools.getOwnerInstance",
    "access": "public",
    "description": "Grabs a value from the react internal instance. Allows you to grab\nlong depth values safely without accessing no longer valid properties.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement",
          "jQuery"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "node to obtain react instance of"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options for the search"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": true,
        "name": "options.include",
        "description": "list of items to include from the search"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[\"Popout\", \"Tooltip\", \"Scroller\", \"BackgroundFlash\"]",
        "defaultRaw": [
          "Popout",
          "Tooltip",
          "Scroller",
          "BackgroundFlash"
        ],
        "name": "options.exclude",
        "description": "list of items to exclude from the search"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*",
        "null"
      ],
      "spread": false,
      "description": "the owner instance or undefined if not found."
    }
  },
  {
    "__docId__": 406,
    "kind": "file",
    "name": "src/modules/tooltips.js",
    "content": "import DiscordModules from \"./DiscordModules\";\r\nimport {$, jQuery} from \"../vendor\";\r\n\r\n/** \r\n * Tooltips that automatically show and hide themselves on mouseenter and mouseleave events.\r\n * Will also remove themselves if the node to watch is removed from DOM through\r\n * a MutationObserver.\r\n * \r\n * @module PluginTooltip\r\n * @version 0.1.1\r\n */\r\n\r\n\r\n// example usage `new PluginTooltip.Tooltip($('#test-element), \"Hello World\", {side: \"top\"});`\r\n\r\n/** \r\n * Custom tooltip, not using internals.\r\n * @class \r\n * @version 0.1.0\r\n */\r\nexport class PluginTooltip {\r\n\t/**\r\n\t * \r\n\t * @constructor\r\n\t * @param {(HTMLElement|jQuery)} node - DOM node to monitor and show the tooltip on\r\n\t * @param {string} tip - string to show in the tooltip\r\n\t * @param {object} options - additional options for the tooltip\r\n\t * @param {string} [options.style=black] - correlates to the discord styling\r\n\t * @param {string} [options.side=top] - can be any of top, right, bottom, left\r\n\t * @param {boolean} [options.preventFlip=false] - prevents moving the tooltip to the opposite side if it is too big or goes offscreen\r\n\t */\r\n\tconstructor(node, tip, options = {}) {\r\n\t\tif (!(node instanceof jQuery) && !(node instanceof Element)) return undefined;\r\n\t\tthis.node = node instanceof jQuery ? node : $(node);\r\n\t\tconst {style = \"black\", side = \"top\", preventFlip = false} = options;\r\n\t\tthis.tip = tip;\r\n\t\tthis.side = side;\r\n\t\tthis.preventFlip = preventFlip;\r\n\t\tthis.tooltip = $(`<div class=\"tooltip tooltip-${style}\">`);\r\n\t\tthis.tooltip.text(tip);\r\n\r\n\t\tnode.on('mouseenter.tooltip', () => {\r\n            this.show();\r\n\t\t\t\r\n\t\t\tvar observer = new MutationObserver((mutations) => {\r\n\t\t\t\tmutations.forEach((mutation) => {\r\n\t\t\t\t\tvar nodes = Array.from(mutation.removedNodes);\r\n\t\t\t\t\tvar directMatch = nodes.indexOf(node[0]) > -1;\r\n\t\t\t\t\tvar parentMatch = nodes.some(parent => parent.contains(node[0]));\r\n\t\t\t\t\tif (directMatch || parentMatch) {\r\n\t\t\t\t\t\tthis.tooltip.detach();\r\n\t\t\t\t\t\tobserver.disconnect();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tobserver.observe(document.body, {subtree: true, childList: true});\r\n\t\t});\r\n\r\n\t\tnode.on('mouseleave.tooltip', () => {\r\n\t\t\tthis.tooltip.detach();\r\n\t\t});\r\n\t}\r\n\r\n    /** Boolean representing if the tooltip will fit on screen above the element */\r\n    get canShowAbove() { return this.node.offset().top - this.tooltip.outerHeight() >= 0; }\r\n    /** Boolean representing if the tooltip will fit on screen below the element */\r\n    get canShowBelow() { return this.node.offset().top + this.node.outerHeight() + this.tooltip.outerHeight() <= window.ZeresLibrary.Screen.height; }\r\n    /** Boolean representing if the tooltip will fit on screen to the left of the element */\r\n    get canShowLeft() { return this.node.offset().left - this.tooltip.outerWidth() >= 0; }\r\n    /** Boolean representing if the tooltip will fit on screen to the right of the element */\r\n\tget canShowRight() { return this.node.offset().left + this.node.outerWidth() + this.tooltip.outerWidth() <= window.ZeresLibrary.Screen.width; }\r\n\r\n    /** Hides the tooltip. Automatically called on mouseleave. */\r\n\thide() {\r\n\t\tthis.tooltip.hide();\r\n\t}\r\n\r\n    /** Shows the tooltip. Automatically called on mouseenter. Will attempt to flip if position was wrong. */\r\n\tshow() {\r\n\t\tthis.tooltip.show();\r\n\t\tthis.tooltip.removeClass(\"tooltip-bottom\");\r\n\t\tthis.tooltip.removeClass(\"tooltip-top\");\r\n\t\tthis.tooltip.removeClass(\"tooltip-left\");\r\n\t\tthis.tooltip.removeClass(\"tooltip-right\");\r\n\t\tthis.tooltip.appendTo('.tooltips');\r\n\r\n\t\tif (this.side == \"top\") {\r\n\t\t\tif (this.canShowAbove || (!this.canShowAbove && this.preventFlip)) this.showAbove();\r\n\t\t\telse this.showBelow();\r\n\t\t}\r\n\r\n\t\tif (this.side == \"bottom\") {\r\n\t\t\tif (this.canShowBelow || (!this.canShowBelow && this.preventFlip)) this.showBelow();\r\n\t\t\telse this.showAbove();\r\n\t\t}\r\n\r\n\t\tif (this.side == \"left\") {\r\n\t\t\tif (this.canShowLeft || (!this.canShowLeft && this.preventFlip)) this.showLeft();\r\n\t\t\telse this.showRight();\r\n\t\t}\r\n\r\n\t\tif (this.side == \"right\") {\r\n\t\t\tif (this.canShowRight || (!this.canShowRight && this.preventFlip)) this.showRight();\r\n\t\t\telse this.showLeft();\r\n\t\t}\r\n\t}\r\n\r\n    /** Force showing the tooltip above the node. */\r\n\tshowAbove() {\r\n\t\tthis.tooltip.addClass(\"tooltip-top\");\r\n\t\tthis.tooltip.css(\"top\", this.node.offset().top - this.tooltip.outerHeight());\r\n\t\tthis.centerHorizontally();\r\n\t}\r\n\r\n    /** Force showing the tooltip below the node. */\r\n\tshowBelow() {\r\n\t\tthis.tooltip.addClass(\"tooltip-bottom\");\r\n\t\tthis.tooltip.css(\"top\", this.node.offset().top + this.node.outerHeight());\r\n\t\tthis.centerHorizontally();\r\n\t}\r\n\r\n    /** Force showing the tooltip to the left of the node. */\r\n\tshowLeft() {\r\n\t\tthis.tooltip.addClass(\"tooltip-left\");\r\n\t\tthis.tooltip.css(\"left\", this.node.offset().left - this.tooltip.outerWidth());\r\n\t\tthis.centerVertically();\r\n\t}\r\n\r\n    /** Force showing the tooltip to the right of the node. */\r\n\tshowRight() {\r\n\t\tthis.tooltip.addClass(\"tooltip-right\");\r\n\t\tthis.tooltip.css(\"left\", this.node.offset().left + this.node.outerWidth());\r\n\t\tthis.centerVertically();\r\n\t}\r\n\r\n\tcenterHorizontally() {\r\n\t\tvar nodecenter = this.node.offset().left + (this.node.outerWidth() / 2);\r\n\t\tthis.tooltip.css(\"left\", nodecenter - (this.tooltip.outerWidth() / 2));\r\n\t}\r\n\r\n\tcenterVertically() {\r\n\t\tvar nodecenter = this.node.offset().top + (this.node.outerHeight() / 2);\r\n\t\tthis.tooltip.css(\"top\", nodecenter - (this.tooltip.outerHeight() / 2));\r\n\t}\r\n}\r\n\r\n\r\n/** \r\n * Tooltips done using Discord's internals.\r\n * @version 0.0.1\r\n */\r\nexport class NativeTooltip {\r\n\t/**\r\n\t * \r\n\t * @constructor\r\n\t * @param {(HTMLElement|jQuery)} node - DOM node to monitor and show the tooltip on\r\n\t * @param {string} tip - string to show in the tooltip\r\n\t * @param {object} options - additional options for the tooltip\r\n\t * @param {string} [options.style=black] - correlates to the discord styling\r\n\t * @param {string} [options.side=top] - can be any of top, right, bottom, left\r\n\t * @param {boolean} [options.preventFlip=false] - prevents moving the tooltip to the opposite side if it is too big or goes offscreen\r\n\t */\r\n\tconstructor(node, text, options = {}) {\r\n\t\tif (!(node instanceof jQuery) && !(node instanceof Element)) return undefined;\r\n\t\tthis.node = node instanceof jQuery ? node[0] : node;\r\n\t\tconst {style = \"black\", side = \"top\"} = options;\r\n\t\tthis.label = text;\r\n\t\tthis.style = style;\r\n\t\tthis.side = side;\r\n\t\tthis.id = DiscordModules.KeyGenerator();\r\n\r\n\t\tthis.node.addEventListener('mouseenter', () => {\r\n\t\t\tthis.show();\r\n\r\n\t\t\tconst observer = new MutationObserver((mutations) => {\r\n\t\t\t\tmutations.forEach((mutation) => {\r\n\t\t\t\t\tconst nodes = Array.from(mutation.removedNodes);\r\n\t\t\t\t\tconst directMatch = nodes.indexOf(this.node) > -1;\r\n\t\t\t\t\tconst parentMatch = nodes.some(parent => parent.contains(this.node));\r\n\t\t\t\t\tif (directMatch || parentMatch) {\r\n\t\t\t\t\t\tthis.hide();\r\n\t\t\t\t\t\tobserver.disconnect();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tobserver.observe(document.body, {subtree: true, childList: true});\r\n\t\t});\r\n\r\n\t\tthis.node.addEventListener('mouseleave', () => {\r\n\t\t\tthis.hide();\r\n\t\t});\r\n\t}\r\n\r\n    /** Hides the tooltip. Automatically called on mouseleave. */\r\n\thide() {\r\n\t\tDiscordModules.Tooltips.hide(this.id);\r\n    }\r\n    \r\n    /** Shows the tooltip. Automatically called on mouseenter. */\r\n\tshow() {\r\n\t\tconst {left, top, width, height} = this.node.getBoundingClientRect();\r\n\t\tDiscordModules.Tooltips.show(this.id, {\r\n\t\t\tposition: this.side,\r\n\t\t\ttext: this.label,\r\n\t\t\tcolor: this.style,\r\n\t\t\ttargetWidth: width,\r\n\t\t\ttargetHeight: height,\r\n\t\t\tx: left,\r\n\t\t\ty: top\r\n\t\t});\r\n\t}\r\n}",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/tooltips.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 407,
    "kind": "class",
    "name": "PluginTooltip",
    "memberof": "src/modules/tooltips.js",
    "static": true,
    "longname": "src/modules/tooltips.js~PluginTooltip",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/tooltips.js",
    "importStyle": "{PluginTooltip}",
    "description": "Custom tooltip, not using internals.",
    "lineNumber": 21,
    "version": "0.1.0",
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 408,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement",
          "jQuery"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "DOM node to monitor and show the tooltip on"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tip",
        "description": "string to show in the tooltip"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "additional options for the tooltip"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "black",
        "defaultRaw": "black",
        "name": "options.style",
        "description": "correlates to the discord styling"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "top",
        "defaultRaw": "top",
        "name": "options.side",
        "description": "can be any of top, right, bottom, left"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.preventFlip",
        "description": "prevents moving the tooltip to the opposite side if it is too big or goes offscreen"
      }
    ]
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "node",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#node",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "tip",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#tip",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "member",
    "name": "side",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#side",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 412,
    "kind": "member",
    "name": "preventFlip",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#preventFlip",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "tooltip",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#tooltip",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "get",
    "name": "canShowAbove",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#canShowAbove",
    "access": "public",
    "description": "Boolean representing if the tooltip will fit on screen above the element",
    "lineNumber": 66,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 415,
    "kind": "get",
    "name": "canShowBelow",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#canShowBelow",
    "access": "public",
    "description": "Boolean representing if the tooltip will fit on screen below the element",
    "lineNumber": 68,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 416,
    "kind": "get",
    "name": "canShowLeft",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#canShowLeft",
    "access": "public",
    "description": "Boolean representing if the tooltip will fit on screen to the left of the element",
    "lineNumber": 70,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 417,
    "kind": "get",
    "name": "canShowRight",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#canShowRight",
    "access": "public",
    "description": "Boolean representing if the tooltip will fit on screen to the right of the element",
    "lineNumber": 72,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "hide",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#hide",
    "access": "public",
    "description": "Hides the tooltip. Automatically called on mouseleave.",
    "lineNumber": 75,
    "params": [],
    "return": null
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "show",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#show",
    "access": "public",
    "description": "Shows the tooltip. Automatically called on mouseenter. Will attempt to flip if position was wrong.",
    "lineNumber": 80,
    "params": [],
    "return": null
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "showAbove",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#showAbove",
    "access": "public",
    "description": "Force showing the tooltip above the node.",
    "lineNumber": 110,
    "params": [],
    "return": null
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "showBelow",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#showBelow",
    "access": "public",
    "description": "Force showing the tooltip below the node.",
    "lineNumber": 117,
    "params": [],
    "return": null
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "showLeft",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#showLeft",
    "access": "public",
    "description": "Force showing the tooltip to the left of the node.",
    "lineNumber": 124,
    "params": [],
    "return": null
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "showRight",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#showRight",
    "access": "public",
    "description": "Force showing the tooltip to the right of the node.",
    "lineNumber": 131,
    "params": [],
    "return": null
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "centerHorizontally",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#centerHorizontally",
    "access": "public",
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "centerVertically",
    "memberof": "src/modules/tooltips.js~PluginTooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/tooltips.js~PluginTooltip#centerVertically",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 426,
    "kind": "class",
    "name": "NativeTooltip",
    "memberof": "src/modules/tooltips.js",
    "static": true,
    "longname": "src/modules/tooltips.js~NativeTooltip",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/tooltips.js",
    "importStyle": "{NativeTooltip}",
    "description": "Tooltips done using Discord's internals.",
    "lineNumber": 153,
    "version": "0.0.1",
    "interface": false
  },
  {
    "__docId__": 427,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/modules/tooltips.js~NativeTooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/tooltips.js~NativeTooltip#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 164,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement",
          "jQuery"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "DOM node to monitor and show the tooltip on"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tip",
        "description": "string to show in the tooltip"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "additional options for the tooltip"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "black",
        "defaultRaw": "black",
        "name": "options.style",
        "description": "correlates to the discord styling"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "top",
        "defaultRaw": "top",
        "name": "options.side",
        "description": "can be any of top, right, bottom, left"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.preventFlip",
        "description": "prevents moving the tooltip to the opposite side if it is too big or goes offscreen"
      }
    ]
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "node",
    "memberof": "src/modules/tooltips.js~NativeTooltip",
    "static": false,
    "longname": "src/modules/tooltips.js~NativeTooltip#node",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "member",
    "name": "label",
    "memberof": "src/modules/tooltips.js~NativeTooltip",
    "static": false,
    "longname": "src/modules/tooltips.js~NativeTooltip#label",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 430,
    "kind": "member",
    "name": "style",
    "memberof": "src/modules/tooltips.js~NativeTooltip",
    "static": false,
    "longname": "src/modules/tooltips.js~NativeTooltip#style",
    "access": "public",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 431,
    "kind": "member",
    "name": "side",
    "memberof": "src/modules/tooltips.js~NativeTooltip",
    "static": false,
    "longname": "src/modules/tooltips.js~NativeTooltip#side",
    "access": "public",
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "member",
    "name": "id",
    "memberof": "src/modules/tooltips.js~NativeTooltip",
    "static": false,
    "longname": "src/modules/tooltips.js~NativeTooltip#id",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "hide",
    "memberof": "src/modules/tooltips.js~NativeTooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/tooltips.js~NativeTooltip#hide",
    "access": "public",
    "description": "Hides the tooltip. Automatically called on mouseleave.",
    "lineNumber": 197,
    "params": [],
    "return": null
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "show",
    "memberof": "src/modules/tooltips.js~NativeTooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/modules/tooltips.js~NativeTooltip#show",
    "access": "public",
    "description": "Shows the tooltip. Automatically called on mouseenter.",
    "lineNumber": 202,
    "params": [],
    "return": null
  },
  {
    "__docId__": 435,
    "kind": "file",
    "name": "src/modules/utilities.js",
    "content": "/**\r\n * Random set of utilities that didn't fit elsewhere.\r\n * @module Utilities\r\n * @version 0.0.1\r\n */\r\n\r\n import Logger from \"./Logger\";\r\n\r\nexport default class Utilities {\r\n\r\n    /**\r\n     * Stably sorts arrays since `.sort()` has issues.\r\n     * @param {Array} list - array to sort\r\n     * @param {function} comparator - comparator to sort by\r\n     */\r\n    static stableSort(list, comparator) {\r\n        var length = list.length;\r\n        var entries = Array(length);\r\n        var index;\r\n\r\n        // wrap values with initial indices\r\n        for (index = 0; index < length; index++) {\r\n            entries[index] = [index, list[index]];\r\n        }\r\n\r\n        // sort with fallback based on initial indices\r\n        entries.sort(function (a, b) {\r\n            var comparison = Number(this(a[1], b[1]));\r\n            return comparison || a[0] - b[0];\r\n        }.bind(comparator));\r\n\r\n        // re-map original array to stable sorted values\r\n        for (index = 0; index < length; index++) {\r\n            list[index] = entries[index][1];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates an automatically memoizing version of an object.\r\n     * @param {Object} object - object to memoize\r\n     * @returns {Proxy} the proxy to the object that memoizes properties\r\n     */\r\n    static memoizeObject(object) {\r\n        const proxy = new Proxy(object, {\r\n            get: function(obj, mod) {\r\n                if (!obj.hasOwnProperty(mod)) return undefined;\r\n                if (Object.getOwnPropertyDescriptor(obj, mod).get) {\r\n                    let value = obj[mod];\r\n                    delete obj[mod];\r\n                    obj[mod] = value;\r\n                }\r\n                return obj[mod];\r\n            },\r\n            set: function(obj, mod, value) {\r\n                if (obj.hasOwnProperty(mod)) return Logger.err(\"MemoizedObject\", \"Trying to overwrite existing property\");\r\n                obj[mod] = value;\r\n                return obj[mod];\r\n            }\r\n        });\r\n\r\n        Object.defineProperty(proxy, \"hasOwnProperty\", {value: function(prop) {\r\n            return this[prop] !== undefined;\r\n        }});\r\n\r\n        return proxy;\r\n    }\r\n\r\n    /**\r\n     * Wraps the method in a `try..catch` block.\r\n     * @param {callable} method - method to wrap\r\n     * @param {string} description - description of method\r\n     * @returns {callable} wrapped version of method\r\n     */\r\n    static suppressErrors(method, description) {\r\n        return (...params) => {\r\n            try { return method(...params);\t}\r\n            catch (e) { Logger.err(\"Suppression\", \"Error occurred in \" + description, e); }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * This only exists because Samo relied on lodash being there... fuck lodash.\r\n     * @param {*} anything - whatever you want\r\n     */\r\n    static isNil(anything) {\r\n        return anything == null;\r\n    }\r\n\r\n}",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/utilities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 436,
    "kind": "class",
    "name": "Utilities",
    "memberof": "src/modules/utilities.js",
    "static": true,
    "longname": "src/modules/utilities.js~Utilities",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/utilities.js",
    "importStyle": "Utilities",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "stableSort",
    "memberof": "src/modules/utilities.js~Utilities",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/utilities.js~Utilities.stableSort",
    "access": "public",
    "description": "Stably sorts arrays since `.sort()` has issues.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "array to sort"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "comparator",
        "description": "comparator to sort by"
      }
    ],
    "return": null
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "memoizeObject",
    "memberof": "src/modules/utilities.js~Utilities",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/utilities.js~Utilities.memoizeObject",
    "access": "public",
    "description": "Generates an automatically memoizing version of an object.",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Proxy} the proxy to the object that memoizes properties"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "object to memoize"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Proxy"
      ],
      "spread": false,
      "description": "the proxy to the object that memoizes properties"
    }
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "suppressErrors",
    "memberof": "src/modules/utilities.js~Utilities",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/utilities.js~Utilities.suppressErrors",
    "access": "public",
    "description": "Wraps the method in a `try..catch` block.",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{callable} wrapped version of method"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "callable"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "method to wrap"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "description of method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "callable"
      ],
      "spread": false,
      "description": "wrapped version of method"
    }
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "isNil",
    "memberof": "src/modules/utilities.js~Utilities",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/utilities.js~Utilities.isNil",
    "access": "public",
    "description": "This only exists because Samo relied on lodash being there... fuck lodash.",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "anything",
        "description": "whatever you want"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 441,
    "kind": "file",
    "name": "src/modules/webpackmodules.js",
    "content": "import DiscordModules from \"./discordmodules\";\r\n\r\nexport class Filters {\r\n    static byProperties(props, selector = m => m) {\r\n        return module => {\r\n            const component = selector(module);\r\n            if (!component) return false;\r\n            return props.every(property => component[property] !== undefined);\r\n        };\r\n    }\r\n\r\n    static byPrototypeFields(fields, selector = m => m) {\r\n        return module => {\r\n            const component = selector(module);\r\n            if (!component) return false;\r\n            if (!component.prototype) return false;\r\n            return fields.every(field => component.prototype[field] !== undefined);\r\n        };\r\n    }\r\n\r\n    static byCode(search, selector = m => m) {\r\n        return module => {\r\n            const method = selector(module);\r\n            if (!method) return false;\r\n            return method.toString().search(search) !== -1;\r\n        };\r\n    }\r\n\r\n    static byDisplayName(name) {\r\n        return module => {\r\n            return module && module.displayName === name;\r\n        };\r\n    }\r\n\r\n    static combine(...filters) {\r\n        return module => {\r\n            return filters.every(filter => filter(module));\r\n        };\r\n    }\r\n}\r\n\r\nexport class WebpackModules {\r\n\r\n    static find(filter, first = true) {return this.getModule(filter, first);}\r\n    static findByUniqueProperties(props, first = true) {return first ? this.getByProps(...props) : this.getAllByProps(...props);}\r\n    static findByDisplayName(name) {return this.getByDisplayName(name);}\r\n\r\n    /**\r\n     * Finds a module using a filter function.\r\n     * @param {Function} filter A function to use to filter modules\r\n     * @param {Boolean} first Whether to return only the first matching module\r\n     * @return {Any}\r\n     */\r\n    static getModule(filter, first = true) {\r\n        const modules = this.getAllModules();\r\n        const rm = [];\r\n        for (let index in modules) {\r\n            if (!modules.hasOwnProperty(index)) continue;\r\n            const module = modules[index];\r\n            const { exports } = module;\r\n            let foundModule = null;\r\n\r\n            if (!exports) continue;\r\n            if (exports.__esModule && exports.default && filter(exports.default)) foundModule = exports.default;\r\n            if (filter(exports)) foundModule = exports;\r\n            if (!foundModule) continue;\r\n            if (first) return foundModule;\r\n            rm.push(foundModule);\r\n        }\r\n        return first || rm.length == 0 ? undefined : rm;\r\n    }\r\n\r\n    /**\r\n     * Finds a module by its name.\r\n     * @param {String} name The name of the module\r\n     * @param {Function} fallback A function to use to filter modules if not finding a known module\r\n     * @return {Any}\r\n     */\r\n    static getModuleByName(name, fallback) {\r\n        if (DiscordModules.hasOwnProperty(name)) return DiscordModules[name];\r\n        if (!fallback) return undefined;\r\n        const module = this.getModule(fallback, true);\r\n        return module ? DiscordModules[name] = module : undefined;\r\n    }\r\n\r\n    /**\r\n     * Finds a module by its display name.\r\n     * @param {String} name The display name of the module\r\n     * @return {Any}\r\n     */\r\n    static getByDisplayName(name) {\r\n        return this.getModule(Filters.byDisplayName(name), true);\r\n    }\r\n\r\n    /**\r\n     * Finds a module using its code.\r\n     * @param {RegEx} regex A regular expression to use to filter modules\r\n     * @param {Boolean} first Whether to return the only the first matching module\r\n     * @return {Any}\r\n     */\r\n    static getByRegex(regex, first = true) {\r\n        return this.getModule(Filters.byCode(regex), first);\r\n    }\r\n\r\n    /**\r\n     * Finds a single module using properties on its prototype.\r\n     * @param {...string} prototypes Properties to use to filter modules\r\n     * @return {Any}\r\n     */\r\n    static getByPrototypes(...prototypes) {\r\n        return this.getModule(Filters.byPrototypeFields(prototypes), true);\r\n    }\r\n\r\n    /**\r\n     * Finds all modules with a set of properties of its prototype.\r\n     * @param {...string} prototypes Properties to use to filter modules\r\n     * @return {Any}\r\n     */\r\n    static getAllByPrototypes(...prototypes) {\r\n        return this.getModule(Filters.byPrototypeFields(prototypes), false);\r\n    }\r\n\r\n    /**\r\n     * Finds a single module using its own properties.\r\n     * @param {...string} props Properties to use to filter modules\r\n     * @return {Any}\r\n     */\r\n    static getByProps(...props) {\r\n        return this.getModule(Filters.byProperties(props), true);\r\n    }\r\n\r\n    /**\r\n     * Finds all modules with a set of properties.\r\n     * @param {...string} props Properties to use to filter modules\r\n     * @return {Any}\r\n     */\r\n    static getAllByProps(...props) {\r\n        return this.getModule(Filters.byProperties(props), false);\r\n    }\r\n\r\n    /**\r\n     * Discord's __webpack_require__ function.\r\n     */\r\n    static get require() {\r\n        if (this._require) return this._require;\r\n        const id = \"zl-webpackmodules\";\r\n        const __webpack_require__ = window[\"webpackJsonp\"]([], {\r\n            [id]: (module, exports, __webpack_require__) => exports.default = __webpack_require__\r\n        }, [id]).default;\r\n        delete __webpack_require__.m[id];\r\n        delete __webpack_require__.c[id];\r\n        return this._require = __webpack_require__;\r\n    }\r\n\r\n    /**\r\n     * Returns all loaded modules.\r\n     * @return {Array}\r\n     */\r\n    static getAllModules() {\r\n        return this.require.c;\r\n    }\r\n\r\n}",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/modules/webpackmodules.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 442,
    "kind": "class",
    "name": "Filters",
    "memberof": "src/modules/webpackmodules.js",
    "static": true,
    "longname": "src/modules/webpackmodules.js~Filters",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/webpackmodules.js",
    "importStyle": "{Filters}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "byProperties",
    "memberof": "src/modules/webpackmodules.js~Filters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~Filters.byProperties",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      },
      {
        "name": "selector",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "byPrototypeFields",
    "memberof": "src/modules/webpackmodules.js~Filters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~Filters.byPrototypeFields",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "fields",
        "types": [
          "*"
        ]
      },
      {
        "name": "selector",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "byCode",
    "memberof": "src/modules/webpackmodules.js~Filters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~Filters.byCode",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "search",
        "types": [
          "*"
        ]
      },
      {
        "name": "selector",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "byDisplayName",
    "memberof": "src/modules/webpackmodules.js~Filters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~Filters.byDisplayName",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "combine",
    "memberof": "src/modules/webpackmodules.js~Filters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~Filters.combine",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "filters",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "class",
    "name": "WebpackModules",
    "memberof": "src/modules/webpackmodules.js",
    "static": true,
    "longname": "src/modules/webpackmodules.js~WebpackModules",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/modules/webpackmodules.js",
    "importStyle": "{WebpackModules}",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "find",
    "memberof": "src/modules/webpackmodules.js~WebpackModules",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~WebpackModules.find",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "first",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "findByUniqueProperties",
    "memberof": "src/modules/webpackmodules.js~WebpackModules",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~WebpackModules.findByUniqueProperties",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      },
      {
        "name": "first",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "findByDisplayName",
    "memberof": "src/modules/webpackmodules.js~WebpackModules",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~WebpackModules.findByDisplayName",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "getModule",
    "memberof": "src/modules/webpackmodules.js~WebpackModules",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~WebpackModules.getModule",
    "access": "public",
    "description": "Finds a module using a filter function.",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "filter",
        "description": "A function to use to filter modules"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "first",
        "description": "Whether to return only the first matching module"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "getModuleByName",
    "memberof": "src/modules/webpackmodules.js~WebpackModules",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~WebpackModules.getModuleByName",
    "access": "public",
    "description": "Finds a module by its name.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the module"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fallback",
        "description": "A function to use to filter modules if not finding a known module"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "getByDisplayName",
    "memberof": "src/modules/webpackmodules.js~WebpackModules",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~WebpackModules.getByDisplayName",
    "access": "public",
    "description": "Finds a module by its display name.",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The display name of the module"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "getByRegex",
    "memberof": "src/modules/webpackmodules.js~WebpackModules",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~WebpackModules.getByRegex",
    "access": "public",
    "description": "Finds a module using its code.",
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "RegEx"
        ],
        "spread": false,
        "optional": false,
        "name": "regex",
        "description": "A regular expression to use to filter modules"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "first",
        "description": "Whether to return the only the first matching module"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "getByPrototypes",
    "memberof": "src/modules/webpackmodules.js~WebpackModules",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~WebpackModules.getByPrototypes",
    "access": "public",
    "description": "Finds a single module using properties on its prototype.",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "prototypes",
        "description": "Properties to use to filter modules"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "getAllByPrototypes",
    "memberof": "src/modules/webpackmodules.js~WebpackModules",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~WebpackModules.getAllByPrototypes",
    "access": "public",
    "description": "Finds all modules with a set of properties of its prototype.",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "prototypes",
        "description": "Properties to use to filter modules"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "getByProps",
    "memberof": "src/modules/webpackmodules.js~WebpackModules",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~WebpackModules.getByProps",
    "access": "public",
    "description": "Finds a single module using its own properties.",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "props",
        "description": "Properties to use to filter modules"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "getAllByProps",
    "memberof": "src/modules/webpackmodules.js~WebpackModules",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~WebpackModules.getAllByProps",
    "access": "public",
    "description": "Finds all modules with a set of properties.",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "props",
        "description": "Properties to use to filter modules"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 460,
    "kind": "get",
    "name": "require",
    "memberof": "src/modules/webpackmodules.js~WebpackModules",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~WebpackModules.require",
    "access": "public",
    "description": "Discord's __webpack_require__ function.",
    "lineNumber": 144,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "getAllModules",
    "memberof": "src/modules/webpackmodules.js~WebpackModules",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/modules/webpackmodules.js~WebpackModules.getAllModules",
    "access": "public",
    "description": "Returns all loaded modules.",
    "lineNumber": 159,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 462,
    "kind": "file",
    "name": "src/structs/settings/index.js",
    "content": "\r\n export * from \"./settingfield\";",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/structs/settings/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 463,
    "kind": "file",
    "name": "src/structs/settings/setting.js",
    "content": "/** \r\n * Generic representation of a setting field. Very extensible, but best to use a child class when available.\r\n * @version 1.0.5\r\n */\r\nexport class SettingField {\r\n    /**\r\n     * @constructor\r\n     * @param {string} name - title for the setting\r\n     * @param {string} helptext - description/help text to show\r\n     * @param {object} inputData - props to set up the input field\r\n     * @param {PluginSettings~settingsChanged} callback - callback fired when the input field is changed\r\n     */\r\n\tconstructor(name, helptext, inputData, callback) {\r\n\t\tthis.name = name;\r\n\t\tthis.helptext = helptext;\r\n\t\tthis.row = $(\"<div>\").addClass(\"ui-flex flex-vertical flex-justify-start flex-align-stretch flex-nowrap ui-switch-item\").css(\"margin-top\", 0);\r\n\t\tthis.top = $(\"<div>\").addClass(\"ui-flex flex-horizontal flex-justify-start flex-align-stretch flex-nowrap plugin-setting-input-row\");\r\n\t\tthis.settingLabel = $(\"<h3>\").attr(\"class\", \"ui-form-title h3 margin-reset margin-reset ui-flex-child\").text(name);\r\n\t\t\r\n\t\tthis.help = $(\"<div>\").addClass(\"ui-form-text style-description margin-top-4\").css(\"flex\", \"1 1 auto\").text(helptext);\r\n\t\t\r\n\t\tthis.top.append(this.settingLabel);\r\n\t\tthis.inputWrapper = $(\"<div>\", {class: \"input-wrapper\"});\r\n\t\tthis.top.append(this.inputWrapper);\r\n\t\tthis.row.append(this.top, this.help);\r\n\t\t\r\n\t\tthis.input = $(\"<input>\", inputData);\r\n\t\tthis.input.addClass('plugin-input');\r\n\t\tthis.getValue = () => {return this.input.val();};\r\n\t\tthis.processValue = (value) => {return value;};\r\n\t\tthis.input.on(\"keyup change\", () => {\r\n\t\t\tif (typeof callback != 'undefined') {\r\n\t\t\t\tvar returnVal = this.getValue();\r\n\t\t\t\tcallback(returnVal);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.setInputElement(this.input);\r\n\t}\r\n    \r\n    /**\r\n     * Performing this will prevent the default callbacks from working!\r\n     * @param {(HTMLElement|jQuery)} node - node to override the default input with.\r\n     */\r\n\tsetInputElement(node) {\r\n\t\tthis.inputWrapper.empty();\r\n\t\tthis.inputWrapper.append(node);\r\n\t}\r\n    \r\n    /** @returns {jQuery} jQuery node for the group. */\r\n\tgetElement() { return this.row; }\r\n}",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/structs/settings/setting.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 464,
    "kind": "class",
    "name": "SettingField",
    "memberof": "src/structs/settings/setting.js",
    "static": true,
    "longname": "src/structs/settings/setting.js~SettingField",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/structs/settings/setting.js",
    "importStyle": "{SettingField}",
    "description": "Generic representation of a setting field. Very extensible, but best to use a child class when available.",
    "lineNumber": 5,
    "version": "1.0.5",
    "interface": false
  },
  {
    "__docId__": 465,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/structs/settings/setting.js~SettingField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/structs/settings/setting.js~SettingField#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "title for the setting"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "helptext",
        "description": "description/help text to show"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "inputData",
        "description": "props to set up the input field"
      },
      {
        "nullable": null,
        "types": [
          "PluginSettings~settingsChanged"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback fired when the input field is changed"
      }
    ]
  },
  {
    "__docId__": 466,
    "kind": "member",
    "name": "name",
    "memberof": "src/structs/settings/setting.js~SettingField",
    "static": false,
    "longname": "src/structs/settings/setting.js~SettingField#name",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "member",
    "name": "helptext",
    "memberof": "src/structs/settings/setting.js~SettingField",
    "static": false,
    "longname": "src/structs/settings/setting.js~SettingField#helptext",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "member",
    "name": "row",
    "memberof": "src/structs/settings/setting.js~SettingField",
    "static": false,
    "longname": "src/structs/settings/setting.js~SettingField#row",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 469,
    "kind": "member",
    "name": "top",
    "memberof": "src/structs/settings/setting.js~SettingField",
    "static": false,
    "longname": "src/structs/settings/setting.js~SettingField#top",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 470,
    "kind": "member",
    "name": "settingLabel",
    "memberof": "src/structs/settings/setting.js~SettingField",
    "static": false,
    "longname": "src/structs/settings/setting.js~SettingField#settingLabel",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "member",
    "name": "help",
    "memberof": "src/structs/settings/setting.js~SettingField",
    "static": false,
    "longname": "src/structs/settings/setting.js~SettingField#help",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "member",
    "name": "inputWrapper",
    "memberof": "src/structs/settings/setting.js~SettingField",
    "static": false,
    "longname": "src/structs/settings/setting.js~SettingField#inputWrapper",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 473,
    "kind": "member",
    "name": "input",
    "memberof": "src/structs/settings/setting.js~SettingField",
    "static": false,
    "longname": "src/structs/settings/setting.js~SettingField#input",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "member",
    "name": "getValue",
    "memberof": "src/structs/settings/setting.js~SettingField",
    "static": false,
    "longname": "src/structs/settings/setting.js~SettingField#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 475,
    "kind": "member",
    "name": "processValue",
    "memberof": "src/structs/settings/setting.js~SettingField",
    "static": false,
    "longname": "src/structs/settings/setting.js~SettingField#processValue",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "setInputElement",
    "memberof": "src/structs/settings/setting.js~SettingField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/structs/settings/setting.js~SettingField#setInputElement",
    "access": "public",
    "description": "Performing this will prevent the default callbacks from working!",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement",
          "jQuery"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "node to override the default input with."
      }
    ],
    "return": null
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "getElement",
    "memberof": "src/structs/settings/setting.js~SettingField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/structs/settings/setting.js~SettingField#getElement",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jQuery} jQuery node for the group."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jQuery"
      ],
      "spread": false,
      "description": "jQuery node for the group."
    },
    "params": []
  },
  {
    "__docId__": 478,
    "kind": "file",
    "name": "src/vendor/jquery.js",
    "content": "export const $ = window.$;\r\nexport const jQuery = window.jQuery;",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/vendor/jquery.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 479,
    "kind": "variable",
    "name": "$",
    "memberof": "src/vendor/jquery.js",
    "static": true,
    "longname": "src/vendor/jquery.js~$",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/vendor/jquery.js",
    "importStyle": "{$}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 480,
    "kind": "variable",
    "name": "jQuery",
    "memberof": "src/vendor/jquery.js",
    "static": true,
    "longname": "src/vendor/jquery.js~jQuery",
    "access": "public",
    "export": true,
    "importPath": "pluginlibrary/src/vendor/jquery.js",
    "importStyle": "{jQuery}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 481,
    "kind": "file",
    "name": "src/vendor/vendor.js",
    "content": "export * from \"./jquery\";",
    "static": true,
    "longname": "Z:/Programming/BetterDiscordStuff/PluginLibraryWebpack/src/vendor/vendor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "",
    "longname": "Z:\\Programming\\BetterDiscordStuff\\PluginLibraryWebpack\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"pluginlibrary\",\n  \"version\": \"0.5.6\",\n  \"description\": \"Zere's library for BetterDiscord plugins.\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"jsdoc\": \"^3.5.5\",\n    \"raw-loader\": \"^0.5.1\",\n    \"webpack\": \"^4.8.3\",\n    \"webpack-cli\": \"^2.1.3\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack --config webpack.config.js --progress --colors\",\n    \"prod\": \"webpack --config webpack.config.js --progress --colors && jsdoc -c jsdoc.config.json\"\n  },\n  \"author\": \"Zerebos\",\n  \"license\": \"ISC\"\n}\n",
    "longname": "Z:\\Programming\\BetterDiscordStuff\\PluginLibraryWebpack\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]